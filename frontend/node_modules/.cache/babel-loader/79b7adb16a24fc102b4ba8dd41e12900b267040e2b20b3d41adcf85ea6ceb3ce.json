{"ast":null,"code":"var Mappers = require(\"./mappers\");\nvar Tile = require(\"./tile\");\nvar ROM = function (nes) {\n  this.nes = nes;\n  this.mapperName = new Array(92);\n  for (var i = 0; i < 92; i++) {\n    this.mapperName[i] = \"Unknown Mapper\";\n  }\n  this.mapperName[0] = \"Direct Access\";\n  this.mapperName[1] = \"Nintendo MMC1\";\n  this.mapperName[2] = \"UNROM\";\n  this.mapperName[3] = \"CNROM\";\n  this.mapperName[4] = \"Nintendo MMC3\";\n  this.mapperName[5] = \"Nintendo MMC5\";\n  this.mapperName[6] = \"FFE F4xxx\";\n  this.mapperName[7] = \"AOROM\";\n  this.mapperName[8] = \"FFE F3xxx\";\n  this.mapperName[9] = \"Nintendo MMC2\";\n  this.mapperName[10] = \"Nintendo MMC4\";\n  this.mapperName[11] = \"Color Dreams Chip\";\n  this.mapperName[12] = \"FFE F6xxx\";\n  this.mapperName[15] = \"100-in-1 switch\";\n  this.mapperName[16] = \"Bandai chip\";\n  this.mapperName[17] = \"FFE F8xxx\";\n  this.mapperName[18] = \"Jaleco SS8806 chip\";\n  this.mapperName[19] = \"Namcot 106 chip\";\n  this.mapperName[20] = \"Famicom Disk System\";\n  this.mapperName[21] = \"Konami VRC4a\";\n  this.mapperName[22] = \"Konami VRC2a\";\n  this.mapperName[23] = \"Konami VRC2a\";\n  this.mapperName[24] = \"Konami VRC6\";\n  this.mapperName[25] = \"Konami VRC4b\";\n  this.mapperName[32] = \"Irem G-101 chip\";\n  this.mapperName[33] = \"Taito TC0190/TC0350\";\n  this.mapperName[34] = \"32kB ROM switch\";\n  this.mapperName[64] = \"Tengen RAMBO-1 chip\";\n  this.mapperName[65] = \"Irem H-3001 chip\";\n  this.mapperName[66] = \"GNROM switch\";\n  this.mapperName[67] = \"SunSoft3 chip\";\n  this.mapperName[68] = \"SunSoft4 chip\";\n  this.mapperName[69] = \"SunSoft5 FME-7 chip\";\n  this.mapperName[71] = \"Camerica chip\";\n  this.mapperName[78] = \"Irem 74HC161/32-based\";\n  this.mapperName[91] = \"Pirate HK-SF3 chip\";\n};\nROM.prototype = {\n  // Mirroring types:\n  VERTICAL_MIRRORING: 0,\n  HORIZONTAL_MIRRORING: 1,\n  FOURSCREEN_MIRRORING: 2,\n  SINGLESCREEN_MIRRORING: 3,\n  SINGLESCREEN_MIRRORING2: 4,\n  SINGLESCREEN_MIRRORING3: 5,\n  SINGLESCREEN_MIRRORING4: 6,\n  CHRROM_MIRRORING: 7,\n  header: null,\n  rom: null,\n  vrom: null,\n  vromTile: null,\n  romCount: null,\n  vromCount: null,\n  mirroring: null,\n  batteryRam: null,\n  trainer: null,\n  fourScreen: null,\n  mapperType: null,\n  valid: false,\n  load: function (data) {\n    var i, j, v;\n    if (data.indexOf(\"NES\\x1a\") === -1) {\n      throw new Error(\"Not a valid NES ROM.\");\n    }\n    this.header = new Array(16);\n    for (i = 0; i < 16; i++) {\n      this.header[i] = data.charCodeAt(i) & 0xff;\n    }\n    this.romCount = this.header[4];\n    this.vromCount = this.header[5] * 2; // Get the number of 4kB banks, not 8kB\n    this.mirroring = (this.header[6] & 1) !== 0 ? 1 : 0;\n    this.batteryRam = (this.header[6] & 2) !== 0;\n    this.trainer = (this.header[6] & 4) !== 0;\n    this.fourScreen = (this.header[6] & 8) !== 0;\n    this.mapperType = this.header[6] >> 4 | this.header[7] & 0xf0;\n    /* TODO\n        if (this.batteryRam)\n            this.loadBatteryRam();*/\n    // Check whether byte 8-15 are zero's:\n    var foundError = false;\n    for (i = 8; i < 16; i++) {\n      if (this.header[i] !== 0) {\n        foundError = true;\n        break;\n      }\n    }\n    if (foundError) {\n      this.mapperType &= 0xf; // Ignore byte 7\n    }\n    // Load PRG-ROM banks:\n    this.rom = new Array(this.romCount);\n    var offset = 16;\n    for (i = 0; i < this.romCount; i++) {\n      this.rom[i] = new Array(16384);\n      for (j = 0; j < 16384; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.rom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 16384;\n    }\n    // Load CHR-ROM banks:\n    this.vrom = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vrom[i] = new Array(4096);\n      for (j = 0; j < 4096; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.vrom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 4096;\n    }\n\n    // Create VROM tiles:\n    this.vromTile = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vromTile[i] = new Array(256);\n      for (j = 0; j < 256; j++) {\n        this.vromTile[i][j] = new Tile();\n      }\n    }\n\n    // Convert CHR-ROM banks to tiles:\n    var tileIndex;\n    var leftOver;\n    for (v = 0; v < this.vromCount; v++) {\n      for (i = 0; i < 4096; i++) {\n        tileIndex = i >> 4;\n        leftOver = i % 16;\n        if (leftOver < 8) {\n          this.vromTile[v][tileIndex].setScanline(leftOver, this.vrom[v][i], this.vrom[v][i + 8]);\n        } else {\n          this.vromTile[v][tileIndex].setScanline(leftOver - 8, this.vrom[v][i - 8], this.vrom[v][i]);\n        }\n      }\n    }\n    this.valid = true;\n  },\n  getMirroringType: function () {\n    if (this.fourScreen) {\n      return this.FOURSCREEN_MIRRORING;\n    }\n    if (this.mirroring === 0) {\n      return this.HORIZONTAL_MIRRORING;\n    }\n    return this.VERTICAL_MIRRORING;\n  },\n  getMapperName: function () {\n    if (this.mapperType >= 0 && this.mapperType < this.mapperName.length) {\n      return this.mapperName[this.mapperType];\n    }\n    return \"Unknown Mapper, \" + this.mapperType;\n  },\n  mapperSupported: function () {\n    return typeof Mappers[this.mapperType] !== \"undefined\";\n  },\n  createMapper: function () {\n    if (this.mapperSupported()) {\n      return new Mappers[this.mapperType](this.nes);\n    } else {\n      throw new Error(\"This ROM uses a mapper not supported by JSNES: \" + this.getMapperName() + \"(\" + this.mapperType + \")\");\n    }\n  }\n};\nmodule.exports = ROM;","map":{"version":3,"names":["Mappers","require","Tile","ROM","nes","mapperName","Array","i","prototype","VERTICAL_MIRRORING","HORIZONTAL_MIRRORING","FOURSCREEN_MIRRORING","SINGLESCREEN_MIRRORING","SINGLESCREEN_MIRRORING2","SINGLESCREEN_MIRRORING3","SINGLESCREEN_MIRRORING4","CHRROM_MIRRORING","header","rom","vrom","vromTile","romCount","vromCount","mirroring","batteryRam","trainer","fourScreen","mapperType","valid","load","data","j","v","indexOf","Error","charCodeAt","foundError","offset","length","tileIndex","leftOver","setScanline","getMirroringType","getMapperName","mapperSupported","createMapper","module","exports"],"sources":["/Users/zakariaalmardaee/csfolder/vintage-game-emulator/frontend/node_modules/jsnes/src/rom.js"],"sourcesContent":["var Mappers = require(\"./mappers\");\nvar Tile = require(\"./tile\");\n\nvar ROM = function (nes) {\n  this.nes = nes;\n\n  this.mapperName = new Array(92);\n\n  for (var i = 0; i < 92; i++) {\n    this.mapperName[i] = \"Unknown Mapper\";\n  }\n  this.mapperName[0] = \"Direct Access\";\n  this.mapperName[1] = \"Nintendo MMC1\";\n  this.mapperName[2] = \"UNROM\";\n  this.mapperName[3] = \"CNROM\";\n  this.mapperName[4] = \"Nintendo MMC3\";\n  this.mapperName[5] = \"Nintendo MMC5\";\n  this.mapperName[6] = \"FFE F4xxx\";\n  this.mapperName[7] = \"AOROM\";\n  this.mapperName[8] = \"FFE F3xxx\";\n  this.mapperName[9] = \"Nintendo MMC2\";\n  this.mapperName[10] = \"Nintendo MMC4\";\n  this.mapperName[11] = \"Color Dreams Chip\";\n  this.mapperName[12] = \"FFE F6xxx\";\n  this.mapperName[15] = \"100-in-1 switch\";\n  this.mapperName[16] = \"Bandai chip\";\n  this.mapperName[17] = \"FFE F8xxx\";\n  this.mapperName[18] = \"Jaleco SS8806 chip\";\n  this.mapperName[19] = \"Namcot 106 chip\";\n  this.mapperName[20] = \"Famicom Disk System\";\n  this.mapperName[21] = \"Konami VRC4a\";\n  this.mapperName[22] = \"Konami VRC2a\";\n  this.mapperName[23] = \"Konami VRC2a\";\n  this.mapperName[24] = \"Konami VRC6\";\n  this.mapperName[25] = \"Konami VRC4b\";\n  this.mapperName[32] = \"Irem G-101 chip\";\n  this.mapperName[33] = \"Taito TC0190/TC0350\";\n  this.mapperName[34] = \"32kB ROM switch\";\n\n  this.mapperName[64] = \"Tengen RAMBO-1 chip\";\n  this.mapperName[65] = \"Irem H-3001 chip\";\n  this.mapperName[66] = \"GNROM switch\";\n  this.mapperName[67] = \"SunSoft3 chip\";\n  this.mapperName[68] = \"SunSoft4 chip\";\n  this.mapperName[69] = \"SunSoft5 FME-7 chip\";\n  this.mapperName[71] = \"Camerica chip\";\n  this.mapperName[78] = \"Irem 74HC161/32-based\";\n  this.mapperName[91] = \"Pirate HK-SF3 chip\";\n};\n\nROM.prototype = {\n  // Mirroring types:\n  VERTICAL_MIRRORING: 0,\n  HORIZONTAL_MIRRORING: 1,\n  FOURSCREEN_MIRRORING: 2,\n  SINGLESCREEN_MIRRORING: 3,\n  SINGLESCREEN_MIRRORING2: 4,\n  SINGLESCREEN_MIRRORING3: 5,\n  SINGLESCREEN_MIRRORING4: 6,\n  CHRROM_MIRRORING: 7,\n\n  header: null,\n  rom: null,\n  vrom: null,\n  vromTile: null,\n\n  romCount: null,\n  vromCount: null,\n  mirroring: null,\n  batteryRam: null,\n  trainer: null,\n  fourScreen: null,\n  mapperType: null,\n  valid: false,\n\n  load: function (data) {\n    var i, j, v;\n\n    if (data.indexOf(\"NES\\x1a\") === -1) {\n      throw new Error(\"Not a valid NES ROM.\");\n    }\n    this.header = new Array(16);\n    for (i = 0; i < 16; i++) {\n      this.header[i] = data.charCodeAt(i) & 0xff;\n    }\n    this.romCount = this.header[4];\n    this.vromCount = this.header[5] * 2; // Get the number of 4kB banks, not 8kB\n    this.mirroring = (this.header[6] & 1) !== 0 ? 1 : 0;\n    this.batteryRam = (this.header[6] & 2) !== 0;\n    this.trainer = (this.header[6] & 4) !== 0;\n    this.fourScreen = (this.header[6] & 8) !== 0;\n    this.mapperType = (this.header[6] >> 4) | (this.header[7] & 0xf0);\n    /* TODO\n        if (this.batteryRam)\n            this.loadBatteryRam();*/\n    // Check whether byte 8-15 are zero's:\n    var foundError = false;\n    for (i = 8; i < 16; i++) {\n      if (this.header[i] !== 0) {\n        foundError = true;\n        break;\n      }\n    }\n    if (foundError) {\n      this.mapperType &= 0xf; // Ignore byte 7\n    }\n    // Load PRG-ROM banks:\n    this.rom = new Array(this.romCount);\n    var offset = 16;\n    for (i = 0; i < this.romCount; i++) {\n      this.rom[i] = new Array(16384);\n      for (j = 0; j < 16384; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.rom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 16384;\n    }\n    // Load CHR-ROM banks:\n    this.vrom = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vrom[i] = new Array(4096);\n      for (j = 0; j < 4096; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.vrom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 4096;\n    }\n\n    // Create VROM tiles:\n    this.vromTile = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vromTile[i] = new Array(256);\n      for (j = 0; j < 256; j++) {\n        this.vromTile[i][j] = new Tile();\n      }\n    }\n\n    // Convert CHR-ROM banks to tiles:\n    var tileIndex;\n    var leftOver;\n    for (v = 0; v < this.vromCount; v++) {\n      for (i = 0; i < 4096; i++) {\n        tileIndex = i >> 4;\n        leftOver = i % 16;\n        if (leftOver < 8) {\n          this.vromTile[v][tileIndex].setScanline(\n            leftOver,\n            this.vrom[v][i],\n            this.vrom[v][i + 8]\n          );\n        } else {\n          this.vromTile[v][tileIndex].setScanline(\n            leftOver - 8,\n            this.vrom[v][i - 8],\n            this.vrom[v][i]\n          );\n        }\n      }\n    }\n\n    this.valid = true;\n  },\n\n  getMirroringType: function () {\n    if (this.fourScreen) {\n      return this.FOURSCREEN_MIRRORING;\n    }\n    if (this.mirroring === 0) {\n      return this.HORIZONTAL_MIRRORING;\n    }\n    return this.VERTICAL_MIRRORING;\n  },\n\n  getMapperName: function () {\n    if (this.mapperType >= 0 && this.mapperType < this.mapperName.length) {\n      return this.mapperName[this.mapperType];\n    }\n    return \"Unknown Mapper, \" + this.mapperType;\n  },\n\n  mapperSupported: function () {\n    return typeof Mappers[this.mapperType] !== \"undefined\";\n  },\n\n  createMapper: function () {\n    if (this.mapperSupported()) {\n      return new Mappers[this.mapperType](this.nes);\n    } else {\n      throw new Error(\n        \"This ROM uses a mapper not supported by JSNES: \" +\n          this.getMapperName() +\n          \"(\" +\n          this.mapperType +\n          \")\"\n      );\n    }\n  },\n};\n\nmodule.exports = ROM;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}