{"ast":null,"code":"var Tile = require(\"./tile\");\nvar utils = require(\"./utils\");\nvar PPU = function (nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.vramMem = null;\n  this.spriteMem = null;\n  this.vramAddress = null;\n  this.vramTmpAddress = null;\n  this.vramBufferedReadValue = null;\n  this.firstWrite = null;\n  this.sramAddress = null;\n  this.currentMirroring = null;\n  this.requestEndFrame = null;\n  this.nmiOk = null;\n  this.dummyCycleToggle = null;\n  this.validTileData = null;\n  this.nmiCounter = null;\n  this.scanlineAlreadyRendered = null;\n  this.f_nmiOnVblank = null;\n  this.f_spriteSize = null;\n  this.f_bgPatternTable = null;\n  this.f_spPatternTable = null;\n  this.f_addrInc = null;\n  this.f_nTblAddress = null;\n  this.f_color = null;\n  this.f_spVisibility = null;\n  this.f_bgVisibility = null;\n  this.f_spClipping = null;\n  this.f_bgClipping = null;\n  this.f_dispType = null;\n  this.cntFV = null;\n  this.cntV = null;\n  this.cntH = null;\n  this.cntVT = null;\n  this.cntHT = null;\n  this.regFV = null;\n  this.regV = null;\n  this.regH = null;\n  this.regVT = null;\n  this.regHT = null;\n  this.regFH = null;\n  this.regS = null;\n  this.curNt = null;\n  this.attrib = null;\n  this.buffer = null;\n  this.bgbuffer = null;\n  this.pixrendered = null;\n  this.validTileData = null;\n  this.scantile = null;\n  this.scanline = null;\n  this.lastRenderedScanline = null;\n  this.curX = null;\n  this.sprX = null;\n  this.sprY = null;\n  this.sprTile = null;\n  this.sprCol = null;\n  this.vertFlip = null;\n  this.horiFlip = null;\n  this.bgPriority = null;\n  this.spr0HitX = null;\n  this.spr0HitY = null;\n  this.hitSpr0 = null;\n  this.sprPalette = null;\n  this.imgPalette = null;\n  this.ptTile = null;\n  this.ntable1 = null;\n  this.currentMirroring = null;\n  this.nameTable = null;\n  this.vramMirrorTable = null;\n  this.palTable = null;\n\n  // Rendering Options:\n  this.showSpr0Hit = false;\n  this.clipToTvSize = true;\n  this.reset();\n};\nPPU.prototype = {\n  // Status flags:\n  STATUS_VRAMWRITE: 4,\n  STATUS_SLSPRITECOUNT: 5,\n  STATUS_SPRITE0HIT: 6,\n  STATUS_VBLANK: 7,\n  reset: function () {\n    var i;\n\n    // Memory\n    this.vramMem = new Array(0x8000);\n    this.spriteMem = new Array(0x100);\n    for (i = 0; i < this.vramMem.length; i++) {\n      this.vramMem[i] = 0;\n    }\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteMem[i] = 0;\n    }\n\n    // VRAM I/O:\n    this.vramAddress = null;\n    this.vramTmpAddress = null;\n    this.vramBufferedReadValue = 0;\n    this.firstWrite = true; // VRAM/Scroll Hi/Lo latch\n\n    // SPR-RAM I/O:\n    this.sramAddress = 0; // 8-bit only.\n\n    this.currentMirroring = -1;\n    this.requestEndFrame = false;\n    this.nmiOk = false;\n    this.dummyCycleToggle = false;\n    this.validTileData = false;\n    this.nmiCounter = 0;\n    this.scanlineAlreadyRendered = null;\n\n    // Control Flags Register 1:\n    this.f_nmiOnVblank = 0; // NMI on VBlank. 0=disable, 1=enable\n    this.f_spriteSize = 0; // Sprite size. 0=8x8, 1=8x16\n    this.f_bgPatternTable = 0; // Background Pattern Table address. 0=0x0000,1=0x1000\n    this.f_spPatternTable = 0; // Sprite Pattern Table address. 0=0x0000,1=0x1000\n    this.f_addrInc = 0; // PPU Address Increment. 0=1,1=32\n    this.f_nTblAddress = 0; // Name Table Address. 0=0x2000,1=0x2400,2=0x2800,3=0x2C00\n\n    // Control Flags Register 2:\n    this.f_color = 0; // Background color. 0=black, 1=blue, 2=green, 4=red\n    this.f_spVisibility = 0; // Sprite visibility. 0=not displayed,1=displayed\n    this.f_bgVisibility = 0; // Background visibility. 0=Not Displayed,1=displayed\n    this.f_spClipping = 0; // Sprite clipping. 0=Sprites invisible in left 8-pixel column,1=No clipping\n    this.f_bgClipping = 0; // Background clipping. 0=BG invisible in left 8-pixel column, 1=No clipping\n    this.f_dispType = 0; // Display type. 0=color, 1=monochrome\n\n    // Counters:\n    this.cntFV = 0;\n    this.cntV = 0;\n    this.cntH = 0;\n    this.cntVT = 0;\n    this.cntHT = 0;\n\n    // Registers:\n    this.regFV = 0;\n    this.regV = 0;\n    this.regH = 0;\n    this.regVT = 0;\n    this.regHT = 0;\n    this.regFH = 0;\n    this.regS = 0;\n\n    // These are temporary variables used in rendering and sound procedures.\n    // Their states outside of those procedures can be ignored.\n    // TODO: the use of this is a bit weird, investigate\n    this.curNt = null;\n\n    // Variables used when rendering:\n    this.attrib = new Array(32);\n    this.buffer = new Array(256 * 240);\n    this.bgbuffer = new Array(256 * 240);\n    this.pixrendered = new Array(256 * 240);\n    this.validTileData = null;\n    this.scantile = new Array(32);\n\n    // Initialize misc vars:\n    this.scanline = 0;\n    this.lastRenderedScanline = -1;\n    this.curX = 0;\n\n    // Sprite data:\n    this.sprX = new Array(64); // X coordinate\n    this.sprY = new Array(64); // Y coordinate\n    this.sprTile = new Array(64); // Tile Index (into pattern table)\n    this.sprCol = new Array(64); // Upper two bits of color\n    this.vertFlip = new Array(64); // Vertical Flip\n    this.horiFlip = new Array(64); // Horizontal Flip\n    this.bgPriority = new Array(64); // Background priority\n    this.spr0HitX = 0; // Sprite #0 hit X coordinate\n    this.spr0HitY = 0; // Sprite #0 hit Y coordinate\n    this.hitSpr0 = false;\n\n    // Palette data:\n    this.sprPalette = new Array(16);\n    this.imgPalette = new Array(16);\n\n    // Create pattern table tile buffers:\n    this.ptTile = new Array(512);\n    for (i = 0; i < 512; i++) {\n      this.ptTile[i] = new Tile();\n    }\n\n    // Create nametable buffers:\n    // Name table data:\n    this.ntable1 = new Array(4);\n    this.currentMirroring = -1;\n    this.nameTable = new Array(4);\n    for (i = 0; i < 4; i++) {\n      this.nameTable[i] = new NameTable(32, 32, \"Nt\" + i);\n    }\n\n    // Initialize mirroring lookup table:\n    this.vramMirrorTable = new Array(0x8000);\n    for (i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n    this.palTable = new PaletteTable();\n    this.palTable.loadNTSCPalette();\n    //this.palTable.loadDefaultPalette();\n\n    this.updateControlReg1(0);\n    this.updateControlReg2(0);\n  },\n  // Sets Nametable mirroring.\n  setMirroring: function (mirroring) {\n    if (mirroring === this.currentMirroring) {\n      return;\n    }\n    this.currentMirroring = mirroring;\n    this.triggerRendering();\n\n    // Remove mirroring:\n    if (this.vramMirrorTable === null) {\n      this.vramMirrorTable = new Array(0x8000);\n    }\n    for (var i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    // Palette mirroring:\n    this.defineMirrorRegion(0x3f20, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f40, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f80, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3fc0, 0x3f00, 0x20);\n\n    // Additional mirroring:\n    this.defineMirrorRegion(0x3000, 0x2000, 0xf00);\n    this.defineMirrorRegion(0x4000, 0x0000, 0x4000);\n    if (mirroring === this.nes.rom.HORIZONTAL_MIRRORING) {\n      // Horizontal mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2800, 0x400);\n    } else if (mirroring === this.nes.rom.VERTICAL_MIRRORING) {\n      // Vertical mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 1;\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING) {\n      // Single Screen mirroring\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 0;\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2000, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING2) {\n      this.ntable1[0] = 1;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n      this.defineMirrorRegion(0x2400, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else {\n      // Assume Four-screen mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 2;\n      this.ntable1[3] = 3;\n    }\n  },\n  // Define a mirrored area in the address lookup table.\n  // Assumes the regions don't overlap.\n  // The 'to' region is the region that is physically in memory.\n  defineMirrorRegion: function (fromStart, toStart, size) {\n    for (var i = 0; i < size; i++) {\n      this.vramMirrorTable[fromStart + i] = toStart + i;\n    }\n  },\n  startVBlank: function () {\n    // Do NMI:\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n\n    // Make sure everything is rendered:\n    if (this.lastRenderedScanline < 239) {\n      this.renderFramePartially(this.lastRenderedScanline + 1, 240 - this.lastRenderedScanline);\n    }\n\n    // End frame:\n    this.endFrame();\n\n    // Reset scanline counter:\n    this.lastRenderedScanline = -1;\n  },\n  endScanline: function () {\n    switch (this.scanline) {\n      case 19:\n        // Dummy scanline.\n        // May be variable length:\n        if (this.dummyCycleToggle) {\n          // Remove dead cycle at end of scanline,\n          // for next scanline:\n          this.curX = 1;\n          this.dummyCycleToggle = !this.dummyCycleToggle;\n        }\n        break;\n      case 20:\n        // Clear VBlank flag:\n        this.setStatusFlag(this.STATUS_VBLANK, false);\n\n        // Clear Sprite #0 hit flag:\n        this.setStatusFlag(this.STATUS_SPRITE0HIT, false);\n        this.hitSpr0 = false;\n        this.spr0HitX = -1;\n        this.spr0HitY = -1;\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Update counters:\n          this.cntFV = this.regFV;\n          this.cntV = this.regV;\n          this.cntH = this.regH;\n          this.cntVT = this.regVT;\n          this.cntHT = this.regHT;\n          if (this.f_bgVisibility === 1) {\n            // Render dummy scanline:\n            this.renderBgScanline(false, 0);\n          }\n        }\n        if (this.f_bgVisibility === 1 && this.f_spVisibility === 1) {\n          // Check sprite 0 hit for first scanline:\n          this.checkSprite0(0);\n        }\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Clock mapper IRQ Counter:\n          this.nes.mmap.clockIrqCounter();\n        }\n        break;\n      case 261:\n        // Dead scanline, no rendering.\n        // Set VINT:\n        this.setStatusFlag(this.STATUS_VBLANK, true);\n        this.requestEndFrame = true;\n        this.nmiCounter = 9;\n\n        // Wrap around:\n        this.scanline = -1; // will be incremented to 0\n\n        break;\n      default:\n        if (this.scanline >= 21 && this.scanline <= 260) {\n          // Render normally:\n          if (this.f_bgVisibility === 1) {\n            if (!this.scanlineAlreadyRendered) {\n              // update scroll:\n              this.cntHT = this.regHT;\n              this.cntH = this.regH;\n              this.renderBgScanline(true, this.scanline + 1 - 21);\n            }\n            this.scanlineAlreadyRendered = false;\n\n            // Check for sprite 0 (next scanline):\n            if (!this.hitSpr0 && this.f_spVisibility === 1) {\n              if (this.sprX[0] >= -7 && this.sprX[0] < 256 && this.sprY[0] + 1 <= this.scanline - 20 && this.sprY[0] + 1 + (this.f_spriteSize === 0 ? 8 : 16) >= this.scanline - 20) {\n                if (this.checkSprite0(this.scanline - 20)) {\n                  this.hitSpr0 = true;\n                }\n              }\n            }\n          }\n          if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n            // Clock mapper IRQ Counter:\n            this.nes.mmap.clockIrqCounter();\n          }\n        }\n    }\n    this.scanline++;\n    this.regsToAddress();\n    this.cntsToAddress();\n  },\n  startFrame: function () {\n    // Set background color:\n    var bgColor = 0;\n    if (this.f_dispType === 0) {\n      // Color display.\n      // f_color determines color emphasis.\n      // Use first entry of image palette as BG color.\n      bgColor = this.imgPalette[0];\n    } else {\n      // Monochrome display.\n      // f_color determines the bg color.\n      switch (this.f_color) {\n        case 0:\n          // Black\n          bgColor = 0x00000;\n          break;\n        case 1:\n          // Green\n          bgColor = 0x00ff00;\n          break;\n        case 2:\n          // Blue\n          bgColor = 0xff0000;\n          break;\n        case 3:\n          // Invalid. Use black.\n          bgColor = 0x000000;\n          break;\n        case 4:\n          // Red\n          bgColor = 0x0000ff;\n          break;\n        default:\n          // Invalid. Use black.\n          bgColor = 0x0;\n      }\n    }\n    var buffer = this.buffer;\n    var i;\n    for (i = 0; i < 256 * 240; i++) {\n      buffer[i] = bgColor;\n    }\n    var pixrendered = this.pixrendered;\n    for (i = 0; i < pixrendered.length; i++) {\n      pixrendered[i] = 65;\n    }\n  },\n  endFrame: function () {\n    var i, x, y;\n    var buffer = this.buffer;\n\n    // Draw spr#0 hit coordinates:\n    if (this.showSpr0Hit) {\n      // Spr 0 position:\n      if (this.sprX[0] >= 0 && this.sprX[0] < 256 && this.sprY[0] >= 0 && this.sprY[0] < 240) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.sprY[0] << 8) + i] = 0xff5555;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.sprX[0]] = 0xff5555;\n        }\n      }\n      // Hit position:\n      if (this.spr0HitX >= 0 && this.spr0HitX < 256 && this.spr0HitY >= 0 && this.spr0HitY < 240) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.spr0HitY << 8) + i] = 0x55ff55;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.spr0HitX] = 0x55ff55;\n        }\n      }\n    }\n\n    // This is a bit lazy..\n    // if either the sprites or the background should be clipped,\n    // both are clipped after rendering is finished.\n    if (this.clipToTvSize || this.f_bgClipping === 0 || this.f_spClipping === 0) {\n      // Clip left 8-pixels column:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + x] = 0;\n        }\n      }\n    }\n    if (this.clipToTvSize) {\n      // Clip right 8-pixels column too:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + 255 - x] = 0;\n        }\n      }\n    }\n\n    // Clip top and bottom 8 pixels:\n    if (this.clipToTvSize) {\n      for (y = 0; y < 8; y++) {\n        for (x = 0; x < 256; x++) {\n          buffer[(y << 8) + x] = 0;\n          buffer[(239 - y << 8) + x] = 0;\n        }\n      }\n    }\n    this.nes.ui.writeFrame(buffer);\n  },\n  updateControlReg1: function (value) {\n    this.triggerRendering();\n    this.f_nmiOnVblank = value >> 7 & 1;\n    this.f_spriteSize = value >> 5 & 1;\n    this.f_bgPatternTable = value >> 4 & 1;\n    this.f_spPatternTable = value >> 3 & 1;\n    this.f_addrInc = value >> 2 & 1;\n    this.f_nTblAddress = value & 3;\n    this.regV = value >> 1 & 1;\n    this.regH = value & 1;\n    this.regS = value >> 4 & 1;\n  },\n  updateControlReg2: function (value) {\n    this.triggerRendering();\n    this.f_color = value >> 5 & 7;\n    this.f_spVisibility = value >> 4 & 1;\n    this.f_bgVisibility = value >> 3 & 1;\n    this.f_spClipping = value >> 2 & 1;\n    this.f_bgClipping = value >> 1 & 1;\n    this.f_dispType = value & 1;\n    if (this.f_dispType === 0) {\n      this.palTable.setEmphasis(this.f_color);\n    }\n    this.updatePalettes();\n  },\n  setStatusFlag: function (flag, value) {\n    var n = 1 << flag;\n    this.nes.cpu.mem[0x2002] = this.nes.cpu.mem[0x2002] & 255 - n | (value ? n : 0);\n  },\n  // CPU Register $2002:\n  // Read the Status Register.\n  readStatusRegister: function () {\n    var tmp = this.nes.cpu.mem[0x2002];\n\n    // Reset scroll & VRAM Address toggle:\n    this.firstWrite = true;\n\n    // Clear VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, false);\n\n    // Fetch status data:\n    return tmp;\n  },\n  // CPU Register $2003:\n  // Write the SPR-RAM address that is used for sramWrite (Register 0x2004 in CPU memory map)\n  writeSRAMAddress: function (address) {\n    this.sramAddress = address;\n  },\n  // CPU Register $2004 (R):\n  // Read from SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramLoad: function () {\n    /*short tmp = sprMem.load(sramAddress);\n        sramAddress++; // Increment address\n        sramAddress%=0x100;\n        return tmp;*/\n    return this.spriteMem[this.sramAddress];\n  },\n  // CPU Register $2004 (W):\n  // Write to SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramWrite: function (value) {\n    this.spriteMem[this.sramAddress] = value;\n    this.spriteRamWriteUpdate(this.sramAddress, value);\n    this.sramAddress++; // Increment address\n    this.sramAddress %= 0x100;\n  },\n  // CPU Register $2005:\n  // Write to scroll registers.\n  // The first write is the vertical offset, the second is the\n  // horizontal offset:\n  scrollWrite: function (value) {\n    this.triggerRendering();\n    if (this.firstWrite) {\n      // First write, horizontal scroll:\n      this.regHT = value >> 3 & 31;\n      this.regFH = value & 7;\n    } else {\n      // Second write, vertical scroll:\n      this.regFV = value & 7;\n      this.regVT = value >> 3 & 31;\n    }\n    this.firstWrite = !this.firstWrite;\n  },\n  // CPU Register $2006:\n  // Sets the adress used when reading/writing from/to VRAM.\n  // The first write sets the high byte, the second the low byte.\n  writeVRAMAddress: function (address) {\n    if (this.firstWrite) {\n      this.regFV = address >> 4 & 3;\n      this.regV = address >> 3 & 1;\n      this.regH = address >> 2 & 1;\n      this.regVT = this.regVT & 7 | (address & 3) << 3;\n    } else {\n      this.triggerRendering();\n      this.regVT = this.regVT & 24 | address >> 5 & 7;\n      this.regHT = address & 31;\n      this.cntFV = this.regFV;\n      this.cntV = this.regV;\n      this.cntH = this.regH;\n      this.cntVT = this.regVT;\n      this.cntHT = this.regHT;\n      this.checkSprite0(this.scanline - 20);\n    }\n    this.firstWrite = !this.firstWrite;\n\n    // Invoke mapper latch:\n    this.cntsToAddress();\n    if (this.vramAddress < 0x2000) {\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n  },\n  // CPU Register $2007(R):\n  // Read from PPU memory. The address should be set first.\n  vramLoad: function () {\n    var tmp;\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    // If address is in range 0x0000-0x3EFF, return buffered values:\n    if (this.vramAddress <= 0x3eff) {\n      tmp = this.vramBufferedReadValue;\n\n      // Update buffered value:\n      if (this.vramAddress < 0x2000) {\n        this.vramBufferedReadValue = this.vramMem[this.vramAddress];\n      } else {\n        this.vramBufferedReadValue = this.mirroredLoad(this.vramAddress);\n      }\n\n      // Mapper latch access:\n      if (this.vramAddress < 0x2000) {\n        this.nes.mmap.latchAccess(this.vramAddress);\n      }\n\n      // Increment by either 1 or 32, depending on d2 of Control Register 1:\n      this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n      this.cntsFromAddress();\n      this.regsFromAddress();\n      return tmp; // Return the previous buffered value.\n    }\n\n    // No buffering in this mem range. Read normally.\n    tmp = this.mirroredLoad(this.vramAddress);\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n    this.cntsFromAddress();\n    this.regsFromAddress();\n    return tmp;\n  },\n  // CPU Register $2007(W):\n  // Write to PPU memory. The address should be set first.\n  vramWrite: function (value) {\n    this.triggerRendering();\n    this.cntsToAddress();\n    this.regsToAddress();\n    if (this.vramAddress >= 0x2000) {\n      // Mirroring is used.\n      this.mirroredWrite(this.vramAddress, value);\n    } else {\n      // Write normally.\n      this.writeMem(this.vramAddress, value);\n\n      // Invoke mapper latch:\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n    this.regsFromAddress();\n    this.cntsFromAddress();\n  },\n  // CPU Register $4014:\n  // Write 256 bytes of main memory\n  // into Sprite RAM.\n  sramDMA: function (value) {\n    var baseAddress = value * 0x100;\n    var data;\n    for (var i = this.sramAddress; i < 256; i++) {\n      data = this.nes.cpu.mem[baseAddress + i];\n      this.spriteMem[i] = data;\n      this.spriteRamWriteUpdate(i, data);\n    }\n    this.nes.cpu.haltCycles(513);\n  },\n  // Updates the scroll registers from a new VRAM address.\n  regsFromAddress: function () {\n    var address = this.vramTmpAddress >> 8 & 0xff;\n    this.regFV = address >> 4 & 7;\n    this.regV = address >> 3 & 1;\n    this.regH = address >> 2 & 1;\n    this.regVT = this.regVT & 7 | (address & 3) << 3;\n    address = this.vramTmpAddress & 0xff;\n    this.regVT = this.regVT & 24 | address >> 5 & 7;\n    this.regHT = address & 31;\n  },\n  // Updates the scroll registers from a new VRAM address.\n  cntsFromAddress: function () {\n    var address = this.vramAddress >> 8 & 0xff;\n    this.cntFV = address >> 4 & 3;\n    this.cntV = address >> 3 & 1;\n    this.cntH = address >> 2 & 1;\n    this.cntVT = this.cntVT & 7 | (address & 3) << 3;\n    address = this.vramAddress & 0xff;\n    this.cntVT = this.cntVT & 24 | address >> 5 & 7;\n    this.cntHT = address & 31;\n  },\n  regsToAddress: function () {\n    var b1 = (this.regFV & 7) << 4;\n    b1 |= (this.regV & 1) << 3;\n    b1 |= (this.regH & 1) << 2;\n    b1 |= this.regVT >> 3 & 3;\n    var b2 = (this.regVT & 7) << 5;\n    b2 |= this.regHT & 31;\n    this.vramTmpAddress = (b1 << 8 | b2) & 0x7fff;\n  },\n  cntsToAddress: function () {\n    var b1 = (this.cntFV & 7) << 4;\n    b1 |= (this.cntV & 1) << 3;\n    b1 |= (this.cntH & 1) << 2;\n    b1 |= this.cntVT >> 3 & 3;\n    var b2 = (this.cntVT & 7) << 5;\n    b2 |= this.cntHT & 31;\n    this.vramAddress = (b1 << 8 | b2) & 0x7fff;\n  },\n  incTileCounter: function (count) {\n    for (var i = count; i !== 0; i--) {\n      this.cntHT++;\n      if (this.cntHT === 32) {\n        this.cntHT = 0;\n        this.cntVT++;\n        if (this.cntVT >= 30) {\n          this.cntH++;\n          if (this.cntH === 2) {\n            this.cntH = 0;\n            this.cntV++;\n            if (this.cntV === 2) {\n              this.cntV = 0;\n              this.cntFV++;\n              this.cntFV &= 0x7;\n            }\n          }\n        }\n      }\n    }\n  },\n  // Reads from memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredLoad: function (address) {\n    return this.vramMem[this.vramMirrorTable[address]];\n  },\n  // Writes to memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredWrite: function (address, value) {\n    if (address >= 0x3f00 && address < 0x3f20) {\n      // Palette write mirroring.\n      if (address === 0x3f00 || address === 0x3f10) {\n        this.writeMem(0x3f00, value);\n        this.writeMem(0x3f10, value);\n      } else if (address === 0x3f04 || address === 0x3f14) {\n        this.writeMem(0x3f04, value);\n        this.writeMem(0x3f14, value);\n      } else if (address === 0x3f08 || address === 0x3f18) {\n        this.writeMem(0x3f08, value);\n        this.writeMem(0x3f18, value);\n      } else if (address === 0x3f0c || address === 0x3f1c) {\n        this.writeMem(0x3f0c, value);\n        this.writeMem(0x3f1c, value);\n      } else {\n        this.writeMem(address, value);\n      }\n    } else {\n      // Use lookup table for mirrored address:\n      if (address < this.vramMirrorTable.length) {\n        this.writeMem(this.vramMirrorTable[address], value);\n      } else {\n        throw new Error(\"Invalid VRAM address: \" + address.toString(16));\n      }\n    }\n  },\n  triggerRendering: function () {\n    if (this.scanline >= 21 && this.scanline <= 260) {\n      // Render sprites, and combine:\n      this.renderFramePartially(this.lastRenderedScanline + 1, this.scanline - 21 - this.lastRenderedScanline);\n\n      // Set last rendered scanline:\n      this.lastRenderedScanline = this.scanline - 21;\n    }\n  },\n  renderFramePartially: function (startScan, scanCount) {\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, true);\n    }\n    if (this.f_bgVisibility === 1) {\n      var si = startScan << 8;\n      var ei = startScan + scanCount << 8;\n      if (ei > 0xf000) {\n        ei = 0xf000;\n      }\n      var buffer = this.buffer;\n      var bgbuffer = this.bgbuffer;\n      var pixrendered = this.pixrendered;\n      for (var destIndex = si; destIndex < ei; destIndex++) {\n        if (pixrendered[destIndex] > 0xff) {\n          buffer[destIndex] = bgbuffer[destIndex];\n        }\n      }\n    }\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, false);\n    }\n    this.validTileData = false;\n  },\n  renderBgScanline: function (bgbuffer, scan) {\n    var baseTile = this.regS === 0 ? 0 : 256;\n    var destIndex = (scan << 8) - this.regFH;\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n    this.cntHT = this.regHT;\n    this.cntH = this.regH;\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n    if (scan < 240 && scan - this.cntFV >= 0) {\n      var tscanoffset = this.cntFV << 3;\n      var scantile = this.scantile;\n      var attrib = this.attrib;\n      var ptTile = this.ptTile;\n      var nameTable = this.nameTable;\n      var imgPalette = this.imgPalette;\n      var pixrendered = this.pixrendered;\n      var targetBuffer = bgbuffer ? this.bgbuffer : this.buffer;\n      var t, tpix, att, col;\n      for (var tile = 0; tile < 32; tile++) {\n        if (scan >= 0) {\n          // Fetch tile & attrib data:\n          if (this.validTileData) {\n            // Get data from array:\n            t = scantile[tile];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = attrib[tile];\n          } else {\n            // Fetch data:\n            t = ptTile[baseTile + nameTable[this.curNt].getTileIndex(this.cntHT, this.cntVT)];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = nameTable[this.curNt].getAttrib(this.cntHT, this.cntVT);\n            scantile[tile] = t;\n            attrib[tile] = att;\n          }\n\n          // Render tile scanline:\n          var sx = 0;\n          var x = (tile << 3) - this.regFH;\n          if (x > -8) {\n            if (x < 0) {\n              destIndex -= x;\n              sx = -x;\n            }\n            if (t.opaque[this.cntFV]) {\n              for (; sx < 8; sx++) {\n                targetBuffer[destIndex] = imgPalette[tpix[tscanoffset + sx] + att];\n                pixrendered[destIndex] |= 256;\n                destIndex++;\n              }\n            } else {\n              for (; sx < 8; sx++) {\n                col = tpix[tscanoffset + sx];\n                if (col !== 0) {\n                  targetBuffer[destIndex] = imgPalette[col + att];\n                  pixrendered[destIndex] |= 256;\n                }\n                destIndex++;\n              }\n            }\n          }\n        }\n\n        // Increase Horizontal Tile Counter:\n        if (++this.cntHT === 32) {\n          this.cntHT = 0;\n          this.cntH++;\n          this.cntH %= 2;\n          this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n        }\n      }\n\n      // Tile data for one row should now have been fetched,\n      // so the data in the array is valid.\n      this.validTileData = true;\n    }\n\n    // update vertical scroll:\n    this.cntFV++;\n    if (this.cntFV === 8) {\n      this.cntFV = 0;\n      this.cntVT++;\n      if (this.cntVT === 30) {\n        this.cntVT = 0;\n        this.cntV++;\n        this.cntV %= 2;\n        this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n      } else if (this.cntVT === 32) {\n        this.cntVT = 0;\n      }\n\n      // Invalidate fetched data:\n      this.validTileData = false;\n    }\n  },\n  renderSpritesPartially: function (startscan, scancount, bgPri) {\n    if (this.f_spVisibility === 1) {\n      for (var i = 0; i < 64; i++) {\n        if (this.bgPriority[i] === bgPri && this.sprX[i] >= 0 && this.sprX[i] < 256 && this.sprY[i] + 8 >= startscan && this.sprY[i] < startscan + scancount) {\n          // Show sprite.\n          if (this.f_spriteSize === 0) {\n            // 8x8 sprites\n\n            this.srcy1 = 0;\n            this.srcy2 = 8;\n            if (this.sprY[i] < startscan) {\n              this.srcy1 = startscan - this.sprY[i] - 1;\n            }\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              this.srcy2 = startscan + scancount - this.sprY[i] + 1;\n            }\n            if (this.f_spPatternTable === 0) {\n              this.ptTile[this.sprTile[i]].render(this.buffer, 0, this.srcy1, 8, this.srcy2, this.sprX[i], this.sprY[i] + 1, this.sprCol[i], this.sprPalette, this.horiFlip[i], this.vertFlip[i], i, this.pixrendered);\n            } else {\n              this.ptTile[this.sprTile[i] + 256].render(this.buffer, 0, this.srcy1, 8, this.srcy2, this.sprX[i], this.sprY[i] + 1, this.sprCol[i], this.sprPalette, this.horiFlip[i], this.vertFlip[i], i, this.pixrendered);\n            }\n          } else {\n            // 8x16 sprites\n            var top = this.sprTile[i];\n            if ((top & 1) !== 0) {\n              top = this.sprTile[i] - 1 + 256;\n            }\n            var srcy1 = 0;\n            var srcy2 = 8;\n            if (this.sprY[i] < startscan) {\n              srcy1 = startscan - this.sprY[i] - 1;\n            }\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              srcy2 = startscan + scancount - this.sprY[i];\n            }\n            this.ptTile[top + (this.vertFlip[i] ? 1 : 0)].render(this.buffer, 0, srcy1, 8, srcy2, this.sprX[i], this.sprY[i] + 1, this.sprCol[i], this.sprPalette, this.horiFlip[i], this.vertFlip[i], i, this.pixrendered);\n            srcy1 = 0;\n            srcy2 = 8;\n            if (this.sprY[i] + 8 < startscan) {\n              srcy1 = startscan - (this.sprY[i] + 8 + 1);\n            }\n            if (this.sprY[i] + 16 > startscan + scancount) {\n              srcy2 = startscan + scancount - (this.sprY[i] + 8);\n            }\n            this.ptTile[top + (this.vertFlip[i] ? 0 : 1)].render(this.buffer, 0, srcy1, 8, srcy2, this.sprX[i], this.sprY[i] + 1 + 8, this.sprCol[i], this.sprPalette, this.horiFlip[i], this.vertFlip[i], i, this.pixrendered);\n          }\n        }\n      }\n    }\n  },\n  checkSprite0: function (scan) {\n    this.spr0HitX = -1;\n    this.spr0HitY = -1;\n    var toffset;\n    var tIndexAdd = this.f_spPatternTable === 0 ? 0 : 256;\n    var x, y, t, i;\n    var bufferIndex;\n    x = this.sprX[0];\n    y = this.sprY[0] + 1;\n    if (this.f_spriteSize === 0) {\n      // 8x8 sprites.\n\n      // Check range:\n      if (y <= scan && y + 8 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n        t = this.ptTile[this.sprTile[0] + tIndexAdd];\n        if (this.vertFlip[0]) {\n          toffset = 7 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n        toffset *= 8;\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (bufferIndex >= 0 && bufferIndex < 61440 && this.pixrendered[bufferIndex] !== 0) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (bufferIndex >= 0 && bufferIndex < 61440 && this.pixrendered[bufferIndex] !== 0) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    } else {\n      // 8x16 sprites:\n\n      // Check range:\n      if (y <= scan && y + 16 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n\n        if (this.vertFlip[0]) {\n          toffset = 15 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n        if (toffset < 8) {\n          // first half of sprite.\n          t = this.ptTile[this.sprTile[0] + (this.vertFlip[0] ? 1 : 0) + ((this.sprTile[0] & 1) !== 0 ? 255 : 0)];\n        } else {\n          // second half of sprite.\n          t = this.ptTile[this.sprTile[0] + (this.vertFlip[0] ? 0 : 1) + ((this.sprTile[0] & 1) !== 0 ? 255 : 0)];\n          if (this.vertFlip[0]) {\n            toffset = 15 - toffset;\n          } else {\n            toffset -= 8;\n          }\n        }\n        toffset *= 8;\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (bufferIndex >= 0 && bufferIndex < 61440 && this.pixrendered[bufferIndex] !== 0) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (bufferIndex >= 0 && bufferIndex < 61440 && this.pixrendered[bufferIndex] !== 0) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    }\n    return false;\n  },\n  // This will write to PPU memory, and\n  // update internally buffered data\n  // appropriately.\n  writeMem: function (address, value) {\n    this.vramMem[address] = value;\n\n    // Update internally buffered data:\n    if (address < 0x2000) {\n      this.vramMem[address] = value;\n      this.patternWrite(address, value);\n    } else if (address >= 0x2000 && address < 0x23c0) {\n      this.nameTableWrite(this.ntable1[0], address - 0x2000, value);\n    } else if (address >= 0x23c0 && address < 0x2400) {\n      this.attribTableWrite(this.ntable1[0], address - 0x23c0, value);\n    } else if (address >= 0x2400 && address < 0x27c0) {\n      this.nameTableWrite(this.ntable1[1], address - 0x2400, value);\n    } else if (address >= 0x27c0 && address < 0x2800) {\n      this.attribTableWrite(this.ntable1[1], address - 0x27c0, value);\n    } else if (address >= 0x2800 && address < 0x2bc0) {\n      this.nameTableWrite(this.ntable1[2], address - 0x2800, value);\n    } else if (address >= 0x2bc0 && address < 0x2c00) {\n      this.attribTableWrite(this.ntable1[2], address - 0x2bc0, value);\n    } else if (address >= 0x2c00 && address < 0x2fc0) {\n      this.nameTableWrite(this.ntable1[3], address - 0x2c00, value);\n    } else if (address >= 0x2fc0 && address < 0x3000) {\n      this.attribTableWrite(this.ntable1[3], address - 0x2fc0, value);\n    } else if (address >= 0x3f00 && address < 0x3f20) {\n      this.updatePalettes();\n    }\n  },\n  // Reads data from $3f00 to $f20\n  // into the two buffered palettes.\n  updatePalettes: function () {\n    var i;\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.imgPalette[i] = this.palTable.getEntry(this.vramMem[0x3f00 + i] & 63);\n      } else {\n        this.imgPalette[i] = this.palTable.getEntry(this.vramMem[0x3f00 + i] & 32);\n      }\n    }\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.sprPalette[i] = this.palTable.getEntry(this.vramMem[0x3f10 + i] & 63);\n      } else {\n        this.sprPalette[i] = this.palTable.getEntry(this.vramMem[0x3f10 + i] & 32);\n      }\n    }\n  },\n  // Updates the internal pattern\n  // table buffers with this new byte.\n  // In vNES, there is a version of this with 4 arguments which isn't used.\n  patternWrite: function (address, value) {\n    var tileIndex = Math.floor(address / 16);\n    var leftOver = address % 16;\n    if (leftOver < 8) {\n      this.ptTile[tileIndex].setScanline(leftOver, value, this.vramMem[address + 8]);\n    } else {\n      this.ptTile[tileIndex].setScanline(leftOver - 8, this.vramMem[address - 8], value);\n    }\n  },\n  // Updates the internal name table buffers\n  // with this new byte.\n  nameTableWrite: function (index, address, value) {\n    this.nameTable[index].tile[address] = value;\n\n    // Update Sprite #0 hit:\n    //updateSpr0Hit();\n    this.checkSprite0(this.scanline - 20);\n  },\n  // Updates the internal pattern\n  // table buffers with this new attribute\n  // table byte.\n  attribTableWrite: function (index, address, value) {\n    this.nameTable[index].writeAttrib(address, value);\n  },\n  // Updates the internally buffered sprite\n  // data with this new byte of info.\n  spriteRamWriteUpdate: function (address, value) {\n    var tIndex = Math.floor(address / 4);\n    if (tIndex === 0) {\n      //updateSpr0Hit();\n      this.checkSprite0(this.scanline - 20);\n    }\n    if (address % 4 === 0) {\n      // Y coordinate\n      this.sprY[tIndex] = value;\n    } else if (address % 4 === 1) {\n      // Tile index\n      this.sprTile[tIndex] = value;\n    } else if (address % 4 === 2) {\n      // Attributes\n      this.vertFlip[tIndex] = (value & 0x80) !== 0;\n      this.horiFlip[tIndex] = (value & 0x40) !== 0;\n      this.bgPriority[tIndex] = (value & 0x20) !== 0;\n      this.sprCol[tIndex] = (value & 3) << 2;\n    } else if (address % 4 === 3) {\n      // X coordinate\n      this.sprX[tIndex] = value;\n    }\n  },\n  doNMI: function () {\n    // Set VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, true);\n    //nes.getCpu().doNonMaskableInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n  },\n  isPixelWhite: function (x, y) {\n    this.triggerRendering();\n    return this.nes.ppu.buffer[(y << 8) + x] === 0xffffff;\n  },\n  JSON_PROPERTIES: [\n  // Memory\n  \"vramMem\", \"spriteMem\",\n  // Counters\n  \"cntFV\", \"cntV\", \"cntH\", \"cntVT\", \"cntHT\",\n  // Registers\n  \"regFV\", \"regV\", \"regH\", \"regVT\", \"regHT\", \"regFH\", \"regS\",\n  // VRAM addr\n  \"vramAddress\", \"vramTmpAddress\",\n  // Control/Status registers\n  \"f_nmiOnVblank\", \"f_spriteSize\", \"f_bgPatternTable\", \"f_spPatternTable\", \"f_addrInc\", \"f_nTblAddress\", \"f_color\", \"f_spVisibility\", \"f_bgVisibility\", \"f_spClipping\", \"f_bgClipping\", \"f_dispType\",\n  // VRAM I/O\n  \"vramBufferedReadValue\", \"firstWrite\",\n  // Mirroring\n  \"currentMirroring\", \"vramMirrorTable\", \"ntable1\",\n  // SPR-RAM I/O\n  \"sramAddress\",\n  // Sprites. Most sprite data is rebuilt from spriteMem\n  \"hitSpr0\",\n  // Palettes\n  \"sprPalette\", \"imgPalette\",\n  // Rendering progression\n  \"curX\", \"scanline\", \"lastRenderedScanline\", \"curNt\", \"scantile\",\n  // Used during rendering\n  \"attrib\", \"buffer\", \"bgbuffer\", \"pixrendered\",\n  // Misc\n  \"requestEndFrame\", \"nmiOk\", \"dummyCycleToggle\", \"nmiCounter\", \"validTileData\", \"scanlineAlreadyRendered\"],\n  toJSON: function () {\n    var i;\n    var state = utils.toJSON(this);\n    state.nameTable = [];\n    for (i = 0; i < this.nameTable.length; i++) {\n      state.nameTable[i] = this.nameTable[i].toJSON();\n    }\n    state.ptTile = [];\n    for (i = 0; i < this.ptTile.length; i++) {\n      state.ptTile[i] = this.ptTile[i].toJSON();\n    }\n    return state;\n  },\n  fromJSON: function (state) {\n    var i;\n    utils.fromJSON(this, state);\n    for (i = 0; i < this.nameTable.length; i++) {\n      this.nameTable[i].fromJSON(state.nameTable[i]);\n    }\n    for (i = 0; i < this.ptTile.length; i++) {\n      this.ptTile[i].fromJSON(state.ptTile[i]);\n    }\n\n    // Sprite data:\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteRamWriteUpdate(i, this.spriteMem[i]);\n    }\n  }\n};\nvar NameTable = function (width, height, name) {\n  this.width = width;\n  this.height = height;\n  this.name = name;\n  this.tile = new Array(width * height);\n  this.attrib = new Array(width * height);\n  for (var i = 0; i < width * height; i++) {\n    this.tile[i] = 0;\n    this.attrib[i] = 0;\n  }\n};\nNameTable.prototype = {\n  getTileIndex: function (x, y) {\n    return this.tile[y * this.width + x];\n  },\n  getAttrib: function (x, y) {\n    return this.attrib[y * this.width + x];\n  },\n  writeAttrib: function (index, value) {\n    var basex = index % 8 * 4;\n    var basey = Math.floor(index / 8) * 4;\n    var add;\n    var tx, ty;\n    var attindex;\n    for (var sqy = 0; sqy < 2; sqy++) {\n      for (var sqx = 0; sqx < 2; sqx++) {\n        add = value >> 2 * (sqy * 2 + sqx) & 3;\n        for (var y = 0; y < 2; y++) {\n          for (var x = 0; x < 2; x++) {\n            tx = basex + sqx * 2 + x;\n            ty = basey + sqy * 2 + y;\n            attindex = ty * this.width + tx;\n            this.attrib[attindex] = add << 2 & 12;\n          }\n        }\n      }\n    }\n  },\n  toJSON: function () {\n    return {\n      tile: this.tile,\n      attrib: this.attrib\n    };\n  },\n  fromJSON: function (s) {\n    this.tile = s.tile;\n    this.attrib = s.attrib;\n  }\n};\nvar PaletteTable = function () {\n  this.curTable = new Array(64);\n  this.emphTable = new Array(8);\n  this.currentEmph = -1;\n};\nPaletteTable.prototype = {\n  reset: function () {\n    this.setEmphasis(0);\n  },\n  loadNTSCPalette: function () {\n    // prettier-ignore\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n  loadPALPalette: function () {\n    // prettier-ignore\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n  makeTables: function () {\n    var r, g, b, col, i, rFactor, gFactor, bFactor;\n\n    // Calculate a table for each possible emphasis setting:\n    for (var emph = 0; emph < 8; emph++) {\n      // Determine color component factors:\n      rFactor = 1.0;\n      gFactor = 1.0;\n      bFactor = 1.0;\n      if ((emph & 1) !== 0) {\n        rFactor = 0.75;\n        bFactor = 0.75;\n      }\n      if ((emph & 2) !== 0) {\n        rFactor = 0.75;\n        gFactor = 0.75;\n      }\n      if ((emph & 4) !== 0) {\n        gFactor = 0.75;\n        bFactor = 0.75;\n      }\n      this.emphTable[emph] = new Array(64);\n\n      // Calculate table:\n      for (i = 0; i < 64; i++) {\n        col = this.curTable[i];\n        r = Math.floor(this.getRed(col) * rFactor);\n        g = Math.floor(this.getGreen(col) * gFactor);\n        b = Math.floor(this.getBlue(col) * bFactor);\n        this.emphTable[emph][i] = this.getRgb(r, g, b);\n      }\n    }\n  },\n  setEmphasis: function (emph) {\n    if (emph !== this.currentEmph) {\n      this.currentEmph = emph;\n      for (var i = 0; i < 64; i++) {\n        this.curTable[i] = this.emphTable[emph][i];\n      }\n    }\n  },\n  getEntry: function (yiq) {\n    return this.curTable[yiq];\n  },\n  getRed: function (rgb) {\n    return rgb >> 16 & 0xff;\n  },\n  getGreen: function (rgb) {\n    return rgb >> 8 & 0xff;\n  },\n  getBlue: function (rgb) {\n    return rgb & 0xff;\n  },\n  getRgb: function (r, g, b) {\n    return r << 16 | g << 8 | b;\n  },\n  loadDefaultPalette: function () {\n    this.curTable[0] = this.getRgb(117, 117, 117);\n    this.curTable[1] = this.getRgb(39, 27, 143);\n    this.curTable[2] = this.getRgb(0, 0, 171);\n    this.curTable[3] = this.getRgb(71, 0, 159);\n    this.curTable[4] = this.getRgb(143, 0, 119);\n    this.curTable[5] = this.getRgb(171, 0, 19);\n    this.curTable[6] = this.getRgb(167, 0, 0);\n    this.curTable[7] = this.getRgb(127, 11, 0);\n    this.curTable[8] = this.getRgb(67, 47, 0);\n    this.curTable[9] = this.getRgb(0, 71, 0);\n    this.curTable[10] = this.getRgb(0, 81, 0);\n    this.curTable[11] = this.getRgb(0, 63, 23);\n    this.curTable[12] = this.getRgb(27, 63, 95);\n    this.curTable[13] = this.getRgb(0, 0, 0);\n    this.curTable[14] = this.getRgb(0, 0, 0);\n    this.curTable[15] = this.getRgb(0, 0, 0);\n    this.curTable[16] = this.getRgb(188, 188, 188);\n    this.curTable[17] = this.getRgb(0, 115, 239);\n    this.curTable[18] = this.getRgb(35, 59, 239);\n    this.curTable[19] = this.getRgb(131, 0, 243);\n    this.curTable[20] = this.getRgb(191, 0, 191);\n    this.curTable[21] = this.getRgb(231, 0, 91);\n    this.curTable[22] = this.getRgb(219, 43, 0);\n    this.curTable[23] = this.getRgb(203, 79, 15);\n    this.curTable[24] = this.getRgb(139, 115, 0);\n    this.curTable[25] = this.getRgb(0, 151, 0);\n    this.curTable[26] = this.getRgb(0, 171, 0);\n    this.curTable[27] = this.getRgb(0, 147, 59);\n    this.curTable[28] = this.getRgb(0, 131, 139);\n    this.curTable[29] = this.getRgb(0, 0, 0);\n    this.curTable[30] = this.getRgb(0, 0, 0);\n    this.curTable[31] = this.getRgb(0, 0, 0);\n    this.curTable[32] = this.getRgb(255, 255, 255);\n    this.curTable[33] = this.getRgb(63, 191, 255);\n    this.curTable[34] = this.getRgb(95, 151, 255);\n    this.curTable[35] = this.getRgb(167, 139, 253);\n    this.curTable[36] = this.getRgb(247, 123, 255);\n    this.curTable[37] = this.getRgb(255, 119, 183);\n    this.curTable[38] = this.getRgb(255, 119, 99);\n    this.curTable[39] = this.getRgb(255, 155, 59);\n    this.curTable[40] = this.getRgb(243, 191, 63);\n    this.curTable[41] = this.getRgb(131, 211, 19);\n    this.curTable[42] = this.getRgb(79, 223, 75);\n    this.curTable[43] = this.getRgb(88, 248, 152);\n    this.curTable[44] = this.getRgb(0, 235, 219);\n    this.curTable[45] = this.getRgb(0, 0, 0);\n    this.curTable[46] = this.getRgb(0, 0, 0);\n    this.curTable[47] = this.getRgb(0, 0, 0);\n    this.curTable[48] = this.getRgb(255, 255, 255);\n    this.curTable[49] = this.getRgb(171, 231, 255);\n    this.curTable[50] = this.getRgb(199, 215, 255);\n    this.curTable[51] = this.getRgb(215, 203, 255);\n    this.curTable[52] = this.getRgb(255, 199, 255);\n    this.curTable[53] = this.getRgb(255, 199, 219);\n    this.curTable[54] = this.getRgb(255, 191, 179);\n    this.curTable[55] = this.getRgb(255, 219, 171);\n    this.curTable[56] = this.getRgb(255, 231, 163);\n    this.curTable[57] = this.getRgb(227, 255, 163);\n    this.curTable[58] = this.getRgb(171, 243, 191);\n    this.curTable[59] = this.getRgb(179, 255, 207);\n    this.curTable[60] = this.getRgb(159, 255, 243);\n    this.curTable[61] = this.getRgb(0, 0, 0);\n    this.curTable[62] = this.getRgb(0, 0, 0);\n    this.curTable[63] = this.getRgb(0, 0, 0);\n    this.makeTables();\n    this.setEmphasis(0);\n  }\n};\nmodule.exports = PPU;","map":{"version":3,"names":["Tile","require","utils","PPU","nes","vramMem","spriteMem","vramAddress","vramTmpAddress","vramBufferedReadValue","firstWrite","sramAddress","currentMirroring","requestEndFrame","nmiOk","dummyCycleToggle","validTileData","nmiCounter","scanlineAlreadyRendered","f_nmiOnVblank","f_spriteSize","f_bgPatternTable","f_spPatternTable","f_addrInc","f_nTblAddress","f_color","f_spVisibility","f_bgVisibility","f_spClipping","f_bgClipping","f_dispType","cntFV","cntV","cntH","cntVT","cntHT","regFV","regV","regH","regVT","regHT","regFH","regS","curNt","attrib","buffer","bgbuffer","pixrendered","scantile","scanline","lastRenderedScanline","curX","sprX","sprY","sprTile","sprCol","vertFlip","horiFlip","bgPriority","spr0HitX","spr0HitY","hitSpr0","sprPalette","imgPalette","ptTile","ntable1","nameTable","vramMirrorTable","palTable","showSpr0Hit","clipToTvSize","reset","prototype","STATUS_VRAMWRITE","STATUS_SLSPRITECOUNT","STATUS_SPRITE0HIT","STATUS_VBLANK","i","Array","length","NameTable","PaletteTable","loadNTSCPalette","updateControlReg1","updateControlReg2","setMirroring","mirroring","triggerRendering","defineMirrorRegion","rom","HORIZONTAL_MIRRORING","VERTICAL_MIRRORING","SINGLESCREEN_MIRRORING","SINGLESCREEN_MIRRORING2","fromStart","toStart","size","startVBlank","cpu","requestIrq","IRQ_NMI","renderFramePartially","endFrame","endScanline","setStatusFlag","renderBgScanline","checkSprite0","mmap","clockIrqCounter","regsToAddress","cntsToAddress","startFrame","bgColor","x","y","ui","writeFrame","value","setEmphasis","updatePalettes","flag","n","mem","readStatusRegister","tmp","writeSRAMAddress","address","sramLoad","sramWrite","spriteRamWriteUpdate","scrollWrite","writeVRAMAddress","latchAccess","vramLoad","mirroredLoad","cntsFromAddress","regsFromAddress","vramWrite","mirroredWrite","writeMem","sramDMA","baseAddress","data","haltCycles","b1","b2","incTileCounter","count","Error","toString","startScan","scanCount","renderSpritesPartially","si","ei","destIndex","scan","baseTile","tscanoffset","targetBuffer","t","tpix","att","col","tile","pix","getTileIndex","getAttrib","sx","opaque","startscan","scancount","bgPri","srcy1","srcy2","render","top","toffset","tIndexAdd","bufferIndex","patternWrite","nameTableWrite","attribTableWrite","getEntry","tileIndex","Math","floor","leftOver","setScanline","index","writeAttrib","tIndex","doNMI","isPixelWhite","ppu","JSON_PROPERTIES","toJSON","state","fromJSON","width","height","name","basex","basey","add","tx","ty","attindex","sqy","sqx","s","curTable","emphTable","currentEmph","makeTables","loadPALPalette","r","g","b","rFactor","gFactor","bFactor","emph","getRed","getGreen","getBlue","getRgb","yiq","rgb","loadDefaultPalette","module","exports"],"sources":["/Users/zakariaalmardaee/csfolder/vintage-game-emulator/frontend/node_modules/jsnes/src/ppu.js"],"sourcesContent":["var Tile = require(\"./tile\");\nvar utils = require(\"./utils\");\n\nvar PPU = function (nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.vramMem = null;\n  this.spriteMem = null;\n  this.vramAddress = null;\n  this.vramTmpAddress = null;\n  this.vramBufferedReadValue = null;\n  this.firstWrite = null;\n  this.sramAddress = null;\n  this.currentMirroring = null;\n  this.requestEndFrame = null;\n  this.nmiOk = null;\n  this.dummyCycleToggle = null;\n  this.validTileData = null;\n  this.nmiCounter = null;\n  this.scanlineAlreadyRendered = null;\n  this.f_nmiOnVblank = null;\n  this.f_spriteSize = null;\n  this.f_bgPatternTable = null;\n  this.f_spPatternTable = null;\n  this.f_addrInc = null;\n  this.f_nTblAddress = null;\n  this.f_color = null;\n  this.f_spVisibility = null;\n  this.f_bgVisibility = null;\n  this.f_spClipping = null;\n  this.f_bgClipping = null;\n  this.f_dispType = null;\n  this.cntFV = null;\n  this.cntV = null;\n  this.cntH = null;\n  this.cntVT = null;\n  this.cntHT = null;\n  this.regFV = null;\n  this.regV = null;\n  this.regH = null;\n  this.regVT = null;\n  this.regHT = null;\n  this.regFH = null;\n  this.regS = null;\n  this.curNt = null;\n  this.attrib = null;\n  this.buffer = null;\n  this.bgbuffer = null;\n  this.pixrendered = null;\n\n  this.validTileData = null;\n  this.scantile = null;\n  this.scanline = null;\n  this.lastRenderedScanline = null;\n  this.curX = null;\n  this.sprX = null;\n  this.sprY = null;\n  this.sprTile = null;\n  this.sprCol = null;\n  this.vertFlip = null;\n  this.horiFlip = null;\n  this.bgPriority = null;\n  this.spr0HitX = null;\n  this.spr0HitY = null;\n  this.hitSpr0 = null;\n  this.sprPalette = null;\n  this.imgPalette = null;\n  this.ptTile = null;\n  this.ntable1 = null;\n  this.currentMirroring = null;\n  this.nameTable = null;\n  this.vramMirrorTable = null;\n  this.palTable = null;\n\n  // Rendering Options:\n  this.showSpr0Hit = false;\n  this.clipToTvSize = true;\n\n  this.reset();\n};\n\nPPU.prototype = {\n  // Status flags:\n  STATUS_VRAMWRITE: 4,\n  STATUS_SLSPRITECOUNT: 5,\n  STATUS_SPRITE0HIT: 6,\n  STATUS_VBLANK: 7,\n\n  reset: function () {\n    var i;\n\n    // Memory\n    this.vramMem = new Array(0x8000);\n    this.spriteMem = new Array(0x100);\n    for (i = 0; i < this.vramMem.length; i++) {\n      this.vramMem[i] = 0;\n    }\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteMem[i] = 0;\n    }\n\n    // VRAM I/O:\n    this.vramAddress = null;\n    this.vramTmpAddress = null;\n    this.vramBufferedReadValue = 0;\n    this.firstWrite = true; // VRAM/Scroll Hi/Lo latch\n\n    // SPR-RAM I/O:\n    this.sramAddress = 0; // 8-bit only.\n\n    this.currentMirroring = -1;\n    this.requestEndFrame = false;\n    this.nmiOk = false;\n    this.dummyCycleToggle = false;\n    this.validTileData = false;\n    this.nmiCounter = 0;\n    this.scanlineAlreadyRendered = null;\n\n    // Control Flags Register 1:\n    this.f_nmiOnVblank = 0; // NMI on VBlank. 0=disable, 1=enable\n    this.f_spriteSize = 0; // Sprite size. 0=8x8, 1=8x16\n    this.f_bgPatternTable = 0; // Background Pattern Table address. 0=0x0000,1=0x1000\n    this.f_spPatternTable = 0; // Sprite Pattern Table address. 0=0x0000,1=0x1000\n    this.f_addrInc = 0; // PPU Address Increment. 0=1,1=32\n    this.f_nTblAddress = 0; // Name Table Address. 0=0x2000,1=0x2400,2=0x2800,3=0x2C00\n\n    // Control Flags Register 2:\n    this.f_color = 0; // Background color. 0=black, 1=blue, 2=green, 4=red\n    this.f_spVisibility = 0; // Sprite visibility. 0=not displayed,1=displayed\n    this.f_bgVisibility = 0; // Background visibility. 0=Not Displayed,1=displayed\n    this.f_spClipping = 0; // Sprite clipping. 0=Sprites invisible in left 8-pixel column,1=No clipping\n    this.f_bgClipping = 0; // Background clipping. 0=BG invisible in left 8-pixel column, 1=No clipping\n    this.f_dispType = 0; // Display type. 0=color, 1=monochrome\n\n    // Counters:\n    this.cntFV = 0;\n    this.cntV = 0;\n    this.cntH = 0;\n    this.cntVT = 0;\n    this.cntHT = 0;\n\n    // Registers:\n    this.regFV = 0;\n    this.regV = 0;\n    this.regH = 0;\n    this.regVT = 0;\n    this.regHT = 0;\n    this.regFH = 0;\n    this.regS = 0;\n\n    // These are temporary variables used in rendering and sound procedures.\n    // Their states outside of those procedures can be ignored.\n    // TODO: the use of this is a bit weird, investigate\n    this.curNt = null;\n\n    // Variables used when rendering:\n    this.attrib = new Array(32);\n    this.buffer = new Array(256 * 240);\n    this.bgbuffer = new Array(256 * 240);\n    this.pixrendered = new Array(256 * 240);\n\n    this.validTileData = null;\n\n    this.scantile = new Array(32);\n\n    // Initialize misc vars:\n    this.scanline = 0;\n    this.lastRenderedScanline = -1;\n    this.curX = 0;\n\n    // Sprite data:\n    this.sprX = new Array(64); // X coordinate\n    this.sprY = new Array(64); // Y coordinate\n    this.sprTile = new Array(64); // Tile Index (into pattern table)\n    this.sprCol = new Array(64); // Upper two bits of color\n    this.vertFlip = new Array(64); // Vertical Flip\n    this.horiFlip = new Array(64); // Horizontal Flip\n    this.bgPriority = new Array(64); // Background priority\n    this.spr0HitX = 0; // Sprite #0 hit X coordinate\n    this.spr0HitY = 0; // Sprite #0 hit Y coordinate\n    this.hitSpr0 = false;\n\n    // Palette data:\n    this.sprPalette = new Array(16);\n    this.imgPalette = new Array(16);\n\n    // Create pattern table tile buffers:\n    this.ptTile = new Array(512);\n    for (i = 0; i < 512; i++) {\n      this.ptTile[i] = new Tile();\n    }\n\n    // Create nametable buffers:\n    // Name table data:\n    this.ntable1 = new Array(4);\n    this.currentMirroring = -1;\n    this.nameTable = new Array(4);\n    for (i = 0; i < 4; i++) {\n      this.nameTable[i] = new NameTable(32, 32, \"Nt\" + i);\n    }\n\n    // Initialize mirroring lookup table:\n    this.vramMirrorTable = new Array(0x8000);\n    for (i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    this.palTable = new PaletteTable();\n    this.palTable.loadNTSCPalette();\n    //this.palTable.loadDefaultPalette();\n\n    this.updateControlReg1(0);\n    this.updateControlReg2(0);\n  },\n\n  // Sets Nametable mirroring.\n  setMirroring: function (mirroring) {\n    if (mirroring === this.currentMirroring) {\n      return;\n    }\n\n    this.currentMirroring = mirroring;\n    this.triggerRendering();\n\n    // Remove mirroring:\n    if (this.vramMirrorTable === null) {\n      this.vramMirrorTable = new Array(0x8000);\n    }\n    for (var i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    // Palette mirroring:\n    this.defineMirrorRegion(0x3f20, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f40, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f80, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3fc0, 0x3f00, 0x20);\n\n    // Additional mirroring:\n    this.defineMirrorRegion(0x3000, 0x2000, 0xf00);\n    this.defineMirrorRegion(0x4000, 0x0000, 0x4000);\n\n    if (mirroring === this.nes.rom.HORIZONTAL_MIRRORING) {\n      // Horizontal mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2800, 0x400);\n    } else if (mirroring === this.nes.rom.VERTICAL_MIRRORING) {\n      // Vertical mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING) {\n      // Single Screen mirroring\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 0;\n\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2000, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING2) {\n      this.ntable1[0] = 1;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2400, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else {\n      // Assume Four-screen mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 2;\n      this.ntable1[3] = 3;\n    }\n  },\n\n  // Define a mirrored area in the address lookup table.\n  // Assumes the regions don't overlap.\n  // The 'to' region is the region that is physically in memory.\n  defineMirrorRegion: function (fromStart, toStart, size) {\n    for (var i = 0; i < size; i++) {\n      this.vramMirrorTable[fromStart + i] = toStart + i;\n    }\n  },\n\n  startVBlank: function () {\n    // Do NMI:\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n\n    // Make sure everything is rendered:\n    if (this.lastRenderedScanline < 239) {\n      this.renderFramePartially(\n        this.lastRenderedScanline + 1,\n        240 - this.lastRenderedScanline\n      );\n    }\n\n    // End frame:\n    this.endFrame();\n\n    // Reset scanline counter:\n    this.lastRenderedScanline = -1;\n  },\n\n  endScanline: function () {\n    switch (this.scanline) {\n      case 19:\n        // Dummy scanline.\n        // May be variable length:\n        if (this.dummyCycleToggle) {\n          // Remove dead cycle at end of scanline,\n          // for next scanline:\n          this.curX = 1;\n          this.dummyCycleToggle = !this.dummyCycleToggle;\n        }\n        break;\n\n      case 20:\n        // Clear VBlank flag:\n        this.setStatusFlag(this.STATUS_VBLANK, false);\n\n        // Clear Sprite #0 hit flag:\n        this.setStatusFlag(this.STATUS_SPRITE0HIT, false);\n        this.hitSpr0 = false;\n        this.spr0HitX = -1;\n        this.spr0HitY = -1;\n\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Update counters:\n          this.cntFV = this.regFV;\n          this.cntV = this.regV;\n          this.cntH = this.regH;\n          this.cntVT = this.regVT;\n          this.cntHT = this.regHT;\n\n          if (this.f_bgVisibility === 1) {\n            // Render dummy scanline:\n            this.renderBgScanline(false, 0);\n          }\n        }\n\n        if (this.f_bgVisibility === 1 && this.f_spVisibility === 1) {\n          // Check sprite 0 hit for first scanline:\n          this.checkSprite0(0);\n        }\n\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Clock mapper IRQ Counter:\n          this.nes.mmap.clockIrqCounter();\n        }\n        break;\n\n      case 261:\n        // Dead scanline, no rendering.\n        // Set VINT:\n        this.setStatusFlag(this.STATUS_VBLANK, true);\n        this.requestEndFrame = true;\n        this.nmiCounter = 9;\n\n        // Wrap around:\n        this.scanline = -1; // will be incremented to 0\n\n        break;\n\n      default:\n        if (this.scanline >= 21 && this.scanline <= 260) {\n          // Render normally:\n          if (this.f_bgVisibility === 1) {\n            if (!this.scanlineAlreadyRendered) {\n              // update scroll:\n              this.cntHT = this.regHT;\n              this.cntH = this.regH;\n              this.renderBgScanline(true, this.scanline + 1 - 21);\n            }\n            this.scanlineAlreadyRendered = false;\n\n            // Check for sprite 0 (next scanline):\n            if (!this.hitSpr0 && this.f_spVisibility === 1) {\n              if (\n                this.sprX[0] >= -7 &&\n                this.sprX[0] < 256 &&\n                this.sprY[0] + 1 <= this.scanline - 20 &&\n                this.sprY[0] + 1 + (this.f_spriteSize === 0 ? 8 : 16) >=\n                  this.scanline - 20\n              ) {\n                if (this.checkSprite0(this.scanline - 20)) {\n                  this.hitSpr0 = true;\n                }\n              }\n            }\n          }\n\n          if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n            // Clock mapper IRQ Counter:\n            this.nes.mmap.clockIrqCounter();\n          }\n        }\n    }\n\n    this.scanline++;\n    this.regsToAddress();\n    this.cntsToAddress();\n  },\n\n  startFrame: function () {\n    // Set background color:\n    var bgColor = 0;\n\n    if (this.f_dispType === 0) {\n      // Color display.\n      // f_color determines color emphasis.\n      // Use first entry of image palette as BG color.\n      bgColor = this.imgPalette[0];\n    } else {\n      // Monochrome display.\n      // f_color determines the bg color.\n      switch (this.f_color) {\n        case 0:\n          // Black\n          bgColor = 0x00000;\n          break;\n        case 1:\n          // Green\n          bgColor = 0x00ff00;\n          break;\n        case 2:\n          // Blue\n          bgColor = 0xff0000;\n          break;\n        case 3:\n          // Invalid. Use black.\n          bgColor = 0x000000;\n          break;\n        case 4:\n          // Red\n          bgColor = 0x0000ff;\n          break;\n        default:\n          // Invalid. Use black.\n          bgColor = 0x0;\n      }\n    }\n\n    var buffer = this.buffer;\n    var i;\n    for (i = 0; i < 256 * 240; i++) {\n      buffer[i] = bgColor;\n    }\n    var pixrendered = this.pixrendered;\n    for (i = 0; i < pixrendered.length; i++) {\n      pixrendered[i] = 65;\n    }\n  },\n\n  endFrame: function () {\n    var i, x, y;\n    var buffer = this.buffer;\n\n    // Draw spr#0 hit coordinates:\n    if (this.showSpr0Hit) {\n      // Spr 0 position:\n      if (\n        this.sprX[0] >= 0 &&\n        this.sprX[0] < 256 &&\n        this.sprY[0] >= 0 &&\n        this.sprY[0] < 240\n      ) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.sprY[0] << 8) + i] = 0xff5555;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.sprX[0]] = 0xff5555;\n        }\n      }\n      // Hit position:\n      if (\n        this.spr0HitX >= 0 &&\n        this.spr0HitX < 256 &&\n        this.spr0HitY >= 0 &&\n        this.spr0HitY < 240\n      ) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.spr0HitY << 8) + i] = 0x55ff55;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.spr0HitX] = 0x55ff55;\n        }\n      }\n    }\n\n    // This is a bit lazy..\n    // if either the sprites or the background should be clipped,\n    // both are clipped after rendering is finished.\n    if (\n      this.clipToTvSize ||\n      this.f_bgClipping === 0 ||\n      this.f_spClipping === 0\n    ) {\n      // Clip left 8-pixels column:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + x] = 0;\n        }\n      }\n    }\n\n    if (this.clipToTvSize) {\n      // Clip right 8-pixels column too:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + 255 - x] = 0;\n        }\n      }\n    }\n\n    // Clip top and bottom 8 pixels:\n    if (this.clipToTvSize) {\n      for (y = 0; y < 8; y++) {\n        for (x = 0; x < 256; x++) {\n          buffer[(y << 8) + x] = 0;\n          buffer[((239 - y) << 8) + x] = 0;\n        }\n      }\n    }\n\n    this.nes.ui.writeFrame(buffer);\n  },\n\n  updateControlReg1: function (value) {\n    this.triggerRendering();\n\n    this.f_nmiOnVblank = (value >> 7) & 1;\n    this.f_spriteSize = (value >> 5) & 1;\n    this.f_bgPatternTable = (value >> 4) & 1;\n    this.f_spPatternTable = (value >> 3) & 1;\n    this.f_addrInc = (value >> 2) & 1;\n    this.f_nTblAddress = value & 3;\n\n    this.regV = (value >> 1) & 1;\n    this.regH = value & 1;\n    this.regS = (value >> 4) & 1;\n  },\n\n  updateControlReg2: function (value) {\n    this.triggerRendering();\n\n    this.f_color = (value >> 5) & 7;\n    this.f_spVisibility = (value >> 4) & 1;\n    this.f_bgVisibility = (value >> 3) & 1;\n    this.f_spClipping = (value >> 2) & 1;\n    this.f_bgClipping = (value >> 1) & 1;\n    this.f_dispType = value & 1;\n\n    if (this.f_dispType === 0) {\n      this.palTable.setEmphasis(this.f_color);\n    }\n    this.updatePalettes();\n  },\n\n  setStatusFlag: function (flag, value) {\n    var n = 1 << flag;\n    this.nes.cpu.mem[0x2002] =\n      (this.nes.cpu.mem[0x2002] & (255 - n)) | (value ? n : 0);\n  },\n\n  // CPU Register $2002:\n  // Read the Status Register.\n  readStatusRegister: function () {\n    var tmp = this.nes.cpu.mem[0x2002];\n\n    // Reset scroll & VRAM Address toggle:\n    this.firstWrite = true;\n\n    // Clear VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, false);\n\n    // Fetch status data:\n    return tmp;\n  },\n\n  // CPU Register $2003:\n  // Write the SPR-RAM address that is used for sramWrite (Register 0x2004 in CPU memory map)\n  writeSRAMAddress: function (address) {\n    this.sramAddress = address;\n  },\n\n  // CPU Register $2004 (R):\n  // Read from SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramLoad: function () {\n    /*short tmp = sprMem.load(sramAddress);\n        sramAddress++; // Increment address\n        sramAddress%=0x100;\n        return tmp;*/\n    return this.spriteMem[this.sramAddress];\n  },\n\n  // CPU Register $2004 (W):\n  // Write to SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramWrite: function (value) {\n    this.spriteMem[this.sramAddress] = value;\n    this.spriteRamWriteUpdate(this.sramAddress, value);\n    this.sramAddress++; // Increment address\n    this.sramAddress %= 0x100;\n  },\n\n  // CPU Register $2005:\n  // Write to scroll registers.\n  // The first write is the vertical offset, the second is the\n  // horizontal offset:\n  scrollWrite: function (value) {\n    this.triggerRendering();\n\n    if (this.firstWrite) {\n      // First write, horizontal scroll:\n      this.regHT = (value >> 3) & 31;\n      this.regFH = value & 7;\n    } else {\n      // Second write, vertical scroll:\n      this.regFV = value & 7;\n      this.regVT = (value >> 3) & 31;\n    }\n    this.firstWrite = !this.firstWrite;\n  },\n\n  // CPU Register $2006:\n  // Sets the adress used when reading/writing from/to VRAM.\n  // The first write sets the high byte, the second the low byte.\n  writeVRAMAddress: function (address) {\n    if (this.firstWrite) {\n      this.regFV = (address >> 4) & 3;\n      this.regV = (address >> 3) & 1;\n      this.regH = (address >> 2) & 1;\n      this.regVT = (this.regVT & 7) | ((address & 3) << 3);\n    } else {\n      this.triggerRendering();\n\n      this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\n      this.regHT = address & 31;\n\n      this.cntFV = this.regFV;\n      this.cntV = this.regV;\n      this.cntH = this.regH;\n      this.cntVT = this.regVT;\n      this.cntHT = this.regHT;\n\n      this.checkSprite0(this.scanline - 20);\n    }\n\n    this.firstWrite = !this.firstWrite;\n\n    // Invoke mapper latch:\n    this.cntsToAddress();\n    if (this.vramAddress < 0x2000) {\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n  },\n\n  // CPU Register $2007(R):\n  // Read from PPU memory. The address should be set first.\n  vramLoad: function () {\n    var tmp;\n\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    // If address is in range 0x0000-0x3EFF, return buffered values:\n    if (this.vramAddress <= 0x3eff) {\n      tmp = this.vramBufferedReadValue;\n\n      // Update buffered value:\n      if (this.vramAddress < 0x2000) {\n        this.vramBufferedReadValue = this.vramMem[this.vramAddress];\n      } else {\n        this.vramBufferedReadValue = this.mirroredLoad(this.vramAddress);\n      }\n\n      // Mapper latch access:\n      if (this.vramAddress < 0x2000) {\n        this.nes.mmap.latchAccess(this.vramAddress);\n      }\n\n      // Increment by either 1 or 32, depending on d2 of Control Register 1:\n      this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n\n      this.cntsFromAddress();\n      this.regsFromAddress();\n\n      return tmp; // Return the previous buffered value.\n    }\n\n    // No buffering in this mem range. Read normally.\n    tmp = this.mirroredLoad(this.vramAddress);\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n\n    this.cntsFromAddress();\n    this.regsFromAddress();\n\n    return tmp;\n  },\n\n  // CPU Register $2007(W):\n  // Write to PPU memory. The address should be set first.\n  vramWrite: function (value) {\n    this.triggerRendering();\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    if (this.vramAddress >= 0x2000) {\n      // Mirroring is used.\n      this.mirroredWrite(this.vramAddress, value);\n    } else {\n      // Write normally.\n      this.writeMem(this.vramAddress, value);\n\n      // Invoke mapper latch:\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n    this.regsFromAddress();\n    this.cntsFromAddress();\n  },\n\n  // CPU Register $4014:\n  // Write 256 bytes of main memory\n  // into Sprite RAM.\n  sramDMA: function (value) {\n    var baseAddress = value * 0x100;\n    var data;\n    for (var i = this.sramAddress; i < 256; i++) {\n      data = this.nes.cpu.mem[baseAddress + i];\n      this.spriteMem[i] = data;\n      this.spriteRamWriteUpdate(i, data);\n    }\n\n    this.nes.cpu.haltCycles(513);\n  },\n\n  // Updates the scroll registers from a new VRAM address.\n  regsFromAddress: function () {\n    var address = (this.vramTmpAddress >> 8) & 0xff;\n    this.regFV = (address >> 4) & 7;\n    this.regV = (address >> 3) & 1;\n    this.regH = (address >> 2) & 1;\n    this.regVT = (this.regVT & 7) | ((address & 3) << 3);\n\n    address = this.vramTmpAddress & 0xff;\n    this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\n    this.regHT = address & 31;\n  },\n\n  // Updates the scroll registers from a new VRAM address.\n  cntsFromAddress: function () {\n    var address = (this.vramAddress >> 8) & 0xff;\n    this.cntFV = (address >> 4) & 3;\n    this.cntV = (address >> 3) & 1;\n    this.cntH = (address >> 2) & 1;\n    this.cntVT = (this.cntVT & 7) | ((address & 3) << 3);\n\n    address = this.vramAddress & 0xff;\n    this.cntVT = (this.cntVT & 24) | ((address >> 5) & 7);\n    this.cntHT = address & 31;\n  },\n\n  regsToAddress: function () {\n    var b1 = (this.regFV & 7) << 4;\n    b1 |= (this.regV & 1) << 3;\n    b1 |= (this.regH & 1) << 2;\n    b1 |= (this.regVT >> 3) & 3;\n\n    var b2 = (this.regVT & 7) << 5;\n    b2 |= this.regHT & 31;\n\n    this.vramTmpAddress = ((b1 << 8) | b2) & 0x7fff;\n  },\n\n  cntsToAddress: function () {\n    var b1 = (this.cntFV & 7) << 4;\n    b1 |= (this.cntV & 1) << 3;\n    b1 |= (this.cntH & 1) << 2;\n    b1 |= (this.cntVT >> 3) & 3;\n\n    var b2 = (this.cntVT & 7) << 5;\n    b2 |= this.cntHT & 31;\n\n    this.vramAddress = ((b1 << 8) | b2) & 0x7fff;\n  },\n\n  incTileCounter: function (count) {\n    for (var i = count; i !== 0; i--) {\n      this.cntHT++;\n      if (this.cntHT === 32) {\n        this.cntHT = 0;\n        this.cntVT++;\n        if (this.cntVT >= 30) {\n          this.cntH++;\n          if (this.cntH === 2) {\n            this.cntH = 0;\n            this.cntV++;\n            if (this.cntV === 2) {\n              this.cntV = 0;\n              this.cntFV++;\n              this.cntFV &= 0x7;\n            }\n          }\n        }\n      }\n    }\n  },\n\n  // Reads from memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredLoad: function (address) {\n    return this.vramMem[this.vramMirrorTable[address]];\n  },\n\n  // Writes to memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredWrite: function (address, value) {\n    if (address >= 0x3f00 && address < 0x3f20) {\n      // Palette write mirroring.\n      if (address === 0x3f00 || address === 0x3f10) {\n        this.writeMem(0x3f00, value);\n        this.writeMem(0x3f10, value);\n      } else if (address === 0x3f04 || address === 0x3f14) {\n        this.writeMem(0x3f04, value);\n        this.writeMem(0x3f14, value);\n      } else if (address === 0x3f08 || address === 0x3f18) {\n        this.writeMem(0x3f08, value);\n        this.writeMem(0x3f18, value);\n      } else if (address === 0x3f0c || address === 0x3f1c) {\n        this.writeMem(0x3f0c, value);\n        this.writeMem(0x3f1c, value);\n      } else {\n        this.writeMem(address, value);\n      }\n    } else {\n      // Use lookup table for mirrored address:\n      if (address < this.vramMirrorTable.length) {\n        this.writeMem(this.vramMirrorTable[address], value);\n      } else {\n        throw new Error(\"Invalid VRAM address: \" + address.toString(16));\n      }\n    }\n  },\n\n  triggerRendering: function () {\n    if (this.scanline >= 21 && this.scanline <= 260) {\n      // Render sprites, and combine:\n      this.renderFramePartially(\n        this.lastRenderedScanline + 1,\n        this.scanline - 21 - this.lastRenderedScanline\n      );\n\n      // Set last rendered scanline:\n      this.lastRenderedScanline = this.scanline - 21;\n    }\n  },\n\n  renderFramePartially: function (startScan, scanCount) {\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, true);\n    }\n\n    if (this.f_bgVisibility === 1) {\n      var si = startScan << 8;\n      var ei = (startScan + scanCount) << 8;\n      if (ei > 0xf000) {\n        ei = 0xf000;\n      }\n      var buffer = this.buffer;\n      var bgbuffer = this.bgbuffer;\n      var pixrendered = this.pixrendered;\n      for (var destIndex = si; destIndex < ei; destIndex++) {\n        if (pixrendered[destIndex] > 0xff) {\n          buffer[destIndex] = bgbuffer[destIndex];\n        }\n      }\n    }\n\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, false);\n    }\n\n    this.validTileData = false;\n  },\n\n  renderBgScanline: function (bgbuffer, scan) {\n    var baseTile = this.regS === 0 ? 0 : 256;\n    var destIndex = (scan << 8) - this.regFH;\n\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n\n    this.cntHT = this.regHT;\n    this.cntH = this.regH;\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n\n    if (scan < 240 && scan - this.cntFV >= 0) {\n      var tscanoffset = this.cntFV << 3;\n      var scantile = this.scantile;\n      var attrib = this.attrib;\n      var ptTile = this.ptTile;\n      var nameTable = this.nameTable;\n      var imgPalette = this.imgPalette;\n      var pixrendered = this.pixrendered;\n      var targetBuffer = bgbuffer ? this.bgbuffer : this.buffer;\n\n      var t, tpix, att, col;\n\n      for (var tile = 0; tile < 32; tile++) {\n        if (scan >= 0) {\n          // Fetch tile & attrib data:\n          if (this.validTileData) {\n            // Get data from array:\n            t = scantile[tile];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = attrib[tile];\n          } else {\n            // Fetch data:\n            t =\n              ptTile[\n                baseTile +\n                  nameTable[this.curNt].getTileIndex(this.cntHT, this.cntVT)\n              ];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = nameTable[this.curNt].getAttrib(this.cntHT, this.cntVT);\n            scantile[tile] = t;\n            attrib[tile] = att;\n          }\n\n          // Render tile scanline:\n          var sx = 0;\n          var x = (tile << 3) - this.regFH;\n\n          if (x > -8) {\n            if (x < 0) {\n              destIndex -= x;\n              sx = -x;\n            }\n            if (t.opaque[this.cntFV]) {\n              for (; sx < 8; sx++) {\n                targetBuffer[destIndex] =\n                  imgPalette[tpix[tscanoffset + sx] + att];\n                pixrendered[destIndex] |= 256;\n                destIndex++;\n              }\n            } else {\n              for (; sx < 8; sx++) {\n                col = tpix[tscanoffset + sx];\n                if (col !== 0) {\n                  targetBuffer[destIndex] = imgPalette[col + att];\n                  pixrendered[destIndex] |= 256;\n                }\n                destIndex++;\n              }\n            }\n          }\n        }\n\n        // Increase Horizontal Tile Counter:\n        if (++this.cntHT === 32) {\n          this.cntHT = 0;\n          this.cntH++;\n          this.cntH %= 2;\n          this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n        }\n      }\n\n      // Tile data for one row should now have been fetched,\n      // so the data in the array is valid.\n      this.validTileData = true;\n    }\n\n    // update vertical scroll:\n    this.cntFV++;\n    if (this.cntFV === 8) {\n      this.cntFV = 0;\n      this.cntVT++;\n      if (this.cntVT === 30) {\n        this.cntVT = 0;\n        this.cntV++;\n        this.cntV %= 2;\n        this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n      } else if (this.cntVT === 32) {\n        this.cntVT = 0;\n      }\n\n      // Invalidate fetched data:\n      this.validTileData = false;\n    }\n  },\n\n  renderSpritesPartially: function (startscan, scancount, bgPri) {\n    if (this.f_spVisibility === 1) {\n      for (var i = 0; i < 64; i++) {\n        if (\n          this.bgPriority[i] === bgPri &&\n          this.sprX[i] >= 0 &&\n          this.sprX[i] < 256 &&\n          this.sprY[i] + 8 >= startscan &&\n          this.sprY[i] < startscan + scancount\n        ) {\n          // Show sprite.\n          if (this.f_spriteSize === 0) {\n            // 8x8 sprites\n\n            this.srcy1 = 0;\n            this.srcy2 = 8;\n\n            if (this.sprY[i] < startscan) {\n              this.srcy1 = startscan - this.sprY[i] - 1;\n            }\n\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              this.srcy2 = startscan + scancount - this.sprY[i] + 1;\n            }\n\n            if (this.f_spPatternTable === 0) {\n              this.ptTile[this.sprTile[i]].render(\n                this.buffer,\n                0,\n                this.srcy1,\n                8,\n                this.srcy2,\n                this.sprX[i],\n                this.sprY[i] + 1,\n                this.sprCol[i],\n                this.sprPalette,\n                this.horiFlip[i],\n                this.vertFlip[i],\n                i,\n                this.pixrendered\n              );\n            } else {\n              this.ptTile[this.sprTile[i] + 256].render(\n                this.buffer,\n                0,\n                this.srcy1,\n                8,\n                this.srcy2,\n                this.sprX[i],\n                this.sprY[i] + 1,\n                this.sprCol[i],\n                this.sprPalette,\n                this.horiFlip[i],\n                this.vertFlip[i],\n                i,\n                this.pixrendered\n              );\n            }\n          } else {\n            // 8x16 sprites\n            var top = this.sprTile[i];\n            if ((top & 1) !== 0) {\n              top = this.sprTile[i] - 1 + 256;\n            }\n\n            var srcy1 = 0;\n            var srcy2 = 8;\n\n            if (this.sprY[i] < startscan) {\n              srcy1 = startscan - this.sprY[i] - 1;\n            }\n\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              srcy2 = startscan + scancount - this.sprY[i];\n            }\n\n            this.ptTile[top + (this.vertFlip[i] ? 1 : 0)].render(\n              this.buffer,\n              0,\n              srcy1,\n              8,\n              srcy2,\n              this.sprX[i],\n              this.sprY[i] + 1,\n              this.sprCol[i],\n              this.sprPalette,\n              this.horiFlip[i],\n              this.vertFlip[i],\n              i,\n              this.pixrendered\n            );\n\n            srcy1 = 0;\n            srcy2 = 8;\n\n            if (this.sprY[i] + 8 < startscan) {\n              srcy1 = startscan - (this.sprY[i] + 8 + 1);\n            }\n\n            if (this.sprY[i] + 16 > startscan + scancount) {\n              srcy2 = startscan + scancount - (this.sprY[i] + 8);\n            }\n\n            this.ptTile[top + (this.vertFlip[i] ? 0 : 1)].render(\n              this.buffer,\n              0,\n              srcy1,\n              8,\n              srcy2,\n              this.sprX[i],\n              this.sprY[i] + 1 + 8,\n              this.sprCol[i],\n              this.sprPalette,\n              this.horiFlip[i],\n              this.vertFlip[i],\n              i,\n              this.pixrendered\n            );\n          }\n        }\n      }\n    }\n  },\n\n  checkSprite0: function (scan) {\n    this.spr0HitX = -1;\n    this.spr0HitY = -1;\n\n    var toffset;\n    var tIndexAdd = this.f_spPatternTable === 0 ? 0 : 256;\n    var x, y, t, i;\n    var bufferIndex;\n\n    x = this.sprX[0];\n    y = this.sprY[0] + 1;\n\n    if (this.f_spriteSize === 0) {\n      // 8x8 sprites.\n\n      // Check range:\n      if (y <= scan && y + 8 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n        t = this.ptTile[this.sprTile[0] + tIndexAdd];\n\n        if (this.vertFlip[0]) {\n          toffset = 7 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n        toffset *= 8;\n\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    } else {\n      // 8x16 sprites:\n\n      // Check range:\n      if (y <= scan && y + 16 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n\n        if (this.vertFlip[0]) {\n          toffset = 15 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n\n        if (toffset < 8) {\n          // first half of sprite.\n          t = this.ptTile[\n            this.sprTile[0] +\n              (this.vertFlip[0] ? 1 : 0) +\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\n          ];\n        } else {\n          // second half of sprite.\n          t = this.ptTile[\n            this.sprTile[0] +\n              (this.vertFlip[0] ? 0 : 1) +\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\n          ];\n          if (this.vertFlip[0]) {\n            toffset = 15 - toffset;\n          } else {\n            toffset -= 8;\n          }\n        }\n        toffset *= 8;\n\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n\n  // This will write to PPU memory, and\n  // update internally buffered data\n  // appropriately.\n  writeMem: function (address, value) {\n    this.vramMem[address] = value;\n\n    // Update internally buffered data:\n    if (address < 0x2000) {\n      this.vramMem[address] = value;\n      this.patternWrite(address, value);\n    } else if (address >= 0x2000 && address < 0x23c0) {\n      this.nameTableWrite(this.ntable1[0], address - 0x2000, value);\n    } else if (address >= 0x23c0 && address < 0x2400) {\n      this.attribTableWrite(this.ntable1[0], address - 0x23c0, value);\n    } else if (address >= 0x2400 && address < 0x27c0) {\n      this.nameTableWrite(this.ntable1[1], address - 0x2400, value);\n    } else if (address >= 0x27c0 && address < 0x2800) {\n      this.attribTableWrite(this.ntable1[1], address - 0x27c0, value);\n    } else if (address >= 0x2800 && address < 0x2bc0) {\n      this.nameTableWrite(this.ntable1[2], address - 0x2800, value);\n    } else if (address >= 0x2bc0 && address < 0x2c00) {\n      this.attribTableWrite(this.ntable1[2], address - 0x2bc0, value);\n    } else if (address >= 0x2c00 && address < 0x2fc0) {\n      this.nameTableWrite(this.ntable1[3], address - 0x2c00, value);\n    } else if (address >= 0x2fc0 && address < 0x3000) {\n      this.attribTableWrite(this.ntable1[3], address - 0x2fc0, value);\n    } else if (address >= 0x3f00 && address < 0x3f20) {\n      this.updatePalettes();\n    }\n  },\n\n  // Reads data from $3f00 to $f20\n  // into the two buffered palettes.\n  updatePalettes: function () {\n    var i;\n\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.imgPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f00 + i] & 63\n        );\n      } else {\n        this.imgPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f00 + i] & 32\n        );\n      }\n    }\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.sprPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f10 + i] & 63\n        );\n      } else {\n        this.sprPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f10 + i] & 32\n        );\n      }\n    }\n  },\n\n  // Updates the internal pattern\n  // table buffers with this new byte.\n  // In vNES, there is a version of this with 4 arguments which isn't used.\n  patternWrite: function (address, value) {\n    var tileIndex = Math.floor(address / 16);\n    var leftOver = address % 16;\n    if (leftOver < 8) {\n      this.ptTile[tileIndex].setScanline(\n        leftOver,\n        value,\n        this.vramMem[address + 8]\n      );\n    } else {\n      this.ptTile[tileIndex].setScanline(\n        leftOver - 8,\n        this.vramMem[address - 8],\n        value\n      );\n    }\n  },\n\n  // Updates the internal name table buffers\n  // with this new byte.\n  nameTableWrite: function (index, address, value) {\n    this.nameTable[index].tile[address] = value;\n\n    // Update Sprite #0 hit:\n    //updateSpr0Hit();\n    this.checkSprite0(this.scanline - 20);\n  },\n\n  // Updates the internal pattern\n  // table buffers with this new attribute\n  // table byte.\n  attribTableWrite: function (index, address, value) {\n    this.nameTable[index].writeAttrib(address, value);\n  },\n\n  // Updates the internally buffered sprite\n  // data with this new byte of info.\n  spriteRamWriteUpdate: function (address, value) {\n    var tIndex = Math.floor(address / 4);\n\n    if (tIndex === 0) {\n      //updateSpr0Hit();\n      this.checkSprite0(this.scanline - 20);\n    }\n\n    if (address % 4 === 0) {\n      // Y coordinate\n      this.sprY[tIndex] = value;\n    } else if (address % 4 === 1) {\n      // Tile index\n      this.sprTile[tIndex] = value;\n    } else if (address % 4 === 2) {\n      // Attributes\n      this.vertFlip[tIndex] = (value & 0x80) !== 0;\n      this.horiFlip[tIndex] = (value & 0x40) !== 0;\n      this.bgPriority[tIndex] = (value & 0x20) !== 0;\n      this.sprCol[tIndex] = (value & 3) << 2;\n    } else if (address % 4 === 3) {\n      // X coordinate\n      this.sprX[tIndex] = value;\n    }\n  },\n\n  doNMI: function () {\n    // Set VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, true);\n    //nes.getCpu().doNonMaskableInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n  },\n\n  isPixelWhite: function (x, y) {\n    this.triggerRendering();\n    return this.nes.ppu.buffer[(y << 8) + x] === 0xffffff;\n  },\n\n  JSON_PROPERTIES: [\n    // Memory\n    \"vramMem\",\n    \"spriteMem\",\n    // Counters\n    \"cntFV\",\n    \"cntV\",\n    \"cntH\",\n    \"cntVT\",\n    \"cntHT\",\n    // Registers\n    \"regFV\",\n    \"regV\",\n    \"regH\",\n    \"regVT\",\n    \"regHT\",\n    \"regFH\",\n    \"regS\",\n    // VRAM addr\n    \"vramAddress\",\n    \"vramTmpAddress\",\n    // Control/Status registers\n    \"f_nmiOnVblank\",\n    \"f_spriteSize\",\n    \"f_bgPatternTable\",\n    \"f_spPatternTable\",\n    \"f_addrInc\",\n    \"f_nTblAddress\",\n    \"f_color\",\n    \"f_spVisibility\",\n    \"f_bgVisibility\",\n    \"f_spClipping\",\n    \"f_bgClipping\",\n    \"f_dispType\",\n    // VRAM I/O\n    \"vramBufferedReadValue\",\n    \"firstWrite\",\n    // Mirroring\n    \"currentMirroring\",\n    \"vramMirrorTable\",\n    \"ntable1\",\n    // SPR-RAM I/O\n    \"sramAddress\",\n    // Sprites. Most sprite data is rebuilt from spriteMem\n    \"hitSpr0\",\n    // Palettes\n    \"sprPalette\",\n    \"imgPalette\",\n    // Rendering progression\n    \"curX\",\n    \"scanline\",\n    \"lastRenderedScanline\",\n    \"curNt\",\n    \"scantile\",\n    // Used during rendering\n    \"attrib\",\n    \"buffer\",\n    \"bgbuffer\",\n    \"pixrendered\",\n    // Misc\n    \"requestEndFrame\",\n    \"nmiOk\",\n    \"dummyCycleToggle\",\n    \"nmiCounter\",\n    \"validTileData\",\n    \"scanlineAlreadyRendered\",\n  ],\n\n  toJSON: function () {\n    var i;\n    var state = utils.toJSON(this);\n\n    state.nameTable = [];\n    for (i = 0; i < this.nameTable.length; i++) {\n      state.nameTable[i] = this.nameTable[i].toJSON();\n    }\n\n    state.ptTile = [];\n    for (i = 0; i < this.ptTile.length; i++) {\n      state.ptTile[i] = this.ptTile[i].toJSON();\n    }\n\n    return state;\n  },\n\n  fromJSON: function (state) {\n    var i;\n\n    utils.fromJSON(this, state);\n\n    for (i = 0; i < this.nameTable.length; i++) {\n      this.nameTable[i].fromJSON(state.nameTable[i]);\n    }\n\n    for (i = 0; i < this.ptTile.length; i++) {\n      this.ptTile[i].fromJSON(state.ptTile[i]);\n    }\n\n    // Sprite data:\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteRamWriteUpdate(i, this.spriteMem[i]);\n    }\n  },\n};\n\nvar NameTable = function (width, height, name) {\n  this.width = width;\n  this.height = height;\n  this.name = name;\n\n  this.tile = new Array(width * height);\n  this.attrib = new Array(width * height);\n  for (var i = 0; i < width * height; i++) {\n    this.tile[i] = 0;\n    this.attrib[i] = 0;\n  }\n};\n\nNameTable.prototype = {\n  getTileIndex: function (x, y) {\n    return this.tile[y * this.width + x];\n  },\n\n  getAttrib: function (x, y) {\n    return this.attrib[y * this.width + x];\n  },\n\n  writeAttrib: function (index, value) {\n    var basex = (index % 8) * 4;\n    var basey = Math.floor(index / 8) * 4;\n    var add;\n    var tx, ty;\n    var attindex;\n\n    for (var sqy = 0; sqy < 2; sqy++) {\n      for (var sqx = 0; sqx < 2; sqx++) {\n        add = (value >> (2 * (sqy * 2 + sqx))) & 3;\n        for (var y = 0; y < 2; y++) {\n          for (var x = 0; x < 2; x++) {\n            tx = basex + sqx * 2 + x;\n            ty = basey + sqy * 2 + y;\n            attindex = ty * this.width + tx;\n            this.attrib[attindex] = (add << 2) & 12;\n          }\n        }\n      }\n    }\n  },\n\n  toJSON: function () {\n    return {\n      tile: this.tile,\n      attrib: this.attrib,\n    };\n  },\n\n  fromJSON: function (s) {\n    this.tile = s.tile;\n    this.attrib = s.attrib;\n  },\n};\n\nvar PaletteTable = function () {\n  this.curTable = new Array(64);\n  this.emphTable = new Array(8);\n  this.currentEmph = -1;\n};\n\nPaletteTable.prototype = {\n  reset: function () {\n    this.setEmphasis(0);\n  },\n\n  loadNTSCPalette: function () {\n    // prettier-ignore\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n\n  loadPALPalette: function () {\n    // prettier-ignore\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n\n  makeTables: function () {\n    var r, g, b, col, i, rFactor, gFactor, bFactor;\n\n    // Calculate a table for each possible emphasis setting:\n    for (var emph = 0; emph < 8; emph++) {\n      // Determine color component factors:\n      rFactor = 1.0;\n      gFactor = 1.0;\n      bFactor = 1.0;\n\n      if ((emph & 1) !== 0) {\n        rFactor = 0.75;\n        bFactor = 0.75;\n      }\n      if ((emph & 2) !== 0) {\n        rFactor = 0.75;\n        gFactor = 0.75;\n      }\n      if ((emph & 4) !== 0) {\n        gFactor = 0.75;\n        bFactor = 0.75;\n      }\n\n      this.emphTable[emph] = new Array(64);\n\n      // Calculate table:\n      for (i = 0; i < 64; i++) {\n        col = this.curTable[i];\n        r = Math.floor(this.getRed(col) * rFactor);\n        g = Math.floor(this.getGreen(col) * gFactor);\n        b = Math.floor(this.getBlue(col) * bFactor);\n        this.emphTable[emph][i] = this.getRgb(r, g, b);\n      }\n    }\n  },\n\n  setEmphasis: function (emph) {\n    if (emph !== this.currentEmph) {\n      this.currentEmph = emph;\n      for (var i = 0; i < 64; i++) {\n        this.curTable[i] = this.emphTable[emph][i];\n      }\n    }\n  },\n\n  getEntry: function (yiq) {\n    return this.curTable[yiq];\n  },\n\n  getRed: function (rgb) {\n    return (rgb >> 16) & 0xff;\n  },\n\n  getGreen: function (rgb) {\n    return (rgb >> 8) & 0xff;\n  },\n\n  getBlue: function (rgb) {\n    return rgb & 0xff;\n  },\n\n  getRgb: function (r, g, b) {\n    return (r << 16) | (g << 8) | b;\n  },\n\n  loadDefaultPalette: function () {\n    this.curTable[0] = this.getRgb(117, 117, 117);\n    this.curTable[1] = this.getRgb(39, 27, 143);\n    this.curTable[2] = this.getRgb(0, 0, 171);\n    this.curTable[3] = this.getRgb(71, 0, 159);\n    this.curTable[4] = this.getRgb(143, 0, 119);\n    this.curTable[5] = this.getRgb(171, 0, 19);\n    this.curTable[6] = this.getRgb(167, 0, 0);\n    this.curTable[7] = this.getRgb(127, 11, 0);\n    this.curTable[8] = this.getRgb(67, 47, 0);\n    this.curTable[9] = this.getRgb(0, 71, 0);\n    this.curTable[10] = this.getRgb(0, 81, 0);\n    this.curTable[11] = this.getRgb(0, 63, 23);\n    this.curTable[12] = this.getRgb(27, 63, 95);\n    this.curTable[13] = this.getRgb(0, 0, 0);\n    this.curTable[14] = this.getRgb(0, 0, 0);\n    this.curTable[15] = this.getRgb(0, 0, 0);\n    this.curTable[16] = this.getRgb(188, 188, 188);\n    this.curTable[17] = this.getRgb(0, 115, 239);\n    this.curTable[18] = this.getRgb(35, 59, 239);\n    this.curTable[19] = this.getRgb(131, 0, 243);\n    this.curTable[20] = this.getRgb(191, 0, 191);\n    this.curTable[21] = this.getRgb(231, 0, 91);\n    this.curTable[22] = this.getRgb(219, 43, 0);\n    this.curTable[23] = this.getRgb(203, 79, 15);\n    this.curTable[24] = this.getRgb(139, 115, 0);\n    this.curTable[25] = this.getRgb(0, 151, 0);\n    this.curTable[26] = this.getRgb(0, 171, 0);\n    this.curTable[27] = this.getRgb(0, 147, 59);\n    this.curTable[28] = this.getRgb(0, 131, 139);\n    this.curTable[29] = this.getRgb(0, 0, 0);\n    this.curTable[30] = this.getRgb(0, 0, 0);\n    this.curTable[31] = this.getRgb(0, 0, 0);\n    this.curTable[32] = this.getRgb(255, 255, 255);\n    this.curTable[33] = this.getRgb(63, 191, 255);\n    this.curTable[34] = this.getRgb(95, 151, 255);\n    this.curTable[35] = this.getRgb(167, 139, 253);\n    this.curTable[36] = this.getRgb(247, 123, 255);\n    this.curTable[37] = this.getRgb(255, 119, 183);\n    this.curTable[38] = this.getRgb(255, 119, 99);\n    this.curTable[39] = this.getRgb(255, 155, 59);\n    this.curTable[40] = this.getRgb(243, 191, 63);\n    this.curTable[41] = this.getRgb(131, 211, 19);\n    this.curTable[42] = this.getRgb(79, 223, 75);\n    this.curTable[43] = this.getRgb(88, 248, 152);\n    this.curTable[44] = this.getRgb(0, 235, 219);\n    this.curTable[45] = this.getRgb(0, 0, 0);\n    this.curTable[46] = this.getRgb(0, 0, 0);\n    this.curTable[47] = this.getRgb(0, 0, 0);\n    this.curTable[48] = this.getRgb(255, 255, 255);\n    this.curTable[49] = this.getRgb(171, 231, 255);\n    this.curTable[50] = this.getRgb(199, 215, 255);\n    this.curTable[51] = this.getRgb(215, 203, 255);\n    this.curTable[52] = this.getRgb(255, 199, 255);\n    this.curTable[53] = this.getRgb(255, 199, 219);\n    this.curTable[54] = this.getRgb(255, 191, 179);\n    this.curTable[55] = this.getRgb(255, 219, 171);\n    this.curTable[56] = this.getRgb(255, 231, 163);\n    this.curTable[57] = this.getRgb(227, 255, 163);\n    this.curTable[58] = this.getRgb(171, 243, 191);\n    this.curTable[59] = this.getRgb(179, 255, 207);\n    this.curTable[60] = this.getRgb(159, 255, 243);\n    this.curTable[61] = this.getRgb(0, 0, 0);\n    this.curTable[62] = this.getRgb(0, 0, 0);\n    this.curTable[63] = this.getRgb(0, 0, 0);\n\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n};\n\nmodule.exports = PPU;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}