{"ast":null,"code":"var CPU_FREQ_NTSC = 1789772.5; //1789772.72727272d;\n// var CPU_FREQ_PAL = 1773447.4;\n\nvar PAPU = function (nes) {\n  this.nes = nes;\n  this.square1 = new ChannelSquare(this, true);\n  this.square2 = new ChannelSquare(this, false);\n  this.triangle = new ChannelTriangle(this);\n  this.noise = new ChannelNoise(this);\n  this.dmc = new ChannelDM(this);\n  this.frameIrqCounter = null;\n  this.frameIrqCounterMax = 4;\n  this.initCounter = 2048;\n  this.channelEnableValue = null;\n  this.sampleRate = 44100;\n  this.lengthLookup = null;\n  this.dmcFreqLookup = null;\n  this.noiseWavelengthLookup = null;\n  this.square_table = null;\n  this.tnd_table = null;\n  this.frameIrqEnabled = false;\n  this.frameIrqActive = null;\n  this.frameClockNow = null;\n  this.startedPlaying = false;\n  this.recordOutput = false;\n  this.initingHardware = false;\n  this.masterFrameCounter = null;\n  this.derivedFrameCounter = null;\n  this.countSequence = null;\n  this.sampleTimer = null;\n  this.frameTime = null;\n  this.sampleTimerMax = null;\n  this.sampleCount = null;\n  this.triValue = 0;\n  this.smpSquare1 = null;\n  this.smpSquare2 = null;\n  this.smpTriangle = null;\n  this.smpDmc = null;\n  this.accCount = null;\n\n  // DC removal vars:\n  this.prevSampleL = 0;\n  this.prevSampleR = 0;\n  this.smpAccumL = 0;\n  this.smpAccumR = 0;\n\n  // DAC range:\n  this.dacRange = 0;\n  this.dcValue = 0;\n\n  // Master volume:\n  this.masterVolume = 256;\n\n  // Stereo positioning:\n  this.stereoPosLSquare1 = null;\n  this.stereoPosLSquare2 = null;\n  this.stereoPosLTriangle = null;\n  this.stereoPosLNoise = null;\n  this.stereoPosLDMC = null;\n  this.stereoPosRSquare1 = null;\n  this.stereoPosRSquare2 = null;\n  this.stereoPosRTriangle = null;\n  this.stereoPosRNoise = null;\n  this.stereoPosRDMC = null;\n  this.extraCycles = null;\n  this.maxSample = null;\n  this.minSample = null;\n\n  // Panning:\n  this.panning = [80, 170, 100, 150, 128];\n  this.setPanning(this.panning);\n\n  // Initialize lookup tables:\n  this.initLengthLookup();\n  this.initDmcFrequencyLookup();\n  this.initNoiseWavelengthLookup();\n  this.initDACtables();\n\n  // Init sound registers:\n  for (var i = 0; i < 0x14; i++) {\n    if (i === 0x10) {\n      this.writeReg(0x4010, 0x10);\n    } else {\n      this.writeReg(0x4000 + i, 0);\n    }\n  }\n  this.reset();\n};\nPAPU.prototype = {\n  reset: function () {\n    this.sampleRate = this.nes.opts.sampleRate;\n    this.sampleTimerMax = Math.floor(1024.0 * CPU_FREQ_NTSC * this.nes.opts.preferredFrameRate / (this.sampleRate * 60.0));\n    this.frameTime = Math.floor(14915.0 * this.nes.opts.preferredFrameRate / 60.0);\n    this.sampleTimer = 0;\n    this.updateChannelEnable(0);\n    this.masterFrameCounter = 0;\n    this.derivedFrameCounter = 0;\n    this.countSequence = 0;\n    this.sampleCount = 0;\n    this.initCounter = 2048;\n    this.frameIrqEnabled = false;\n    this.initingHardware = false;\n    this.resetCounter();\n    this.square1.reset();\n    this.square2.reset();\n    this.triangle.reset();\n    this.noise.reset();\n    this.dmc.reset();\n    this.accCount = 0;\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n    this.frameIrqEnabled = false;\n    this.frameIrqCounterMax = 4;\n    this.channelEnableValue = 0xff;\n    this.startedPlaying = false;\n    this.prevSampleL = 0;\n    this.prevSampleR = 0;\n    this.smpAccumL = 0;\n    this.smpAccumR = 0;\n    this.maxSample = -500000;\n    this.minSample = 500000;\n  },\n  // eslint-disable-next-line no-unused-vars\n  readReg: function (address) {\n    // Read 0x4015:\n    var tmp = 0;\n    tmp |= this.square1.getLengthStatus();\n    tmp |= this.square2.getLengthStatus() << 1;\n    tmp |= this.triangle.getLengthStatus() << 2;\n    tmp |= this.noise.getLengthStatus() << 3;\n    tmp |= this.dmc.getLengthStatus() << 4;\n    tmp |= (this.frameIrqActive && this.frameIrqEnabled ? 1 : 0) << 6;\n    tmp |= this.dmc.getIrqStatus() << 7;\n    this.frameIrqActive = false;\n    this.dmc.irqGenerated = false;\n    return tmp & 0xffff;\n  },\n  writeReg: function (address, value) {\n    if (address >= 0x4000 && address < 0x4004) {\n      // Square Wave 1 Control\n      this.square1.writeReg(address, value);\n      // console.log(\"Square Write\");\n    } else if (address >= 0x4004 && address < 0x4008) {\n      // Square 2 Control\n      this.square2.writeReg(address, value);\n    } else if (address >= 0x4008 && address < 0x400c) {\n      // Triangle Control\n      this.triangle.writeReg(address, value);\n    } else if (address >= 0x400c && address <= 0x400f) {\n      // Noise Control\n      this.noise.writeReg(address, value);\n    } else if (address === 0x4010) {\n      // DMC Play mode & DMA frequency\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4011) {\n      // DMC Delta Counter\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4012) {\n      // DMC Play code starting address\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4013) {\n      // DMC Play code length\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4015) {\n      // Channel enable\n      this.updateChannelEnable(value);\n      if (value !== 0 && this.initCounter > 0) {\n        // Start hardware initialization\n        this.initingHardware = true;\n      }\n\n      // DMC/IRQ Status\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4017) {\n      // Frame counter control\n      this.countSequence = value >> 7 & 1;\n      this.masterFrameCounter = 0;\n      this.frameIrqActive = false;\n      if ((value >> 6 & 0x1) === 0) {\n        this.frameIrqEnabled = true;\n      } else {\n        this.frameIrqEnabled = false;\n      }\n      if (this.countSequence === 0) {\n        // NTSC:\n        this.frameIrqCounterMax = 4;\n        this.derivedFrameCounter = 4;\n      } else {\n        // PAL:\n        this.frameIrqCounterMax = 5;\n        this.derivedFrameCounter = 0;\n        this.frameCounterTick();\n      }\n    }\n  },\n  resetCounter: function () {\n    if (this.countSequence === 0) {\n      this.derivedFrameCounter = 4;\n    } else {\n      this.derivedFrameCounter = 0;\n    }\n  },\n  // Updates channel enable status.\n  // This is done on writes to the\n  // channel enable register (0x4015),\n  // and when the user enables/disables channels\n  // in the GUI.\n  updateChannelEnable: function (value) {\n    this.channelEnableValue = value & 0xffff;\n    this.square1.setEnabled((value & 1) !== 0);\n    this.square2.setEnabled((value & 2) !== 0);\n    this.triangle.setEnabled((value & 4) !== 0);\n    this.noise.setEnabled((value & 8) !== 0);\n    this.dmc.setEnabled((value & 16) !== 0);\n  },\n  // Clocks the frame counter. It should be clocked at\n  // twice the cpu speed, so the cycles will be\n  // divided by 2 for those counters that are\n  // clocked at cpu speed.\n  clockFrameCounter: function (nCycles) {\n    if (this.initCounter > 0) {\n      if (this.initingHardware) {\n        this.initCounter -= nCycles;\n        if (this.initCounter <= 0) {\n          this.initingHardware = false;\n        }\n        return;\n      }\n    }\n\n    // Don't process ticks beyond next sampling:\n    nCycles += this.extraCycles;\n    var maxCycles = this.sampleTimerMax - this.sampleTimer;\n    if (nCycles << 10 > maxCycles) {\n      this.extraCycles = (nCycles << 10) - maxCycles >> 10;\n      nCycles -= this.extraCycles;\n    } else {\n      this.extraCycles = 0;\n    }\n    var dmc = this.dmc;\n    var triangle = this.triangle;\n    var square1 = this.square1;\n    var square2 = this.square2;\n    var noise = this.noise;\n\n    // Clock DMC:\n    if (dmc.isEnabled) {\n      dmc.shiftCounter -= nCycles << 3;\n      while (dmc.shiftCounter <= 0 && dmc.dmaFrequency > 0) {\n        dmc.shiftCounter += dmc.dmaFrequency;\n        dmc.clockDmc();\n      }\n    }\n\n    // Clock Triangle channel Prog timer:\n    if (triangle.progTimerMax > 0) {\n      triangle.progTimerCount -= nCycles;\n      while (triangle.progTimerCount <= 0) {\n        triangle.progTimerCount += triangle.progTimerMax + 1;\n        if (triangle.linearCounter > 0 && triangle.lengthCounter > 0) {\n          triangle.triangleCounter++;\n          triangle.triangleCounter &= 0x1f;\n          if (triangle.isEnabled) {\n            if (triangle.triangleCounter >= 0x10) {\n              // Normal value.\n              triangle.sampleValue = triangle.triangleCounter & 0xf;\n            } else {\n              // Inverted value.\n              triangle.sampleValue = 0xf - (triangle.triangleCounter & 0xf);\n            }\n            triangle.sampleValue <<= 4;\n          }\n        }\n      }\n    }\n\n    // Clock Square channel 1 Prog timer:\n    square1.progTimerCount -= nCycles;\n    if (square1.progTimerCount <= 0) {\n      square1.progTimerCount += square1.progTimerMax + 1 << 1;\n      square1.squareCounter++;\n      square1.squareCounter &= 0x7;\n      square1.updateSampleValue();\n    }\n\n    // Clock Square channel 2 Prog timer:\n    square2.progTimerCount -= nCycles;\n    if (square2.progTimerCount <= 0) {\n      square2.progTimerCount += square2.progTimerMax + 1 << 1;\n      square2.squareCounter++;\n      square2.squareCounter &= 0x7;\n      square2.updateSampleValue();\n    }\n\n    // Clock noise channel Prog timer:\n    var acc_c = nCycles;\n    if (noise.progTimerCount - acc_c > 0) {\n      // Do all cycles at once:\n      noise.progTimerCount -= acc_c;\n      noise.accCount += acc_c;\n      noise.accValue += acc_c * noise.sampleValue;\n    } else {\n      // Slow-step:\n      while (acc_c-- > 0) {\n        if (--noise.progTimerCount <= 0 && noise.progTimerMax > 0) {\n          // Update noise shift register:\n          noise.shiftReg <<= 1;\n          noise.tmp = (noise.shiftReg << (noise.randomMode === 0 ? 1 : 6) ^ noise.shiftReg) & 0x8000;\n          if (noise.tmp !== 0) {\n            // Sample value must be 0.\n            noise.shiftReg |= 0x01;\n            noise.randomBit = 0;\n            noise.sampleValue = 0;\n          } else {\n            // Find sample value:\n            noise.randomBit = 1;\n            if (noise.isEnabled && noise.lengthCounter > 0) {\n              noise.sampleValue = noise.masterVolume;\n            } else {\n              noise.sampleValue = 0;\n            }\n          }\n          noise.progTimerCount += noise.progTimerMax;\n        }\n        noise.accValue += noise.sampleValue;\n        noise.accCount++;\n      }\n    }\n\n    // Frame IRQ handling:\n    if (this.frameIrqEnabled && this.frameIrqActive) {\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n    }\n\n    // Clock frame counter at double CPU speed:\n    this.masterFrameCounter += nCycles << 1;\n    if (this.masterFrameCounter >= this.frameTime) {\n      // 240Hz tick:\n      this.masterFrameCounter -= this.frameTime;\n      this.frameCounterTick();\n    }\n\n    // Accumulate sample value:\n    this.accSample(nCycles);\n\n    // Clock sample timer:\n    this.sampleTimer += nCycles << 10;\n    if (this.sampleTimer >= this.sampleTimerMax) {\n      // Sample channels:\n      this.sample();\n      this.sampleTimer -= this.sampleTimerMax;\n    }\n  },\n  accSample: function (cycles) {\n    // Special treatment for triangle channel - need to interpolate.\n    if (this.triangle.sampleCondition) {\n      this.triValue = Math.floor((this.triangle.progTimerCount << 4) / (this.triangle.progTimerMax + 1));\n      if (this.triValue > 16) {\n        this.triValue = 16;\n      }\n      if (this.triangle.triangleCounter >= 16) {\n        this.triValue = 16 - this.triValue;\n      }\n\n      // Add non-interpolated sample value:\n      this.triValue += this.triangle.sampleValue;\n    }\n\n    // Now sample normally:\n    if (cycles === 2) {\n      this.smpTriangle += this.triValue << 1;\n      this.smpDmc += this.dmc.sample << 1;\n      this.smpSquare1 += this.square1.sampleValue << 1;\n      this.smpSquare2 += this.square2.sampleValue << 1;\n      this.accCount += 2;\n    } else if (cycles === 4) {\n      this.smpTriangle += this.triValue << 2;\n      this.smpDmc += this.dmc.sample << 2;\n      this.smpSquare1 += this.square1.sampleValue << 2;\n      this.smpSquare2 += this.square2.sampleValue << 2;\n      this.accCount += 4;\n    } else {\n      this.smpTriangle += cycles * this.triValue;\n      this.smpDmc += cycles * this.dmc.sample;\n      this.smpSquare1 += cycles * this.square1.sampleValue;\n      this.smpSquare2 += cycles * this.square2.sampleValue;\n      this.accCount += cycles;\n    }\n  },\n  frameCounterTick: function () {\n    this.derivedFrameCounter++;\n    if (this.derivedFrameCounter >= this.frameIrqCounterMax) {\n      this.derivedFrameCounter = 0;\n    }\n    if (this.derivedFrameCounter === 1 || this.derivedFrameCounter === 3) {\n      // Clock length & sweep:\n      this.triangle.clockLengthCounter();\n      this.square1.clockLengthCounter();\n      this.square2.clockLengthCounter();\n      this.noise.clockLengthCounter();\n      this.square1.clockSweep();\n      this.square2.clockSweep();\n    }\n    if (this.derivedFrameCounter >= 0 && this.derivedFrameCounter < 4) {\n      // Clock linear & decay:\n      this.square1.clockEnvDecay();\n      this.square2.clockEnvDecay();\n      this.noise.clockEnvDecay();\n      this.triangle.clockLinearCounter();\n    }\n    if (this.derivedFrameCounter === 3 && this.countSequence === 0) {\n      // Enable IRQ:\n      this.frameIrqActive = true;\n    }\n\n    // End of 240Hz tick\n  },\n  // Samples the channels, mixes the output together, then writes to buffer.\n  sample: function () {\n    var sq_index, tnd_index;\n    if (this.accCount > 0) {\n      this.smpSquare1 <<= 4;\n      this.smpSquare1 = Math.floor(this.smpSquare1 / this.accCount);\n      this.smpSquare2 <<= 4;\n      this.smpSquare2 = Math.floor(this.smpSquare2 / this.accCount);\n      this.smpTriangle = Math.floor(this.smpTriangle / this.accCount);\n      this.smpDmc <<= 4;\n      this.smpDmc = Math.floor(this.smpDmc / this.accCount);\n      this.accCount = 0;\n    } else {\n      this.smpSquare1 = this.square1.sampleValue << 4;\n      this.smpSquare2 = this.square2.sampleValue << 4;\n      this.smpTriangle = this.triangle.sampleValue;\n      this.smpDmc = this.dmc.sample << 4;\n    }\n    var smpNoise = Math.floor((this.noise.accValue << 4) / this.noise.accCount);\n    this.noise.accValue = smpNoise >> 4;\n    this.noise.accCount = 1;\n\n    // Stereo sound.\n\n    // Left channel:\n    sq_index = this.smpSquare1 * this.stereoPosLSquare1 + this.smpSquare2 * this.stereoPosLSquare2 >> 8;\n    tnd_index = 3 * this.smpTriangle * this.stereoPosLTriangle + (smpNoise << 1) * this.stereoPosLNoise + this.smpDmc * this.stereoPosLDMC >> 8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueL = this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Right channel:\n    sq_index = this.smpSquare1 * this.stereoPosRSquare1 + this.smpSquare2 * this.stereoPosRSquare2 >> 8;\n    tnd_index = 3 * this.smpTriangle * this.stereoPosRTriangle + (smpNoise << 1) * this.stereoPosRNoise + this.smpDmc * this.stereoPosRDMC >> 8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueR = this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Remove DC from left channel:\n    var smpDiffL = sampleValueL - this.prevSampleL;\n    this.prevSampleL += smpDiffL;\n    this.smpAccumL += smpDiffL - (this.smpAccumL >> 10);\n    sampleValueL = this.smpAccumL;\n\n    // Remove DC from right channel:\n    var smpDiffR = sampleValueR - this.prevSampleR;\n    this.prevSampleR += smpDiffR;\n    this.smpAccumR += smpDiffR - (this.smpAccumR >> 10);\n    sampleValueR = this.smpAccumR;\n\n    // Write:\n    if (sampleValueL > this.maxSample) {\n      this.maxSample = sampleValueL;\n    }\n    if (sampleValueL < this.minSample) {\n      this.minSample = sampleValueL;\n    }\n    if (this.nes.opts.onAudioSample) {\n      this.nes.opts.onAudioSample(sampleValueL / 32768, sampleValueR / 32768);\n    }\n\n    // Reset sampled values:\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n  },\n  getLengthMax: function (value) {\n    return this.lengthLookup[value >> 3];\n  },\n  getDmcFrequency: function (value) {\n    if (value >= 0 && value < 0x10) {\n      return this.dmcFreqLookup[value];\n    }\n    return 0;\n  },\n  getNoiseWaveLength: function (value) {\n    if (value >= 0 && value < 0x10) {\n      return this.noiseWavelengthLookup[value];\n    }\n    return 0;\n  },\n  setPanning: function (pos) {\n    for (var i = 0; i < 5; i++) {\n      this.panning[i] = pos[i];\n    }\n    this.updateStereoPos();\n  },\n  setMasterVolume: function (value) {\n    if (value < 0) {\n      value = 0;\n    }\n    if (value > 256) {\n      value = 256;\n    }\n    this.masterVolume = value;\n    this.updateStereoPos();\n  },\n  updateStereoPos: function () {\n    this.stereoPosLSquare1 = this.panning[0] * this.masterVolume >> 8;\n    this.stereoPosLSquare2 = this.panning[1] * this.masterVolume >> 8;\n    this.stereoPosLTriangle = this.panning[2] * this.masterVolume >> 8;\n    this.stereoPosLNoise = this.panning[3] * this.masterVolume >> 8;\n    this.stereoPosLDMC = this.panning[4] * this.masterVolume >> 8;\n    this.stereoPosRSquare1 = this.masterVolume - this.stereoPosLSquare1;\n    this.stereoPosRSquare2 = this.masterVolume - this.stereoPosLSquare2;\n    this.stereoPosRTriangle = this.masterVolume - this.stereoPosLTriangle;\n    this.stereoPosRNoise = this.masterVolume - this.stereoPosLNoise;\n    this.stereoPosRDMC = this.masterVolume - this.stereoPosLDMC;\n  },\n  initLengthLookup: function () {\n    // prettier-ignore\n    this.lengthLookup = [0x0A, 0xFE, 0x14, 0x02, 0x28, 0x04, 0x50, 0x06, 0xA0, 0x08, 0x3C, 0x0A, 0x0E, 0x0C, 0x1A, 0x0E, 0x0C, 0x10, 0x18, 0x12, 0x30, 0x14, 0x60, 0x16, 0xC0, 0x18, 0x48, 0x1A, 0x10, 0x1C, 0x20, 0x1E];\n  },\n  initDmcFrequencyLookup: function () {\n    this.dmcFreqLookup = new Array(16);\n    this.dmcFreqLookup[0x0] = 0xd60;\n    this.dmcFreqLookup[0x1] = 0xbe0;\n    this.dmcFreqLookup[0x2] = 0xaa0;\n    this.dmcFreqLookup[0x3] = 0xa00;\n    this.dmcFreqLookup[0x4] = 0x8f0;\n    this.dmcFreqLookup[0x5] = 0x7f0;\n    this.dmcFreqLookup[0x6] = 0x710;\n    this.dmcFreqLookup[0x7] = 0x6b0;\n    this.dmcFreqLookup[0x8] = 0x5f0;\n    this.dmcFreqLookup[0x9] = 0x500;\n    this.dmcFreqLookup[0xa] = 0x470;\n    this.dmcFreqLookup[0xb] = 0x400;\n    this.dmcFreqLookup[0xc] = 0x350;\n    this.dmcFreqLookup[0xd] = 0x2a0;\n    this.dmcFreqLookup[0xe] = 0x240;\n    this.dmcFreqLookup[0xf] = 0x1b0;\n    //for(int i=0;i<16;i++)dmcFreqLookup[i]/=8;\n  },\n  initNoiseWavelengthLookup: function () {\n    this.noiseWavelengthLookup = new Array(16);\n    this.noiseWavelengthLookup[0x0] = 0x004;\n    this.noiseWavelengthLookup[0x1] = 0x008;\n    this.noiseWavelengthLookup[0x2] = 0x010;\n    this.noiseWavelengthLookup[0x3] = 0x020;\n    this.noiseWavelengthLookup[0x4] = 0x040;\n    this.noiseWavelengthLookup[0x5] = 0x060;\n    this.noiseWavelengthLookup[0x6] = 0x080;\n    this.noiseWavelengthLookup[0x7] = 0x0a0;\n    this.noiseWavelengthLookup[0x8] = 0x0ca;\n    this.noiseWavelengthLookup[0x9] = 0x0fe;\n    this.noiseWavelengthLookup[0xa] = 0x17c;\n    this.noiseWavelengthLookup[0xb] = 0x1fc;\n    this.noiseWavelengthLookup[0xc] = 0x2fa;\n    this.noiseWavelengthLookup[0xd] = 0x3f8;\n    this.noiseWavelengthLookup[0xe] = 0x7f2;\n    this.noiseWavelengthLookup[0xf] = 0xfe4;\n  },\n  initDACtables: function () {\n    var value, ival, i;\n    var max_sqr = 0;\n    var max_tnd = 0;\n    this.square_table = new Array(32 * 16);\n    this.tnd_table = new Array(204 * 16);\n    for (i = 0; i < 32 * 16; i++) {\n      value = 95.52 / (8128.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n      this.square_table[i] = ival;\n      if (ival > max_sqr) {\n        max_sqr = ival;\n      }\n    }\n    for (i = 0; i < 204 * 16; i++) {\n      value = 163.67 / (24329.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n      this.tnd_table[i] = ival;\n      if (ival > max_tnd) {\n        max_tnd = ival;\n      }\n    }\n    this.dacRange = max_sqr + max_tnd;\n    this.dcValue = this.dacRange / 2;\n  }\n};\nvar ChannelDM = function (papu) {\n  this.papu = papu;\n  this.MODE_NORMAL = 0;\n  this.MODE_LOOP = 1;\n  this.MODE_IRQ = 2;\n  this.isEnabled = null;\n  this.hasSample = null;\n  this.irqGenerated = false;\n  this.playMode = null;\n  this.dmaFrequency = null;\n  this.dmaCounter = null;\n  this.deltaCounter = null;\n  this.playStartAddress = null;\n  this.playAddress = null;\n  this.playLength = null;\n  this.playLengthCounter = null;\n  this.shiftCounter = null;\n  this.reg4012 = null;\n  this.reg4013 = null;\n  this.sample = null;\n  this.dacLsb = null;\n  this.data = null;\n  this.reset();\n};\nChannelDM.prototype = {\n  clockDmc: function () {\n    // Only alter DAC value if the sample buffer has data:\n    if (this.hasSample) {\n      if ((this.data & 1) === 0) {\n        // Decrement delta:\n        if (this.deltaCounter > 0) {\n          this.deltaCounter--;\n        }\n      } else {\n        // Increment delta:\n        if (this.deltaCounter < 63) {\n          this.deltaCounter++;\n        }\n      }\n\n      // Update sample value:\n      this.sample = this.isEnabled ? (this.deltaCounter << 1) + this.dacLsb : 0;\n\n      // Update shift register:\n      this.data >>= 1;\n    }\n    this.dmaCounter--;\n    if (this.dmaCounter <= 0) {\n      // No more sample bits.\n      this.hasSample = false;\n      this.endOfSample();\n      this.dmaCounter = 8;\n    }\n    if (this.irqGenerated) {\n      this.papu.nes.cpu.requestIrq(this.papu.nes.cpu.IRQ_NORMAL);\n    }\n  },\n  endOfSample: function () {\n    if (this.playLengthCounter === 0 && this.playMode === this.MODE_LOOP) {\n      // Start from beginning of sample:\n      this.playAddress = this.playStartAddress;\n      this.playLengthCounter = this.playLength;\n    }\n    if (this.playLengthCounter > 0) {\n      // Fetch next sample:\n      this.nextSample();\n      if (this.playLengthCounter === 0) {\n        // Last byte of sample fetched, generate IRQ:\n        if (this.playMode === this.MODE_IRQ) {\n          // Generate IRQ:\n          this.irqGenerated = true;\n        }\n      }\n    }\n  },\n  nextSample: function () {\n    // Fetch byte:\n    this.data = this.papu.nes.mmap.load(this.playAddress);\n    this.papu.nes.cpu.haltCycles(4);\n    this.playLengthCounter--;\n    this.playAddress++;\n    if (this.playAddress > 0xffff) {\n      this.playAddress = 0x8000;\n    }\n    this.hasSample = true;\n  },\n  writeReg: function (address, value) {\n    if (address === 0x4010) {\n      // Play mode, DMA Frequency\n      if (value >> 6 === 0) {\n        this.playMode = this.MODE_NORMAL;\n      } else if ((value >> 6 & 1) === 1) {\n        this.playMode = this.MODE_LOOP;\n      } else if (value >> 6 === 2) {\n        this.playMode = this.MODE_IRQ;\n      }\n      if ((value & 0x80) === 0) {\n        this.irqGenerated = false;\n      }\n      this.dmaFrequency = this.papu.getDmcFrequency(value & 0xf);\n    } else if (address === 0x4011) {\n      // Delta counter load register:\n      this.deltaCounter = value >> 1 & 63;\n      this.dacLsb = value & 1;\n      this.sample = (this.deltaCounter << 1) + this.dacLsb; // update sample value\n    } else if (address === 0x4012) {\n      // DMA address load register\n      this.playStartAddress = value << 6 | 0x0c000;\n      this.playAddress = this.playStartAddress;\n      this.reg4012 = value;\n    } else if (address === 0x4013) {\n      // Length of play code\n      this.playLength = (value << 4) + 1;\n      this.playLengthCounter = this.playLength;\n      this.reg4013 = value;\n    } else if (address === 0x4015) {\n      // DMC/IRQ Status\n      if ((value >> 4 & 1) === 0) {\n        // Disable:\n        this.playLengthCounter = 0;\n      } else {\n        // Restart:\n        this.playAddress = this.playStartAddress;\n        this.playLengthCounter = this.playLength;\n      }\n      this.irqGenerated = false;\n    }\n  },\n  setEnabled: function (value) {\n    if (!this.isEnabled && value) {\n      this.playLengthCounter = this.playLength;\n    }\n    this.isEnabled = value;\n  },\n  getLengthStatus: function () {\n    return this.playLengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n  getIrqStatus: function () {\n    return this.irqGenerated ? 1 : 0;\n  },\n  reset: function () {\n    this.isEnabled = false;\n    this.irqGenerated = false;\n    this.playMode = this.MODE_NORMAL;\n    this.dmaFrequency = 0;\n    this.dmaCounter = 0;\n    this.deltaCounter = 0;\n    this.playStartAddress = 0;\n    this.playAddress = 0;\n    this.playLength = 0;\n    this.playLengthCounter = 0;\n    this.sample = 0;\n    this.dacLsb = 0;\n    this.shiftCounter = 0;\n    this.reg4012 = 0;\n    this.reg4013 = 0;\n    this.data = 0;\n  }\n};\nvar ChannelNoise = function (papu) {\n  this.papu = papu;\n  this.isEnabled = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.lengthCounterEnable = null;\n  this.envReset = null;\n  this.shiftNow = null;\n  this.lengthCounter = null;\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.shiftReg = 1 << 14;\n  this.randomBit = null;\n  this.randomMode = null;\n  this.sampleValue = null;\n  this.accValue = 0;\n  this.accCount = 1;\n  this.tmp = null;\n  this.reset();\n};\nChannelNoise.prototype = {\n  reset: function () {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.isEnabled = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n    this.shiftNow = false;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.shiftReg = 1;\n    this.randomBit = 0;\n    this.randomMode = 0;\n    this.sampleValue = 0;\n    this.tmp = 0;\n  },\n  clockLengthCounter: function () {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n  clockEnvDecay: function () {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n  updateSampleValue: function () {\n    if (this.isEnabled && this.lengthCounter > 0) {\n      this.sampleValue = this.randomBit * this.masterVolume;\n    }\n  },\n  writeReg: function (address, value) {\n    if (address === 0x400c) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n    } else if (address === 0x400e) {\n      // Programmable timer:\n      this.progTimerMax = this.papu.getNoiseWaveLength(value & 0xf);\n      this.randomMode = value >> 7;\n    } else if (address === 0x400f) {\n      // Length counter\n      this.lengthCounter = this.papu.getLengthMax(value & 248);\n      this.envReset = true;\n    }\n    // Update:\n    //updateSampleValue();\n  },\n  setEnabled: function (value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n  getLengthStatus: function () {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  }\n};\nvar ChannelSquare = function (papu, square1) {\n  this.papu = papu;\n\n  // prettier-ignore\n  this.dutyLookup = [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1];\n  // prettier-ignore\n  this.impLookup = [1, -1, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0];\n  this.sqr1 = square1;\n  this.isEnabled = null;\n  this.lengthCounterEnable = null;\n  this.sweepActive = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.envReset = null;\n  this.sweepCarry = null;\n  this.updateSweepPeriod = null;\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.lengthCounter = null;\n  this.squareCounter = null;\n  this.sweepCounter = null;\n  this.sweepCounterMax = null;\n  this.sweepMode = null;\n  this.sweepShiftAmount = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.dutyMode = null;\n  this.sweepResult = null;\n  this.sampleValue = null;\n  this.vol = null;\n  this.reset();\n};\nChannelSquare.prototype = {\n  reset: function () {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.lengthCounter = 0;\n    this.squareCounter = 0;\n    this.sweepCounter = 0;\n    this.sweepCounterMax = 0;\n    this.sweepMode = 0;\n    this.sweepShiftAmount = 0;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.dutyMode = 0;\n    this.vol = 0;\n    this.isEnabled = false;\n    this.lengthCounterEnable = false;\n    this.sweepActive = false;\n    this.sweepCarry = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n  },\n  clockLengthCounter: function () {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n  clockEnvDecay: function () {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n  clockSweep: function () {\n    if (--this.sweepCounter <= 0) {\n      this.sweepCounter = this.sweepCounterMax + 1;\n      if (this.sweepActive && this.sweepShiftAmount > 0 && this.progTimerMax > 7) {\n        // Calculate result from shifter:\n        this.sweepCarry = false;\n        if (this.sweepMode === 0) {\n          this.progTimerMax += this.progTimerMax >> this.sweepShiftAmount;\n          if (this.progTimerMax > 4095) {\n            this.progTimerMax = 4095;\n            this.sweepCarry = true;\n          }\n        } else {\n          this.progTimerMax = this.progTimerMax - ((this.progTimerMax >> this.sweepShiftAmount) - (this.sqr1 ? 1 : 0));\n        }\n      }\n    }\n    if (this.updateSweepPeriod) {\n      this.updateSweepPeriod = false;\n      this.sweepCounter = this.sweepCounterMax + 1;\n    }\n  },\n  updateSampleValue: function () {\n    if (this.isEnabled && this.lengthCounter > 0 && this.progTimerMax > 7) {\n      if (this.sweepMode === 0 && this.progTimerMax + (this.progTimerMax >> this.sweepShiftAmount) > 4095) {\n        //if (this.sweepCarry) {\n        this.sampleValue = 0;\n      } else {\n        this.sampleValue = this.masterVolume * this.dutyLookup[(this.dutyMode << 3) + this.squareCounter];\n      }\n    } else {\n      this.sampleValue = 0;\n    }\n  },\n  writeReg: function (address, value) {\n    var addrAdd = this.sqr1 ? 0 : 4;\n    if (address === 0x4000 + addrAdd) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.dutyMode = value >> 6 & 0x3;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n      this.updateSampleValue();\n    } else if (address === 0x4001 + addrAdd) {\n      // Sweep:\n      this.sweepActive = (value & 0x80) !== 0;\n      this.sweepCounterMax = value >> 4 & 7;\n      this.sweepMode = value >> 3 & 1;\n      this.sweepShiftAmount = value & 7;\n      this.updateSweepPeriod = true;\n    } else if (address === 0x4002 + addrAdd) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x4003 + addrAdd) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x7) << 8;\n      if (this.isEnabled) {\n        this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      }\n      this.envReset = true;\n    }\n  },\n  setEnabled: function (value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n  getLengthStatus: function () {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  }\n};\nvar ChannelTriangle = function (papu) {\n  this.papu = papu;\n  this.isEnabled = null;\n  this.sampleCondition = null;\n  this.lengthCounterEnable = null;\n  this.lcHalt = null;\n  this.lcControl = null;\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.triangleCounter = null;\n  this.lengthCounter = null;\n  this.linearCounter = null;\n  this.lcLoadValue = null;\n  this.sampleValue = null;\n  this.tmp = null;\n  this.reset();\n};\nChannelTriangle.prototype = {\n  reset: function () {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.triangleCounter = 0;\n    this.isEnabled = false;\n    this.sampleCondition = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.linearCounter = 0;\n    this.lcLoadValue = 0;\n    this.lcHalt = true;\n    this.lcControl = false;\n    this.tmp = 0;\n    this.sampleValue = 0xf;\n  },\n  clockLengthCounter: function () {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleCondition();\n      }\n    }\n  },\n  clockLinearCounter: function () {\n    if (this.lcHalt) {\n      // Load:\n      this.linearCounter = this.lcLoadValue;\n      this.updateSampleCondition();\n    } else if (this.linearCounter > 0) {\n      // Decrement:\n      this.linearCounter--;\n      this.updateSampleCondition();\n    }\n    if (!this.lcControl) {\n      // Clear halt flag:\n      this.lcHalt = false;\n    }\n  },\n  getLengthStatus: function () {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n  // eslint-disable-next-line no-unused-vars\n  readReg: function (address) {\n    return 0;\n  },\n  writeReg: function (address, value) {\n    if (address === 0x4008) {\n      // New values for linear counter:\n      this.lcControl = (value & 0x80) !== 0;\n      this.lcLoadValue = value & 0x7f;\n\n      // Length counter enable:\n      this.lengthCounterEnable = !this.lcControl;\n    } else if (address === 0x400a) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x400b) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x07) << 8;\n      this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      this.lcHalt = true;\n    }\n    this.updateSampleCondition();\n  },\n  clockProgrammableTimer: function (nCycles) {\n    if (this.progTimerMax > 0) {\n      this.progTimerCount += nCycles;\n      while (this.progTimerMax > 0 && this.progTimerCount >= this.progTimerMax) {\n        this.progTimerCount -= this.progTimerMax;\n        if (this.isEnabled && this.lengthCounter > 0 && this.linearCounter > 0) {\n          this.clockTriangleGenerator();\n        }\n      }\n    }\n  },\n  clockTriangleGenerator: function () {\n    this.triangleCounter++;\n    this.triangleCounter &= 0x1f;\n  },\n  setEnabled: function (value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleCondition();\n  },\n  updateSampleCondition: function () {\n    this.sampleCondition = this.isEnabled && this.progTimerMax > 7 && this.linearCounter > 0 && this.lengthCounter > 0;\n  }\n};\nmodule.exports = PAPU;","map":{"version":3,"names":["CPU_FREQ_NTSC","PAPU","nes","square1","ChannelSquare","square2","triangle","ChannelTriangle","noise","ChannelNoise","dmc","ChannelDM","frameIrqCounter","frameIrqCounterMax","initCounter","channelEnableValue","sampleRate","lengthLookup","dmcFreqLookup","noiseWavelengthLookup","square_table","tnd_table","frameIrqEnabled","frameIrqActive","frameClockNow","startedPlaying","recordOutput","initingHardware","masterFrameCounter","derivedFrameCounter","countSequence","sampleTimer","frameTime","sampleTimerMax","sampleCount","triValue","smpSquare1","smpSquare2","smpTriangle","smpDmc","accCount","prevSampleL","prevSampleR","smpAccumL","smpAccumR","dacRange","dcValue","masterVolume","stereoPosLSquare1","stereoPosLSquare2","stereoPosLTriangle","stereoPosLNoise","stereoPosLDMC","stereoPosRSquare1","stereoPosRSquare2","stereoPosRTriangle","stereoPosRNoise","stereoPosRDMC","extraCycles","maxSample","minSample","panning","setPanning","initLengthLookup","initDmcFrequencyLookup","initNoiseWavelengthLookup","initDACtables","i","writeReg","reset","prototype","opts","Math","floor","preferredFrameRate","updateChannelEnable","resetCounter","readReg","address","tmp","getLengthStatus","getIrqStatus","irqGenerated","value","frameCounterTick","setEnabled","clockFrameCounter","nCycles","maxCycles","isEnabled","shiftCounter","dmaFrequency","clockDmc","progTimerMax","progTimerCount","linearCounter","lengthCounter","triangleCounter","sampleValue","squareCounter","updateSampleValue","acc_c","accValue","shiftReg","randomMode","randomBit","cpu","requestIrq","IRQ_NORMAL","accSample","sample","cycles","sampleCondition","clockLengthCounter","clockSweep","clockEnvDecay","clockLinearCounter","sq_index","tnd_index","smpNoise","length","sampleValueL","sampleValueR","smpDiffL","smpDiffR","onAudioSample","getLengthMax","getDmcFrequency","getNoiseWaveLength","pos","updateStereoPos","setMasterVolume","Array","ival","max_sqr","max_tnd","papu","MODE_NORMAL","MODE_LOOP","MODE_IRQ","hasSample","playMode","dmaCounter","deltaCounter","playStartAddress","playAddress","playLength","playLengthCounter","reg4012","reg4013","dacLsb","data","endOfSample","nextSample","mmap","load","haltCycles","envDecayDisable","envDecayLoopEnable","lengthCounterEnable","envReset","shiftNow","envDecayRate","envDecayCounter","envVolume","dutyLookup","impLookup","sqr1","sweepActive","sweepCarry","updateSweepPeriod","sweepCounter","sweepCounterMax","sweepMode","sweepShiftAmount","dutyMode","sweepResult","vol","addrAdd","lcHalt","lcControl","lcLoadValue","updateSampleCondition","clockProgrammableTimer","clockTriangleGenerator","module","exports"],"sources":["/Users/zakariaalmardaee/csfolder/vintage-game-emulator/frontend/node_modules/jsnes/src/papu.js"],"sourcesContent":["var CPU_FREQ_NTSC = 1789772.5; //1789772.72727272d;\n// var CPU_FREQ_PAL = 1773447.4;\n\nvar PAPU = function (nes) {\n  this.nes = nes;\n\n  this.square1 = new ChannelSquare(this, true);\n  this.square2 = new ChannelSquare(this, false);\n  this.triangle = new ChannelTriangle(this);\n  this.noise = new ChannelNoise(this);\n  this.dmc = new ChannelDM(this);\n\n  this.frameIrqCounter = null;\n  this.frameIrqCounterMax = 4;\n  this.initCounter = 2048;\n  this.channelEnableValue = null;\n\n  this.sampleRate = 44100;\n\n  this.lengthLookup = null;\n  this.dmcFreqLookup = null;\n  this.noiseWavelengthLookup = null;\n  this.square_table = null;\n  this.tnd_table = null;\n\n  this.frameIrqEnabled = false;\n  this.frameIrqActive = null;\n  this.frameClockNow = null;\n  this.startedPlaying = false;\n  this.recordOutput = false;\n  this.initingHardware = false;\n\n  this.masterFrameCounter = null;\n  this.derivedFrameCounter = null;\n  this.countSequence = null;\n  this.sampleTimer = null;\n  this.frameTime = null;\n  this.sampleTimerMax = null;\n  this.sampleCount = null;\n  this.triValue = 0;\n\n  this.smpSquare1 = null;\n  this.smpSquare2 = null;\n  this.smpTriangle = null;\n  this.smpDmc = null;\n  this.accCount = null;\n\n  // DC removal vars:\n  this.prevSampleL = 0;\n  this.prevSampleR = 0;\n  this.smpAccumL = 0;\n  this.smpAccumR = 0;\n\n  // DAC range:\n  this.dacRange = 0;\n  this.dcValue = 0;\n\n  // Master volume:\n  this.masterVolume = 256;\n\n  // Stereo positioning:\n  this.stereoPosLSquare1 = null;\n  this.stereoPosLSquare2 = null;\n  this.stereoPosLTriangle = null;\n  this.stereoPosLNoise = null;\n  this.stereoPosLDMC = null;\n  this.stereoPosRSquare1 = null;\n  this.stereoPosRSquare2 = null;\n  this.stereoPosRTriangle = null;\n  this.stereoPosRNoise = null;\n  this.stereoPosRDMC = null;\n\n  this.extraCycles = null;\n\n  this.maxSample = null;\n  this.minSample = null;\n\n  // Panning:\n  this.panning = [80, 170, 100, 150, 128];\n  this.setPanning(this.panning);\n\n  // Initialize lookup tables:\n  this.initLengthLookup();\n  this.initDmcFrequencyLookup();\n  this.initNoiseWavelengthLookup();\n  this.initDACtables();\n\n  // Init sound registers:\n  for (var i = 0; i < 0x14; i++) {\n    if (i === 0x10) {\n      this.writeReg(0x4010, 0x10);\n    } else {\n      this.writeReg(0x4000 + i, 0);\n    }\n  }\n\n  this.reset();\n};\n\nPAPU.prototype = {\n  reset: function () {\n    this.sampleRate = this.nes.opts.sampleRate;\n    this.sampleTimerMax = Math.floor(\n      (1024.0 * CPU_FREQ_NTSC * this.nes.opts.preferredFrameRate) /\n        (this.sampleRate * 60.0)\n    );\n\n    this.frameTime = Math.floor(\n      (14915.0 * this.nes.opts.preferredFrameRate) / 60.0\n    );\n\n    this.sampleTimer = 0;\n\n    this.updateChannelEnable(0);\n    this.masterFrameCounter = 0;\n    this.derivedFrameCounter = 0;\n    this.countSequence = 0;\n    this.sampleCount = 0;\n    this.initCounter = 2048;\n    this.frameIrqEnabled = false;\n    this.initingHardware = false;\n\n    this.resetCounter();\n\n    this.square1.reset();\n    this.square2.reset();\n    this.triangle.reset();\n    this.noise.reset();\n    this.dmc.reset();\n\n    this.accCount = 0;\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n\n    this.frameIrqEnabled = false;\n    this.frameIrqCounterMax = 4;\n\n    this.channelEnableValue = 0xff;\n    this.startedPlaying = false;\n    this.prevSampleL = 0;\n    this.prevSampleR = 0;\n    this.smpAccumL = 0;\n    this.smpAccumR = 0;\n\n    this.maxSample = -500000;\n    this.minSample = 500000;\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  readReg: function (address) {\n    // Read 0x4015:\n    var tmp = 0;\n    tmp |= this.square1.getLengthStatus();\n    tmp |= this.square2.getLengthStatus() << 1;\n    tmp |= this.triangle.getLengthStatus() << 2;\n    tmp |= this.noise.getLengthStatus() << 3;\n    tmp |= this.dmc.getLengthStatus() << 4;\n    tmp |= (this.frameIrqActive && this.frameIrqEnabled ? 1 : 0) << 6;\n    tmp |= this.dmc.getIrqStatus() << 7;\n\n    this.frameIrqActive = false;\n    this.dmc.irqGenerated = false;\n\n    return tmp & 0xffff;\n  },\n\n  writeReg: function (address, value) {\n    if (address >= 0x4000 && address < 0x4004) {\n      // Square Wave 1 Control\n      this.square1.writeReg(address, value);\n      // console.log(\"Square Write\");\n    } else if (address >= 0x4004 && address < 0x4008) {\n      // Square 2 Control\n      this.square2.writeReg(address, value);\n    } else if (address >= 0x4008 && address < 0x400c) {\n      // Triangle Control\n      this.triangle.writeReg(address, value);\n    } else if (address >= 0x400c && address <= 0x400f) {\n      // Noise Control\n      this.noise.writeReg(address, value);\n    } else if (address === 0x4010) {\n      // DMC Play mode & DMA frequency\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4011) {\n      // DMC Delta Counter\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4012) {\n      // DMC Play code starting address\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4013) {\n      // DMC Play code length\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4015) {\n      // Channel enable\n      this.updateChannelEnable(value);\n\n      if (value !== 0 && this.initCounter > 0) {\n        // Start hardware initialization\n        this.initingHardware = true;\n      }\n\n      // DMC/IRQ Status\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4017) {\n      // Frame counter control\n      this.countSequence = (value >> 7) & 1;\n      this.masterFrameCounter = 0;\n      this.frameIrqActive = false;\n\n      if (((value >> 6) & 0x1) === 0) {\n        this.frameIrqEnabled = true;\n      } else {\n        this.frameIrqEnabled = false;\n      }\n\n      if (this.countSequence === 0) {\n        // NTSC:\n        this.frameIrqCounterMax = 4;\n        this.derivedFrameCounter = 4;\n      } else {\n        // PAL:\n        this.frameIrqCounterMax = 5;\n        this.derivedFrameCounter = 0;\n        this.frameCounterTick();\n      }\n    }\n  },\n\n  resetCounter: function () {\n    if (this.countSequence === 0) {\n      this.derivedFrameCounter = 4;\n    } else {\n      this.derivedFrameCounter = 0;\n    }\n  },\n\n  // Updates channel enable status.\n  // This is done on writes to the\n  // channel enable register (0x4015),\n  // and when the user enables/disables channels\n  // in the GUI.\n  updateChannelEnable: function (value) {\n    this.channelEnableValue = value & 0xffff;\n    this.square1.setEnabled((value & 1) !== 0);\n    this.square2.setEnabled((value & 2) !== 0);\n    this.triangle.setEnabled((value & 4) !== 0);\n    this.noise.setEnabled((value & 8) !== 0);\n    this.dmc.setEnabled((value & 16) !== 0);\n  },\n\n  // Clocks the frame counter. It should be clocked at\n  // twice the cpu speed, so the cycles will be\n  // divided by 2 for those counters that are\n  // clocked at cpu speed.\n  clockFrameCounter: function (nCycles) {\n    if (this.initCounter > 0) {\n      if (this.initingHardware) {\n        this.initCounter -= nCycles;\n        if (this.initCounter <= 0) {\n          this.initingHardware = false;\n        }\n        return;\n      }\n    }\n\n    // Don't process ticks beyond next sampling:\n    nCycles += this.extraCycles;\n    var maxCycles = this.sampleTimerMax - this.sampleTimer;\n    if (nCycles << 10 > maxCycles) {\n      this.extraCycles = ((nCycles << 10) - maxCycles) >> 10;\n      nCycles -= this.extraCycles;\n    } else {\n      this.extraCycles = 0;\n    }\n\n    var dmc = this.dmc;\n    var triangle = this.triangle;\n    var square1 = this.square1;\n    var square2 = this.square2;\n    var noise = this.noise;\n\n    // Clock DMC:\n    if (dmc.isEnabled) {\n      dmc.shiftCounter -= nCycles << 3;\n      while (dmc.shiftCounter <= 0 && dmc.dmaFrequency > 0) {\n        dmc.shiftCounter += dmc.dmaFrequency;\n        dmc.clockDmc();\n      }\n    }\n\n    // Clock Triangle channel Prog timer:\n    if (triangle.progTimerMax > 0) {\n      triangle.progTimerCount -= nCycles;\n      while (triangle.progTimerCount <= 0) {\n        triangle.progTimerCount += triangle.progTimerMax + 1;\n        if (triangle.linearCounter > 0 && triangle.lengthCounter > 0) {\n          triangle.triangleCounter++;\n          triangle.triangleCounter &= 0x1f;\n\n          if (triangle.isEnabled) {\n            if (triangle.triangleCounter >= 0x10) {\n              // Normal value.\n              triangle.sampleValue = triangle.triangleCounter & 0xf;\n            } else {\n              // Inverted value.\n              triangle.sampleValue = 0xf - (triangle.triangleCounter & 0xf);\n            }\n            triangle.sampleValue <<= 4;\n          }\n        }\n      }\n    }\n\n    // Clock Square channel 1 Prog timer:\n    square1.progTimerCount -= nCycles;\n    if (square1.progTimerCount <= 0) {\n      square1.progTimerCount += (square1.progTimerMax + 1) << 1;\n\n      square1.squareCounter++;\n      square1.squareCounter &= 0x7;\n      square1.updateSampleValue();\n    }\n\n    // Clock Square channel 2 Prog timer:\n    square2.progTimerCount -= nCycles;\n    if (square2.progTimerCount <= 0) {\n      square2.progTimerCount += (square2.progTimerMax + 1) << 1;\n\n      square2.squareCounter++;\n      square2.squareCounter &= 0x7;\n      square2.updateSampleValue();\n    }\n\n    // Clock noise channel Prog timer:\n    var acc_c = nCycles;\n    if (noise.progTimerCount - acc_c > 0) {\n      // Do all cycles at once:\n      noise.progTimerCount -= acc_c;\n      noise.accCount += acc_c;\n      noise.accValue += acc_c * noise.sampleValue;\n    } else {\n      // Slow-step:\n      while (acc_c-- > 0) {\n        if (--noise.progTimerCount <= 0 && noise.progTimerMax > 0) {\n          // Update noise shift register:\n          noise.shiftReg <<= 1;\n          noise.tmp =\n            ((noise.shiftReg << (noise.randomMode === 0 ? 1 : 6)) ^\n              noise.shiftReg) &\n            0x8000;\n          if (noise.tmp !== 0) {\n            // Sample value must be 0.\n            noise.shiftReg |= 0x01;\n            noise.randomBit = 0;\n            noise.sampleValue = 0;\n          } else {\n            // Find sample value:\n            noise.randomBit = 1;\n            if (noise.isEnabled && noise.lengthCounter > 0) {\n              noise.sampleValue = noise.masterVolume;\n            } else {\n              noise.sampleValue = 0;\n            }\n          }\n\n          noise.progTimerCount += noise.progTimerMax;\n        }\n\n        noise.accValue += noise.sampleValue;\n        noise.accCount++;\n      }\n    }\n\n    // Frame IRQ handling:\n    if (this.frameIrqEnabled && this.frameIrqActive) {\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n    }\n\n    // Clock frame counter at double CPU speed:\n    this.masterFrameCounter += nCycles << 1;\n    if (this.masterFrameCounter >= this.frameTime) {\n      // 240Hz tick:\n      this.masterFrameCounter -= this.frameTime;\n      this.frameCounterTick();\n    }\n\n    // Accumulate sample value:\n    this.accSample(nCycles);\n\n    // Clock sample timer:\n    this.sampleTimer += nCycles << 10;\n    if (this.sampleTimer >= this.sampleTimerMax) {\n      // Sample channels:\n      this.sample();\n      this.sampleTimer -= this.sampleTimerMax;\n    }\n  },\n\n  accSample: function (cycles) {\n    // Special treatment for triangle channel - need to interpolate.\n    if (this.triangle.sampleCondition) {\n      this.triValue = Math.floor(\n        (this.triangle.progTimerCount << 4) / (this.triangle.progTimerMax + 1)\n      );\n      if (this.triValue > 16) {\n        this.triValue = 16;\n      }\n      if (this.triangle.triangleCounter >= 16) {\n        this.triValue = 16 - this.triValue;\n      }\n\n      // Add non-interpolated sample value:\n      this.triValue += this.triangle.sampleValue;\n    }\n\n    // Now sample normally:\n    if (cycles === 2) {\n      this.smpTriangle += this.triValue << 1;\n      this.smpDmc += this.dmc.sample << 1;\n      this.smpSquare1 += this.square1.sampleValue << 1;\n      this.smpSquare2 += this.square2.sampleValue << 1;\n      this.accCount += 2;\n    } else if (cycles === 4) {\n      this.smpTriangle += this.triValue << 2;\n      this.smpDmc += this.dmc.sample << 2;\n      this.smpSquare1 += this.square1.sampleValue << 2;\n      this.smpSquare2 += this.square2.sampleValue << 2;\n      this.accCount += 4;\n    } else {\n      this.smpTriangle += cycles * this.triValue;\n      this.smpDmc += cycles * this.dmc.sample;\n      this.smpSquare1 += cycles * this.square1.sampleValue;\n      this.smpSquare2 += cycles * this.square2.sampleValue;\n      this.accCount += cycles;\n    }\n  },\n\n  frameCounterTick: function () {\n    this.derivedFrameCounter++;\n    if (this.derivedFrameCounter >= this.frameIrqCounterMax) {\n      this.derivedFrameCounter = 0;\n    }\n\n    if (this.derivedFrameCounter === 1 || this.derivedFrameCounter === 3) {\n      // Clock length & sweep:\n      this.triangle.clockLengthCounter();\n      this.square1.clockLengthCounter();\n      this.square2.clockLengthCounter();\n      this.noise.clockLengthCounter();\n      this.square1.clockSweep();\n      this.square2.clockSweep();\n    }\n\n    if (this.derivedFrameCounter >= 0 && this.derivedFrameCounter < 4) {\n      // Clock linear & decay:\n      this.square1.clockEnvDecay();\n      this.square2.clockEnvDecay();\n      this.noise.clockEnvDecay();\n      this.triangle.clockLinearCounter();\n    }\n\n    if (this.derivedFrameCounter === 3 && this.countSequence === 0) {\n      // Enable IRQ:\n      this.frameIrqActive = true;\n    }\n\n    // End of 240Hz tick\n  },\n\n  // Samples the channels, mixes the output together, then writes to buffer.\n  sample: function () {\n    var sq_index, tnd_index;\n\n    if (this.accCount > 0) {\n      this.smpSquare1 <<= 4;\n      this.smpSquare1 = Math.floor(this.smpSquare1 / this.accCount);\n\n      this.smpSquare2 <<= 4;\n      this.smpSquare2 = Math.floor(this.smpSquare2 / this.accCount);\n\n      this.smpTriangle = Math.floor(this.smpTriangle / this.accCount);\n\n      this.smpDmc <<= 4;\n      this.smpDmc = Math.floor(this.smpDmc / this.accCount);\n\n      this.accCount = 0;\n    } else {\n      this.smpSquare1 = this.square1.sampleValue << 4;\n      this.smpSquare2 = this.square2.sampleValue << 4;\n      this.smpTriangle = this.triangle.sampleValue;\n      this.smpDmc = this.dmc.sample << 4;\n    }\n\n    var smpNoise = Math.floor((this.noise.accValue << 4) / this.noise.accCount);\n    this.noise.accValue = smpNoise >> 4;\n    this.noise.accCount = 1;\n\n    // Stereo sound.\n\n    // Left channel:\n    sq_index =\n      (this.smpSquare1 * this.stereoPosLSquare1 +\n        this.smpSquare2 * this.stereoPosLSquare2) >>\n      8;\n    tnd_index =\n      (3 * this.smpTriangle * this.stereoPosLTriangle +\n        (smpNoise << 1) * this.stereoPosLNoise +\n        this.smpDmc * this.stereoPosLDMC) >>\n      8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueL =\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Right channel:\n    sq_index =\n      (this.smpSquare1 * this.stereoPosRSquare1 +\n        this.smpSquare2 * this.stereoPosRSquare2) >>\n      8;\n    tnd_index =\n      (3 * this.smpTriangle * this.stereoPosRTriangle +\n        (smpNoise << 1) * this.stereoPosRNoise +\n        this.smpDmc * this.stereoPosRDMC) >>\n      8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueR =\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Remove DC from left channel:\n    var smpDiffL = sampleValueL - this.prevSampleL;\n    this.prevSampleL += smpDiffL;\n    this.smpAccumL += smpDiffL - (this.smpAccumL >> 10);\n    sampleValueL = this.smpAccumL;\n\n    // Remove DC from right channel:\n    var smpDiffR = sampleValueR - this.prevSampleR;\n    this.prevSampleR += smpDiffR;\n    this.smpAccumR += smpDiffR - (this.smpAccumR >> 10);\n    sampleValueR = this.smpAccumR;\n\n    // Write:\n    if (sampleValueL > this.maxSample) {\n      this.maxSample = sampleValueL;\n    }\n    if (sampleValueL < this.minSample) {\n      this.minSample = sampleValueL;\n    }\n\n    if (this.nes.opts.onAudioSample) {\n      this.nes.opts.onAudioSample(sampleValueL / 32768, sampleValueR / 32768);\n    }\n\n    // Reset sampled values:\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n  },\n\n  getLengthMax: function (value) {\n    return this.lengthLookup[value >> 3];\n  },\n\n  getDmcFrequency: function (value) {\n    if (value >= 0 && value < 0x10) {\n      return this.dmcFreqLookup[value];\n    }\n    return 0;\n  },\n\n  getNoiseWaveLength: function (value) {\n    if (value >= 0 && value < 0x10) {\n      return this.noiseWavelengthLookup[value];\n    }\n    return 0;\n  },\n\n  setPanning: function (pos) {\n    for (var i = 0; i < 5; i++) {\n      this.panning[i] = pos[i];\n    }\n    this.updateStereoPos();\n  },\n\n  setMasterVolume: function (value) {\n    if (value < 0) {\n      value = 0;\n    }\n    if (value > 256) {\n      value = 256;\n    }\n    this.masterVolume = value;\n    this.updateStereoPos();\n  },\n\n  updateStereoPos: function () {\n    this.stereoPosLSquare1 = (this.panning[0] * this.masterVolume) >> 8;\n    this.stereoPosLSquare2 = (this.panning[1] * this.masterVolume) >> 8;\n    this.stereoPosLTriangle = (this.panning[2] * this.masterVolume) >> 8;\n    this.stereoPosLNoise = (this.panning[3] * this.masterVolume) >> 8;\n    this.stereoPosLDMC = (this.panning[4] * this.masterVolume) >> 8;\n\n    this.stereoPosRSquare1 = this.masterVolume - this.stereoPosLSquare1;\n    this.stereoPosRSquare2 = this.masterVolume - this.stereoPosLSquare2;\n    this.stereoPosRTriangle = this.masterVolume - this.stereoPosLTriangle;\n    this.stereoPosRNoise = this.masterVolume - this.stereoPosLNoise;\n    this.stereoPosRDMC = this.masterVolume - this.stereoPosLDMC;\n  },\n\n  initLengthLookup: function () {\n    // prettier-ignore\n    this.lengthLookup = [\n            0x0A, 0xFE,\n            0x14, 0x02,\n            0x28, 0x04,\n            0x50, 0x06,\n            0xA0, 0x08,\n            0x3C, 0x0A,\n            0x0E, 0x0C,\n            0x1A, 0x0E,\n            0x0C, 0x10,\n            0x18, 0x12,\n            0x30, 0x14,\n            0x60, 0x16,\n            0xC0, 0x18,\n            0x48, 0x1A,\n            0x10, 0x1C,\n            0x20, 0x1E\n        ];\n  },\n\n  initDmcFrequencyLookup: function () {\n    this.dmcFreqLookup = new Array(16);\n\n    this.dmcFreqLookup[0x0] = 0xd60;\n    this.dmcFreqLookup[0x1] = 0xbe0;\n    this.dmcFreqLookup[0x2] = 0xaa0;\n    this.dmcFreqLookup[0x3] = 0xa00;\n    this.dmcFreqLookup[0x4] = 0x8f0;\n    this.dmcFreqLookup[0x5] = 0x7f0;\n    this.dmcFreqLookup[0x6] = 0x710;\n    this.dmcFreqLookup[0x7] = 0x6b0;\n    this.dmcFreqLookup[0x8] = 0x5f0;\n    this.dmcFreqLookup[0x9] = 0x500;\n    this.dmcFreqLookup[0xa] = 0x470;\n    this.dmcFreqLookup[0xb] = 0x400;\n    this.dmcFreqLookup[0xc] = 0x350;\n    this.dmcFreqLookup[0xd] = 0x2a0;\n    this.dmcFreqLookup[0xe] = 0x240;\n    this.dmcFreqLookup[0xf] = 0x1b0;\n    //for(int i=0;i<16;i++)dmcFreqLookup[i]/=8;\n  },\n\n  initNoiseWavelengthLookup: function () {\n    this.noiseWavelengthLookup = new Array(16);\n\n    this.noiseWavelengthLookup[0x0] = 0x004;\n    this.noiseWavelengthLookup[0x1] = 0x008;\n    this.noiseWavelengthLookup[0x2] = 0x010;\n    this.noiseWavelengthLookup[0x3] = 0x020;\n    this.noiseWavelengthLookup[0x4] = 0x040;\n    this.noiseWavelengthLookup[0x5] = 0x060;\n    this.noiseWavelengthLookup[0x6] = 0x080;\n    this.noiseWavelengthLookup[0x7] = 0x0a0;\n    this.noiseWavelengthLookup[0x8] = 0x0ca;\n    this.noiseWavelengthLookup[0x9] = 0x0fe;\n    this.noiseWavelengthLookup[0xa] = 0x17c;\n    this.noiseWavelengthLookup[0xb] = 0x1fc;\n    this.noiseWavelengthLookup[0xc] = 0x2fa;\n    this.noiseWavelengthLookup[0xd] = 0x3f8;\n    this.noiseWavelengthLookup[0xe] = 0x7f2;\n    this.noiseWavelengthLookup[0xf] = 0xfe4;\n  },\n\n  initDACtables: function () {\n    var value, ival, i;\n    var max_sqr = 0;\n    var max_tnd = 0;\n\n    this.square_table = new Array(32 * 16);\n    this.tnd_table = new Array(204 * 16);\n\n    for (i = 0; i < 32 * 16; i++) {\n      value = 95.52 / (8128.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n\n      this.square_table[i] = ival;\n      if (ival > max_sqr) {\n        max_sqr = ival;\n      }\n    }\n\n    for (i = 0; i < 204 * 16; i++) {\n      value = 163.67 / (24329.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n\n      this.tnd_table[i] = ival;\n      if (ival > max_tnd) {\n        max_tnd = ival;\n      }\n    }\n\n    this.dacRange = max_sqr + max_tnd;\n    this.dcValue = this.dacRange / 2;\n  },\n};\n\nvar ChannelDM = function (papu) {\n  this.papu = papu;\n\n  this.MODE_NORMAL = 0;\n  this.MODE_LOOP = 1;\n  this.MODE_IRQ = 2;\n\n  this.isEnabled = null;\n  this.hasSample = null;\n  this.irqGenerated = false;\n\n  this.playMode = null;\n  this.dmaFrequency = null;\n  this.dmaCounter = null;\n  this.deltaCounter = null;\n  this.playStartAddress = null;\n  this.playAddress = null;\n  this.playLength = null;\n  this.playLengthCounter = null;\n  this.shiftCounter = null;\n  this.reg4012 = null;\n  this.reg4013 = null;\n  this.sample = null;\n  this.dacLsb = null;\n  this.data = null;\n\n  this.reset();\n};\n\nChannelDM.prototype = {\n  clockDmc: function () {\n    // Only alter DAC value if the sample buffer has data:\n    if (this.hasSample) {\n      if ((this.data & 1) === 0) {\n        // Decrement delta:\n        if (this.deltaCounter > 0) {\n          this.deltaCounter--;\n        }\n      } else {\n        // Increment delta:\n        if (this.deltaCounter < 63) {\n          this.deltaCounter++;\n        }\n      }\n\n      // Update sample value:\n      this.sample = this.isEnabled ? (this.deltaCounter << 1) + this.dacLsb : 0;\n\n      // Update shift register:\n      this.data >>= 1;\n    }\n\n    this.dmaCounter--;\n    if (this.dmaCounter <= 0) {\n      // No more sample bits.\n      this.hasSample = false;\n      this.endOfSample();\n      this.dmaCounter = 8;\n    }\n\n    if (this.irqGenerated) {\n      this.papu.nes.cpu.requestIrq(this.papu.nes.cpu.IRQ_NORMAL);\n    }\n  },\n\n  endOfSample: function () {\n    if (this.playLengthCounter === 0 && this.playMode === this.MODE_LOOP) {\n      // Start from beginning of sample:\n      this.playAddress = this.playStartAddress;\n      this.playLengthCounter = this.playLength;\n    }\n\n    if (this.playLengthCounter > 0) {\n      // Fetch next sample:\n      this.nextSample();\n\n      if (this.playLengthCounter === 0) {\n        // Last byte of sample fetched, generate IRQ:\n        if (this.playMode === this.MODE_IRQ) {\n          // Generate IRQ:\n          this.irqGenerated = true;\n        }\n      }\n    }\n  },\n\n  nextSample: function () {\n    // Fetch byte:\n    this.data = this.papu.nes.mmap.load(this.playAddress);\n    this.papu.nes.cpu.haltCycles(4);\n\n    this.playLengthCounter--;\n    this.playAddress++;\n    if (this.playAddress > 0xffff) {\n      this.playAddress = 0x8000;\n    }\n\n    this.hasSample = true;\n  },\n\n  writeReg: function (address, value) {\n    if (address === 0x4010) {\n      // Play mode, DMA Frequency\n      if (value >> 6 === 0) {\n        this.playMode = this.MODE_NORMAL;\n      } else if (((value >> 6) & 1) === 1) {\n        this.playMode = this.MODE_LOOP;\n      } else if (value >> 6 === 2) {\n        this.playMode = this.MODE_IRQ;\n      }\n\n      if ((value & 0x80) === 0) {\n        this.irqGenerated = false;\n      }\n\n      this.dmaFrequency = this.papu.getDmcFrequency(value & 0xf);\n    } else if (address === 0x4011) {\n      // Delta counter load register:\n      this.deltaCounter = (value >> 1) & 63;\n      this.dacLsb = value & 1;\n      this.sample = (this.deltaCounter << 1) + this.dacLsb; // update sample value\n    } else if (address === 0x4012) {\n      // DMA address load register\n      this.playStartAddress = (value << 6) | 0x0c000;\n      this.playAddress = this.playStartAddress;\n      this.reg4012 = value;\n    } else if (address === 0x4013) {\n      // Length of play code\n      this.playLength = (value << 4) + 1;\n      this.playLengthCounter = this.playLength;\n      this.reg4013 = value;\n    } else if (address === 0x4015) {\n      // DMC/IRQ Status\n      if (((value >> 4) & 1) === 0) {\n        // Disable:\n        this.playLengthCounter = 0;\n      } else {\n        // Restart:\n        this.playAddress = this.playStartAddress;\n        this.playLengthCounter = this.playLength;\n      }\n      this.irqGenerated = false;\n    }\n  },\n\n  setEnabled: function (value) {\n    if (!this.isEnabled && value) {\n      this.playLengthCounter = this.playLength;\n    }\n    this.isEnabled = value;\n  },\n\n  getLengthStatus: function () {\n    return this.playLengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n\n  getIrqStatus: function () {\n    return this.irqGenerated ? 1 : 0;\n  },\n\n  reset: function () {\n    this.isEnabled = false;\n    this.irqGenerated = false;\n    this.playMode = this.MODE_NORMAL;\n    this.dmaFrequency = 0;\n    this.dmaCounter = 0;\n    this.deltaCounter = 0;\n    this.playStartAddress = 0;\n    this.playAddress = 0;\n    this.playLength = 0;\n    this.playLengthCounter = 0;\n    this.sample = 0;\n    this.dacLsb = 0;\n    this.shiftCounter = 0;\n    this.reg4012 = 0;\n    this.reg4013 = 0;\n    this.data = 0;\n  },\n};\n\nvar ChannelNoise = function (papu) {\n  this.papu = papu;\n\n  this.isEnabled = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.lengthCounterEnable = null;\n  this.envReset = null;\n  this.shiftNow = null;\n\n  this.lengthCounter = null;\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.shiftReg = 1 << 14;\n  this.randomBit = null;\n  this.randomMode = null;\n  this.sampleValue = null;\n  this.accValue = 0;\n  this.accCount = 1;\n  this.tmp = null;\n\n  this.reset();\n};\n\nChannelNoise.prototype = {\n  reset: function () {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.isEnabled = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n    this.shiftNow = false;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.shiftReg = 1;\n    this.randomBit = 0;\n    this.randomMode = 0;\n    this.sampleValue = 0;\n    this.tmp = 0;\n  },\n\n  clockLengthCounter: function () {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n\n  clockEnvDecay: function () {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n\n  updateSampleValue: function () {\n    if (this.isEnabled && this.lengthCounter > 0) {\n      this.sampleValue = this.randomBit * this.masterVolume;\n    }\n  },\n\n  writeReg: function (address, value) {\n    if (address === 0x400c) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n    } else if (address === 0x400e) {\n      // Programmable timer:\n      this.progTimerMax = this.papu.getNoiseWaveLength(value & 0xf);\n      this.randomMode = value >> 7;\n    } else if (address === 0x400f) {\n      // Length counter\n      this.lengthCounter = this.papu.getLengthMax(value & 248);\n      this.envReset = true;\n    }\n    // Update:\n    //updateSampleValue();\n  },\n\n  setEnabled: function (value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n\n  getLengthStatus: function () {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n};\n\nvar ChannelSquare = function (papu, square1) {\n  this.papu = papu;\n\n  // prettier-ignore\n  this.dutyLookup = [\n         0, 1, 0, 0, 0, 0, 0, 0,\n         0, 1, 1, 0, 0, 0, 0, 0,\n         0, 1, 1, 1, 1, 0, 0, 0,\n         1, 0, 0, 1, 1, 1, 1, 1\n    ];\n  // prettier-ignore\n  this.impLookup = [\n         1,-1, 0, 0, 0, 0, 0, 0,\n         1, 0,-1, 0, 0, 0, 0, 0,\n         1, 0, 0, 0,-1, 0, 0, 0,\n        -1, 0, 1, 0, 0, 0, 0, 0\n    ];\n\n  this.sqr1 = square1;\n  this.isEnabled = null;\n  this.lengthCounterEnable = null;\n  this.sweepActive = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.envReset = null;\n  this.sweepCarry = null;\n  this.updateSweepPeriod = null;\n\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.lengthCounter = null;\n  this.squareCounter = null;\n  this.sweepCounter = null;\n  this.sweepCounterMax = null;\n  this.sweepMode = null;\n  this.sweepShiftAmount = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.dutyMode = null;\n  this.sweepResult = null;\n  this.sampleValue = null;\n  this.vol = null;\n\n  this.reset();\n};\n\nChannelSquare.prototype = {\n  reset: function () {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.lengthCounter = 0;\n    this.squareCounter = 0;\n    this.sweepCounter = 0;\n    this.sweepCounterMax = 0;\n    this.sweepMode = 0;\n    this.sweepShiftAmount = 0;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.dutyMode = 0;\n    this.vol = 0;\n\n    this.isEnabled = false;\n    this.lengthCounterEnable = false;\n    this.sweepActive = false;\n    this.sweepCarry = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n  },\n\n  clockLengthCounter: function () {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n\n  clockEnvDecay: function () {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n\n  clockSweep: function () {\n    if (--this.sweepCounter <= 0) {\n      this.sweepCounter = this.sweepCounterMax + 1;\n      if (\n        this.sweepActive &&\n        this.sweepShiftAmount > 0 &&\n        this.progTimerMax > 7\n      ) {\n        // Calculate result from shifter:\n        this.sweepCarry = false;\n        if (this.sweepMode === 0) {\n          this.progTimerMax += this.progTimerMax >> this.sweepShiftAmount;\n          if (this.progTimerMax > 4095) {\n            this.progTimerMax = 4095;\n            this.sweepCarry = true;\n          }\n        } else {\n          this.progTimerMax =\n            this.progTimerMax -\n            ((this.progTimerMax >> this.sweepShiftAmount) -\n              (this.sqr1 ? 1 : 0));\n        }\n      }\n    }\n\n    if (this.updateSweepPeriod) {\n      this.updateSweepPeriod = false;\n      this.sweepCounter = this.sweepCounterMax + 1;\n    }\n  },\n\n  updateSampleValue: function () {\n    if (this.isEnabled && this.lengthCounter > 0 && this.progTimerMax > 7) {\n      if (\n        this.sweepMode === 0 &&\n        this.progTimerMax + (this.progTimerMax >> this.sweepShiftAmount) > 4095\n      ) {\n        //if (this.sweepCarry) {\n        this.sampleValue = 0;\n      } else {\n        this.sampleValue =\n          this.masterVolume *\n          this.dutyLookup[(this.dutyMode << 3) + this.squareCounter];\n      }\n    } else {\n      this.sampleValue = 0;\n    }\n  },\n\n  writeReg: function (address, value) {\n    var addrAdd = this.sqr1 ? 0 : 4;\n    if (address === 0x4000 + addrAdd) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.dutyMode = (value >> 6) & 0x3;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n      this.updateSampleValue();\n    } else if (address === 0x4001 + addrAdd) {\n      // Sweep:\n      this.sweepActive = (value & 0x80) !== 0;\n      this.sweepCounterMax = (value >> 4) & 7;\n      this.sweepMode = (value >> 3) & 1;\n      this.sweepShiftAmount = value & 7;\n      this.updateSweepPeriod = true;\n    } else if (address === 0x4002 + addrAdd) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x4003 + addrAdd) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x7) << 8;\n\n      if (this.isEnabled) {\n        this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      }\n\n      this.envReset = true;\n    }\n  },\n\n  setEnabled: function (value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n\n  getLengthStatus: function () {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n};\n\nvar ChannelTriangle = function (papu) {\n  this.papu = papu;\n\n  this.isEnabled = null;\n  this.sampleCondition = null;\n  this.lengthCounterEnable = null;\n  this.lcHalt = null;\n  this.lcControl = null;\n\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.triangleCounter = null;\n  this.lengthCounter = null;\n  this.linearCounter = null;\n  this.lcLoadValue = null;\n  this.sampleValue = null;\n  this.tmp = null;\n\n  this.reset();\n};\n\nChannelTriangle.prototype = {\n  reset: function () {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.triangleCounter = 0;\n    this.isEnabled = false;\n    this.sampleCondition = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.linearCounter = 0;\n    this.lcLoadValue = 0;\n    this.lcHalt = true;\n    this.lcControl = false;\n    this.tmp = 0;\n    this.sampleValue = 0xf;\n  },\n\n  clockLengthCounter: function () {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleCondition();\n      }\n    }\n  },\n\n  clockLinearCounter: function () {\n    if (this.lcHalt) {\n      // Load:\n      this.linearCounter = this.lcLoadValue;\n      this.updateSampleCondition();\n    } else if (this.linearCounter > 0) {\n      // Decrement:\n      this.linearCounter--;\n      this.updateSampleCondition();\n    }\n    if (!this.lcControl) {\n      // Clear halt flag:\n      this.lcHalt = false;\n    }\n  },\n\n  getLengthStatus: function () {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  readReg: function (address) {\n    return 0;\n  },\n\n  writeReg: function (address, value) {\n    if (address === 0x4008) {\n      // New values for linear counter:\n      this.lcControl = (value & 0x80) !== 0;\n      this.lcLoadValue = value & 0x7f;\n\n      // Length counter enable:\n      this.lengthCounterEnable = !this.lcControl;\n    } else if (address === 0x400a) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x400b) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x07) << 8;\n      this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      this.lcHalt = true;\n    }\n\n    this.updateSampleCondition();\n  },\n\n  clockProgrammableTimer: function (nCycles) {\n    if (this.progTimerMax > 0) {\n      this.progTimerCount += nCycles;\n      while (\n        this.progTimerMax > 0 &&\n        this.progTimerCount >= this.progTimerMax\n      ) {\n        this.progTimerCount -= this.progTimerMax;\n        if (\n          this.isEnabled &&\n          this.lengthCounter > 0 &&\n          this.linearCounter > 0\n        ) {\n          this.clockTriangleGenerator();\n        }\n      }\n    }\n  },\n\n  clockTriangleGenerator: function () {\n    this.triangleCounter++;\n    this.triangleCounter &= 0x1f;\n  },\n\n  setEnabled: function (value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleCondition();\n  },\n\n  updateSampleCondition: function () {\n    this.sampleCondition =\n      this.isEnabled &&\n      this.progTimerMax > 7 &&\n      this.linearCounter > 0 &&\n      this.lengthCounter > 0;\n  },\n};\n\nmodule.exports = PAPU;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}