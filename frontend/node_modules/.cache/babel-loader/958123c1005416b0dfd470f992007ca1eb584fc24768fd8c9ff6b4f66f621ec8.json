{"ast":null,"code":"var CPU = require(\"./cpu\");\nvar Controller = require(\"./controller\");\nvar PPU = require(\"./ppu\");\nvar PAPU = require(\"./papu\");\nvar ROM = require(\"./rom\");\nvar NES = function (opts) {\n  this.opts = {\n    onFrame: function () {},\n    onAudioSample: null,\n    onStatusUpdate: function () {},\n    onBatteryRamWrite: function () {},\n    // FIXME: not actually used except for in PAPU\n    preferredFrameRate: 60,\n    emulateSound: true,\n    sampleRate: 48000 // Sound sample rate in hz\n  };\n  if (typeof opts !== \"undefined\") {\n    var key;\n    for (key in this.opts) {\n      if (typeof opts[key] !== \"undefined\") {\n        this.opts[key] = opts[key];\n      }\n    }\n  }\n  this.frameTime = 1000 / this.opts.preferredFrameRate;\n  this.ui = {\n    writeFrame: this.opts.onFrame,\n    updateStatus: this.opts.onStatusUpdate\n  };\n  this.cpu = new CPU(this);\n  this.ppu = new PPU(this);\n  this.papu = new PAPU(this);\n  this.mmap = null; // set in loadROM()\n  this.controllers = {\n    1: new Controller(),\n    2: new Controller()\n  };\n  this.ui.updateStatus(\"Ready to load a ROM.\");\n  this.frame = this.frame.bind(this);\n  this.buttonDown = this.buttonDown.bind(this);\n  this.buttonUp = this.buttonUp.bind(this);\n  this.zapperMove = this.zapperMove.bind(this);\n  this.zapperFireDown = this.zapperFireDown.bind(this);\n  this.zapperFireUp = this.zapperFireUp.bind(this);\n};\nNES.prototype = {\n  fpsFrameCount: 0,\n  romData: null,\n  // Resets the system\n  reset: function () {\n    if (this.mmap !== null) {\n      this.mmap.reset();\n    }\n    this.cpu.reset();\n    this.ppu.reset();\n    this.papu.reset();\n    this.lastFpsTime = null;\n    this.fpsFrameCount = 0;\n  },\n  frame: function () {\n    this.ppu.startFrame();\n    var cycles = 0;\n    var emulateSound = this.opts.emulateSound;\n    var cpu = this.cpu;\n    var ppu = this.ppu;\n    var papu = this.papu;\n    FRAMELOOP: for (;;) {\n      if (cpu.cyclesToHalt === 0) {\n        // Execute a CPU instruction\n        cycles = cpu.emulate();\n        if (emulateSound) {\n          papu.clockFrameCounter(cycles);\n        }\n        cycles *= 3;\n      } else {\n        if (cpu.cyclesToHalt > 8) {\n          cycles = 24;\n          if (emulateSound) {\n            papu.clockFrameCounter(8);\n          }\n          cpu.cyclesToHalt -= 8;\n        } else {\n          cycles = cpu.cyclesToHalt * 3;\n          if (emulateSound) {\n            papu.clockFrameCounter(cpu.cyclesToHalt);\n          }\n          cpu.cyclesToHalt = 0;\n        }\n      }\n      for (; cycles > 0; cycles--) {\n        if (ppu.curX === ppu.spr0HitX && ppu.f_spVisibility === 1 && ppu.scanline - 21 === ppu.spr0HitY) {\n          // Set sprite 0 hit flag:\n          ppu.setStatusFlag(ppu.STATUS_SPRITE0HIT, true);\n        }\n        if (ppu.requestEndFrame) {\n          ppu.nmiCounter--;\n          if (ppu.nmiCounter === 0) {\n            ppu.requestEndFrame = false;\n            ppu.startVBlank();\n            break FRAMELOOP;\n          }\n        }\n        ppu.curX++;\n        if (ppu.curX === 341) {\n          ppu.curX = 0;\n          ppu.endScanline();\n        }\n      }\n    }\n    this.fpsFrameCount++;\n  },\n  buttonDown: function (controller, button) {\n    this.controllers[controller].buttonDown(button);\n  },\n  buttonUp: function (controller, button) {\n    this.controllers[controller].buttonUp(button);\n  },\n  zapperMove: function (x, y) {\n    if (!this.mmap) return;\n    this.mmap.zapperX = x;\n    this.mmap.zapperY = y;\n  },\n  zapperFireDown: function () {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = true;\n  },\n  zapperFireUp: function () {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = false;\n  },\n  getFPS: function () {\n    var now = +new Date();\n    var fps = null;\n    if (this.lastFpsTime) {\n      fps = this.fpsFrameCount / ((now - this.lastFpsTime) / 1000);\n    }\n    this.fpsFrameCount = 0;\n    this.lastFpsTime = now;\n    return fps;\n  },\n  reloadROM: function () {\n    if (this.romData !== null) {\n      this.loadROM(this.romData);\n    }\n  },\n  // Loads a ROM file into the CPU and PPU.\n  // The ROM file is validated first.\n  loadROM: function (data) {\n    // Load ROM file:\n    this.rom = new ROM(this);\n    this.rom.load(data);\n    this.reset();\n    this.mmap = this.rom.createMapper();\n    this.mmap.loadROM();\n    this.ppu.setMirroring(this.rom.getMirroringType());\n    this.romData = data;\n  },\n  setFramerate: function (rate) {\n    this.opts.preferredFrameRate = rate;\n    this.frameTime = 1000 / rate;\n    this.papu.setSampleRate(this.opts.sampleRate, false);\n  },\n  toJSON: function () {\n    return {\n      romData: this.romData,\n      cpu: this.cpu.toJSON(),\n      mmap: this.mmap.toJSON(),\n      ppu: this.ppu.toJSON()\n    };\n  },\n  fromJSON: function (s) {\n    this.reset();\n    this.romData = s.romData;\n    this.cpu.fromJSON(s.cpu);\n    this.mmap.fromJSON(s.mmap);\n    this.ppu.fromJSON(s.ppu);\n  }\n};\nmodule.exports = NES;","map":{"version":3,"names":["CPU","require","Controller","PPU","PAPU","ROM","NES","opts","onFrame","onAudioSample","onStatusUpdate","onBatteryRamWrite","preferredFrameRate","emulateSound","sampleRate","key","frameTime","ui","writeFrame","updateStatus","cpu","ppu","papu","mmap","controllers","frame","bind","buttonDown","buttonUp","zapperMove","zapperFireDown","zapperFireUp","prototype","fpsFrameCount","romData","reset","lastFpsTime","startFrame","cycles","FRAMELOOP","cyclesToHalt","emulate","clockFrameCounter","curX","spr0HitX","f_spVisibility","scanline","spr0HitY","setStatusFlag","STATUS_SPRITE0HIT","requestEndFrame","nmiCounter","startVBlank","endScanline","controller","button","x","y","zapperX","zapperY","zapperFired","getFPS","now","Date","fps","reloadROM","loadROM","data","rom","load","createMapper","setMirroring","getMirroringType","setFramerate","rate","setSampleRate","toJSON","fromJSON","s","module","exports"],"sources":["/Users/zakariaalmardaee/csfolder/vintage-game-emulator/frontend/node_modules/jsnes/src/nes.js"],"sourcesContent":["var CPU = require(\"./cpu\");\nvar Controller = require(\"./controller\");\nvar PPU = require(\"./ppu\");\nvar PAPU = require(\"./papu\");\nvar ROM = require(\"./rom\");\n\nvar NES = function (opts) {\n  this.opts = {\n    onFrame: function () {},\n    onAudioSample: null,\n    onStatusUpdate: function () {},\n    onBatteryRamWrite: function () {},\n\n    // FIXME: not actually used except for in PAPU\n    preferredFrameRate: 60,\n\n    emulateSound: true,\n    sampleRate: 48000, // Sound sample rate in hz\n  };\n  if (typeof opts !== \"undefined\") {\n    var key;\n    for (key in this.opts) {\n      if (typeof opts[key] !== \"undefined\") {\n        this.opts[key] = opts[key];\n      }\n    }\n  }\n\n  this.frameTime = 1000 / this.opts.preferredFrameRate;\n\n  this.ui = {\n    writeFrame: this.opts.onFrame,\n    updateStatus: this.opts.onStatusUpdate,\n  };\n  this.cpu = new CPU(this);\n  this.ppu = new PPU(this);\n  this.papu = new PAPU(this);\n  this.mmap = null; // set in loadROM()\n  this.controllers = {\n    1: new Controller(),\n    2: new Controller(),\n  };\n\n  this.ui.updateStatus(\"Ready to load a ROM.\");\n\n  this.frame = this.frame.bind(this);\n  this.buttonDown = this.buttonDown.bind(this);\n  this.buttonUp = this.buttonUp.bind(this);\n  this.zapperMove = this.zapperMove.bind(this);\n  this.zapperFireDown = this.zapperFireDown.bind(this);\n  this.zapperFireUp = this.zapperFireUp.bind(this);\n};\n\nNES.prototype = {\n  fpsFrameCount: 0,\n  romData: null,\n\n  // Resets the system\n  reset: function () {\n    if (this.mmap !== null) {\n      this.mmap.reset();\n    }\n\n    this.cpu.reset();\n    this.ppu.reset();\n    this.papu.reset();\n\n    this.lastFpsTime = null;\n    this.fpsFrameCount = 0;\n  },\n\n  frame: function () {\n    this.ppu.startFrame();\n    var cycles = 0;\n    var emulateSound = this.opts.emulateSound;\n    var cpu = this.cpu;\n    var ppu = this.ppu;\n    var papu = this.papu;\n    FRAMELOOP: for (;;) {\n      if (cpu.cyclesToHalt === 0) {\n        // Execute a CPU instruction\n        cycles = cpu.emulate();\n        if (emulateSound) {\n          papu.clockFrameCounter(cycles);\n        }\n        cycles *= 3;\n      } else {\n        if (cpu.cyclesToHalt > 8) {\n          cycles = 24;\n          if (emulateSound) {\n            papu.clockFrameCounter(8);\n          }\n          cpu.cyclesToHalt -= 8;\n        } else {\n          cycles = cpu.cyclesToHalt * 3;\n          if (emulateSound) {\n            papu.clockFrameCounter(cpu.cyclesToHalt);\n          }\n          cpu.cyclesToHalt = 0;\n        }\n      }\n\n      for (; cycles > 0; cycles--) {\n        if (\n          ppu.curX === ppu.spr0HitX &&\n          ppu.f_spVisibility === 1 &&\n          ppu.scanline - 21 === ppu.spr0HitY\n        ) {\n          // Set sprite 0 hit flag:\n          ppu.setStatusFlag(ppu.STATUS_SPRITE0HIT, true);\n        }\n\n        if (ppu.requestEndFrame) {\n          ppu.nmiCounter--;\n          if (ppu.nmiCounter === 0) {\n            ppu.requestEndFrame = false;\n            ppu.startVBlank();\n            break FRAMELOOP;\n          }\n        }\n\n        ppu.curX++;\n        if (ppu.curX === 341) {\n          ppu.curX = 0;\n          ppu.endScanline();\n        }\n      }\n    }\n    this.fpsFrameCount++;\n  },\n\n  buttonDown: function (controller, button) {\n    this.controllers[controller].buttonDown(button);\n  },\n\n  buttonUp: function (controller, button) {\n    this.controllers[controller].buttonUp(button);\n  },\n\n  zapperMove: function (x, y) {\n    if (!this.mmap) return;\n    this.mmap.zapperX = x;\n    this.mmap.zapperY = y;\n  },\n\n  zapperFireDown: function () {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = true;\n  },\n\n  zapperFireUp: function () {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = false;\n  },\n\n  getFPS: function () {\n    var now = +new Date();\n    var fps = null;\n    if (this.lastFpsTime) {\n      fps = this.fpsFrameCount / ((now - this.lastFpsTime) / 1000);\n    }\n    this.fpsFrameCount = 0;\n    this.lastFpsTime = now;\n    return fps;\n  },\n\n  reloadROM: function () {\n    if (this.romData !== null) {\n      this.loadROM(this.romData);\n    }\n  },\n\n  // Loads a ROM file into the CPU and PPU.\n  // The ROM file is validated first.\n  loadROM: function (data) {\n    // Load ROM file:\n    this.rom = new ROM(this);\n    this.rom.load(data);\n\n    this.reset();\n    this.mmap = this.rom.createMapper();\n    this.mmap.loadROM();\n    this.ppu.setMirroring(this.rom.getMirroringType());\n    this.romData = data;\n  },\n\n  setFramerate: function (rate) {\n    this.opts.preferredFrameRate = rate;\n    this.frameTime = 1000 / rate;\n    this.papu.setSampleRate(this.opts.sampleRate, false);\n  },\n\n  toJSON: function () {\n    return {\n      romData: this.romData,\n      cpu: this.cpu.toJSON(),\n      mmap: this.mmap.toJSON(),\n      ppu: this.ppu.toJSON(),\n    };\n  },\n\n  fromJSON: function (s) {\n    this.reset();\n    this.romData = s.romData;\n    this.cpu.fromJSON(s.cpu);\n    this.mmap.fromJSON(s.mmap);\n    this.ppu.fromJSON(s.ppu);\n  },\n};\n\nmodule.exports = NES;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}