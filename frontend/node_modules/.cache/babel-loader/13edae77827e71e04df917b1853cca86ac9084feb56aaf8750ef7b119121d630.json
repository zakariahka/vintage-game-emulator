{"ast":null,"code":"var utils = require(\"./utils\");\nvar Mappers = {};\nMappers[0] = function (nes) {\n  this.nes = nes;\n};\nMappers[0].prototype = {\n  reset: function () {\n    this.joy1StrobeState = 0;\n    this.joy2StrobeState = 0;\n    this.joypadLastWrite = 0;\n    this.zapperFired = false;\n    this.zapperX = null;\n    this.zapperY = null;\n  },\n  write: function (address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n      if (address >= 0x6000 && address < 0x8000) {\n        // Write to persistent RAM\n        this.nes.opts.onBatteryRamWrite(address, value);\n      }\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n  writelow: function (address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n  load: function (address) {\n    // Wrap around:\n    address &= 0xffff;\n\n    // Check address range:\n    if (address > 0x4017) {\n      // ROM:\n      return this.nes.cpu.mem[address];\n    } else if (address >= 0x2000) {\n      // I/O Ports.\n      return this.regLoad(address);\n    } else {\n      // RAM (mirrored)\n      return this.nes.cpu.mem[address & 0x7ff];\n    }\n  },\n  regLoad: function (address) {\n    switch (address >> 12 // use fourth nibble (0xF000)\n    ) {\n      case 0:\n        break;\n      case 1:\n        break;\n      case 2:\n      // Fall through to case 3\n      case 3:\n        // PPU Registers\n        switch (address & 0x7) {\n          case 0x0:\n            // 0x2000:\n            // PPU Control Register 1.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2000];\n          case 0x1:\n            // 0x2001:\n            // PPU Control Register 2.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2001];\n          case 0x2:\n            // 0x2002:\n            // PPU Status Register.\n            // The value is stored in\n            // main memory in addition\n            // to as flags in the PPU.\n            // (not in the real NES)\n            return this.nes.ppu.readStatusRegister();\n          case 0x3:\n            return 0;\n          case 0x4:\n            // 0x2004:\n            // Sprite Memory read.\n            return this.nes.ppu.sramLoad();\n          case 0x5:\n            return 0;\n          case 0x6:\n            return 0;\n          case 0x7:\n            // 0x2007:\n            // VRAM read:\n            return this.nes.ppu.vramLoad();\n        }\n        break;\n      case 4:\n        // Sound+Joypad registers\n        switch (address - 0x4015) {\n          case 0:\n            // 0x4015:\n            // Sound channel enable, DMC Status\n            return this.nes.papu.readReg(address);\n          case 1:\n            // 0x4016:\n            // Joystick 1 + Strobe\n            return this.joy1Read();\n          case 2:\n            // 0x4017:\n            // Joystick 2 + Strobe\n            // https://wiki.nesdev.com/w/index.php/Zapper\n            var w;\n            if (this.zapperX !== null && this.zapperY !== null && this.nes.ppu.isPixelWhite(this.zapperX, this.zapperY)) {\n              w = 0;\n            } else {\n              w = 0x1 << 3;\n            }\n            if (this.zapperFired) {\n              w |= 0x1 << 4;\n            }\n            return (this.joy2Read() | w) & 0xffff;\n        }\n        break;\n    }\n    return 0;\n  },\n  regWrite: function (address, value) {\n    switch (address) {\n      case 0x2000:\n        // PPU Control register 1\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg1(value);\n        break;\n      case 0x2001:\n        // PPU Control register 2\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg2(value);\n        break;\n      case 0x2003:\n        // Set Sprite RAM address:\n        this.nes.ppu.writeSRAMAddress(value);\n        break;\n      case 0x2004:\n        // Write to Sprite RAM:\n        this.nes.ppu.sramWrite(value);\n        break;\n      case 0x2005:\n        // Screen Scroll offsets:\n        this.nes.ppu.scrollWrite(value);\n        break;\n      case 0x2006:\n        // Set VRAM address:\n        this.nes.ppu.writeVRAMAddress(value);\n        break;\n      case 0x2007:\n        // Write to VRAM:\n        this.nes.ppu.vramWrite(value);\n        break;\n      case 0x4014:\n        // Sprite Memory DMA Access\n        this.nes.ppu.sramDMA(value);\n        break;\n      case 0x4015:\n        // Sound Channel Switch, DMC Status\n        this.nes.papu.writeReg(address, value);\n        break;\n      case 0x4016:\n        // Joystick 1 + Strobe\n        if ((value & 1) === 0 && (this.joypadLastWrite & 1) === 1) {\n          this.joy1StrobeState = 0;\n          this.joy2StrobeState = 0;\n        }\n        this.joypadLastWrite = value;\n        break;\n      case 0x4017:\n        // Sound channel frame sequencer:\n        this.nes.papu.writeReg(address, value);\n        break;\n      default:\n        // Sound registers\n        // console.log(\"write to sound reg\");\n        if (address >= 0x4000 && address <= 0x4017) {\n          this.nes.papu.writeReg(address, value);\n        }\n    }\n  },\n  joy1Read: function () {\n    var ret;\n    switch (this.joy1StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[1].state[this.joy1StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n    this.joy1StrobeState++;\n    if (this.joy1StrobeState === 24) {\n      this.joy1StrobeState = 0;\n    }\n    return ret;\n  },\n  joy2Read: function () {\n    var ret;\n    switch (this.joy2StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[2].state[this.joy2StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n    this.joy2StrobeState++;\n    if (this.joy2StrobeState === 24) {\n      this.joy2StrobeState = 0;\n    }\n    return ret;\n  },\n  loadROM: function () {\n    if (!this.nes.rom.valid || this.nes.rom.romCount < 1) {\n      throw new Error(\"NoMapper: Invalid ROM! Unable to load.\");\n    }\n\n    // Load ROM into memory:\n    this.loadPRGROM();\n\n    // Load CHR-ROM:\n    this.loadCHRROM();\n\n    // Load Battery RAM (if present):\n    this.loadBatteryRam();\n\n    // Reset IRQ:\n    //nes.getCpu().doResetInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n  },\n  loadPRGROM: function () {\n    if (this.nes.rom.romCount > 1) {\n      // Load the two first banks into memory.\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(1, 0xc000);\n    } else {\n      // Load the one bank into both memory locations:\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(0, 0xc000);\n    }\n  },\n  loadCHRROM: function () {\n    // console.log(\"Loading CHR ROM..\");\n    if (this.nes.rom.vromCount > 0) {\n      if (this.nes.rom.vromCount === 1) {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(0, 0x1000);\n      } else {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(1, 0x1000);\n      }\n    } else {\n      //System.out.println(\"There aren't any CHR-ROM banks..\");\n    }\n  },\n  loadBatteryRam: function () {\n    if (this.nes.rom.batteryRam) {\n      var ram = this.nes.rom.batteryRam;\n      if (ram !== null && ram.length === 0x2000) {\n        // Load Battery RAM into memory:\n        utils.copyArrayElements(ram, 0, this.nes.cpu.mem, 0x6000, 0x2000);\n      }\n    }\n  },\n  loadRomBank: function (bank, address) {\n    // Loads a ROM bank into the specified address.\n    bank %= this.nes.rom.romCount;\n    //var data = this.nes.rom.rom[bank];\n    //cpuMem.write(address,data,data.length);\n    utils.copyArrayElements(this.nes.rom.rom[bank], 0, this.nes.cpu.mem, address, 16384);\n  },\n  loadVromBank: function (bank, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n    utils.copyArrayElements(this.nes.rom.vrom[bank % this.nes.rom.vromCount], 0, this.nes.ppu.vramMem, address, 4096);\n    var vromTile = this.nes.rom.vromTile[bank % this.nes.rom.vromCount];\n    utils.copyArrayElements(vromTile, 0, this.nes.ppu.ptTile, address >> 4, 256);\n  },\n  load32kRomBank: function (bank, address) {\n    this.loadRomBank(bank * 2 % this.nes.rom.romCount, address);\n    this.loadRomBank((bank * 2 + 1) % this.nes.rom.romCount, address + 16384);\n  },\n  load8kVromBank: function (bank4kStart, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n    this.loadVromBank(bank4kStart % this.nes.rom.vromCount, address);\n    this.loadVromBank((bank4kStart + 1) % this.nes.rom.vromCount, address + 4096);\n  },\n  load1kVromBank: function (bank1k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n    var bank4k = Math.floor(bank1k / 4) % this.nes.rom.vromCount;\n    var bankoffset = bank1k % 4 * 1024;\n    utils.copyArrayElements(this.nes.rom.vrom[bank4k], bankoffset, this.nes.ppu.vramMem, address, 1024);\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 64; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank1k % 4 << 6) + i];\n    }\n  },\n  load2kVromBank: function (bank2k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n    var bank4k = Math.floor(bank2k / 2) % this.nes.rom.vromCount;\n    var bankoffset = bank2k % 2 * 2048;\n    utils.copyArrayElements(this.nes.rom.vrom[bank4k], bankoffset, this.nes.ppu.vramMem, address, 2048);\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 128; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank2k % 2 << 7) + i];\n    }\n  },\n  load8kRomBank: function (bank8k, address) {\n    var bank16k = Math.floor(bank8k / 2) % this.nes.rom.romCount;\n    var offset = bank8k % 2 * 8192;\n\n    //this.nes.cpu.mem.write(address,this.nes.rom.rom[bank16k],offset,8192);\n    utils.copyArrayElements(this.nes.rom.rom[bank16k], offset, this.nes.cpu.mem, address, 8192);\n  },\n  clockIrqCounter: function () {\n    // Does nothing. This is used by the MMC3 mapper.\n  },\n  // eslint-disable-next-line no-unused-vars\n  latchAccess: function (address) {\n    // Does nothing. This is used by MMC2.\n  },\n  toJSON: function () {\n    return {\n      joy1StrobeState: this.joy1StrobeState,\n      joy2StrobeState: this.joy2StrobeState,\n      joypadLastWrite: this.joypadLastWrite\n    };\n  },\n  fromJSON: function (s) {\n    this.joy1StrobeState = s.joy1StrobeState;\n    this.joy2StrobeState = s.joy2StrobeState;\n    this.joypadLastWrite = s.joypadLastWrite;\n  }\n};\nMappers[1] = function (nes) {\n  this.nes = nes;\n};\nMappers[1].prototype = new Mappers[0]();\nMappers[1].prototype.reset = function () {\n  Mappers[0].prototype.reset.apply(this);\n\n  // 5-bit buffer:\n  this.regBuffer = 0;\n  this.regBufferCounter = 0;\n\n  // Register 0:\n  this.mirroring = 0;\n  this.oneScreenMirroring = 0;\n  this.prgSwitchingArea = 1;\n  this.prgSwitchingSize = 1;\n  this.vromSwitchingSize = 0;\n\n  // Register 1:\n  this.romSelectionReg0 = 0;\n\n  // Register 2:\n  this.romSelectionReg1 = 0;\n\n  // Register 3:\n  this.romBankSelect = 0;\n};\nMappers[1].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  // See what should be done with the written value:\n  if ((value & 128) !== 0) {\n    // Reset buffering:\n    this.regBufferCounter = 0;\n    this.regBuffer = 0;\n\n    // Reset register:\n    if (this.getRegNumber(address) === 0) {\n      this.prgSwitchingArea = 1;\n      this.prgSwitchingSize = 1;\n    }\n  } else {\n    // Continue buffering:\n    //regBuffer = (regBuffer & (0xFF-(1<<regBufferCounter))) | ((value & (1<<regBufferCounter))<<regBufferCounter);\n    this.regBuffer = this.regBuffer & 0xff - (1 << this.regBufferCounter) | (value & 1) << this.regBufferCounter;\n    this.regBufferCounter++;\n    if (this.regBufferCounter === 5) {\n      // Use the buffered value:\n      this.setReg(this.getRegNumber(address), this.regBuffer);\n\n      // Reset buffer:\n      this.regBuffer = 0;\n      this.regBufferCounter = 0;\n    }\n  }\n};\nMappers[1].prototype.setReg = function (reg, value) {\n  var tmp;\n  switch (reg) {\n    case 0:\n      // Mirroring:\n      tmp = value & 3;\n      if (tmp !== this.mirroring) {\n        // Set mirroring:\n        this.mirroring = tmp;\n        if ((this.mirroring & 2) === 0) {\n          // SingleScreen mirroring overrides the other setting:\n          this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n        } else if ((this.mirroring & 1) !== 0) {\n          // Not overridden by SingleScreen mirroring.\n          this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n        } else {\n          this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n        }\n      }\n\n      // PRG Switching Area;\n      this.prgSwitchingArea = value >> 2 & 1;\n\n      // PRG Switching Size:\n      this.prgSwitchingSize = value >> 3 & 1;\n\n      // VROM Switching Size:\n      this.vromSwitchingSize = value >> 4 & 1;\n      break;\n    case 1:\n      // ROM selection:\n      this.romSelectionReg0 = value >> 4 & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x0000:\n        if (this.vromSwitchingSize === 0) {\n          // Swap 8kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.load8kVromBank(value & 0xf, 0x0000);\n          } else {\n            this.load8kVromBank(Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf), 0x0000);\n          }\n        } else {\n          // Swap 4kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.loadVromBank(value & 0xf, 0x0000);\n          } else {\n            this.loadVromBank(Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf), 0x0000);\n          }\n        }\n      }\n      break;\n    case 2:\n      // ROM selection:\n      this.romSelectionReg1 = value >> 4 & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x1000:\n        if (this.vromSwitchingSize === 1) {\n          // Swap 4kB of VROM:\n          if (this.romSelectionReg1 === 0) {\n            this.loadVromBank(value & 0xf, 0x1000);\n          } else {\n            this.loadVromBank(Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf), 0x1000);\n          }\n        }\n      }\n      break;\n    default:\n      // Select ROM bank:\n      // -------------------------\n      tmp = value & 0xf;\n      var bank;\n      var baseBank = 0;\n      if (this.nes.rom.romCount >= 32) {\n        // 1024 kB cart\n        if (this.vromSwitchingSize === 0) {\n          if (this.romSelectionReg0 === 1) {\n            baseBank = 16;\n          }\n        } else {\n          baseBank = (this.romSelectionReg0 | this.romSelectionReg1 << 1) << 3;\n        }\n      } else if (this.nes.rom.romCount >= 16) {\n        // 512 kB cart\n        if (this.romSelectionReg0 === 1) {\n          baseBank = 8;\n        }\n      }\n      if (this.prgSwitchingSize === 0) {\n        // 32kB\n        bank = baseBank + (value & 0xf);\n        this.load32kRomBank(bank, 0x8000);\n      } else {\n        // 16kB\n        bank = baseBank * 2 + (value & 0xf);\n        if (this.prgSwitchingArea === 0) {\n          this.loadRomBank(bank, 0xc000);\n        } else {\n          this.loadRomBank(bank, 0x8000);\n        }\n      }\n  }\n};\n\n// Returns the register number from the address written to:\nMappers[1].prototype.getRegNumber = function (address) {\n  if (address >= 0x8000 && address <= 0x9fff) {\n    return 0;\n  } else if (address >= 0xa000 && address <= 0xbfff) {\n    return 1;\n  } else if (address >= 0xc000 && address <= 0xdfff) {\n    return 2;\n  } else {\n    return 3;\n  }\n};\nMappers[1].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC1: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000); //   First ROM bank..\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000); // ..and last ROM bank.\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n// eslint-disable-next-line no-unused-vars\nMappers[1].prototype.switchLowHighPrgRom = function (oldSetting) {\n  // not yet.\n};\nMappers[1].prototype.switch16to32 = function () {\n  // not yet.\n};\nMappers[1].prototype.switch32to16 = function () {\n  // not yet.\n};\nMappers[1].prototype.toJSON = function () {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.mirroring = this.mirroring;\n  s.oneScreenMirroring = this.oneScreenMirroring;\n  s.prgSwitchingArea = this.prgSwitchingArea;\n  s.prgSwitchingSize = this.prgSwitchingSize;\n  s.vromSwitchingSize = this.vromSwitchingSize;\n  s.romSelectionReg0 = this.romSelectionReg0;\n  s.romSelectionReg1 = this.romSelectionReg1;\n  s.romBankSelect = this.romBankSelect;\n  s.regBuffer = this.regBuffer;\n  s.regBufferCounter = this.regBufferCounter;\n  return s;\n};\nMappers[1].prototype.fromJSON = function (s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.mirroring = s.mirroring;\n  this.oneScreenMirroring = s.oneScreenMirroring;\n  this.prgSwitchingArea = s.prgSwitchingArea;\n  this.prgSwitchingSize = s.prgSwitchingSize;\n  this.vromSwitchingSize = s.vromSwitchingSize;\n  this.romSelectionReg0 = s.romSelectionReg0;\n  this.romSelectionReg1 = s.romSelectionReg1;\n  this.romBankSelect = s.romBankSelect;\n  this.regBuffer = s.regBuffer;\n  this.regBufferCounter = s.regBufferCounter;\n};\nMappers[2] = function (nes) {\n  this.nes = nes;\n};\nMappers[2].prototype = new Mappers[0]();\nMappers[2].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    this.loadRomBank(value, 0x8000);\n  }\n};\nMappers[2].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 003 (CNROM)\n *\n * @constructor\n * @example Solomon's Key, Arkanoid, Arkista's Ring, Bump 'n' Jump, Cybernoid\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_003\n */\nMappers[3] = function (nes) {\n  this.nes = nes;\n};\nMappers[3].prototype = new Mappers[0]();\nMappers[3].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    // This is a VROM bank select command.\n    // Swap in the given VROM bank at 0x0000:\n    var bank = value % (this.nes.rom.vromCount / 2) * 2;\n    this.loadVromBank(bank, 0x0000);\n    this.loadVromBank(bank + 1, 0x1000);\n    this.load8kVromBank(value * 2, 0x0000);\n  }\n};\nMappers[4] = function (nes) {\n  this.nes = nes;\n  this.CMD_SEL_2_1K_VROM_0000 = 0;\n  this.CMD_SEL_2_1K_VROM_0800 = 1;\n  this.CMD_SEL_1K_VROM_1000 = 2;\n  this.CMD_SEL_1K_VROM_1400 = 3;\n  this.CMD_SEL_1K_VROM_1800 = 4;\n  this.CMD_SEL_1K_VROM_1C00 = 5;\n  this.CMD_SEL_ROM_PAGE1 = 6;\n  this.CMD_SEL_ROM_PAGE2 = 7;\n  this.command = null;\n  this.prgAddressSelect = null;\n  this.chrAddressSelect = null;\n  this.pageNumber = null;\n  this.irqCounter = null;\n  this.irqLatchValue = null;\n  this.irqEnable = null;\n  this.prgAddressChanged = false;\n};\nMappers[4].prototype = new Mappers[0]();\nMappers[4].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n  switch (address) {\n    case 0x8000:\n      // Command/Address Select register\n      this.command = value & 7;\n      var tmp = value >> 6 & 1;\n      if (tmp !== this.prgAddressSelect) {\n        this.prgAddressChanged = true;\n      }\n      this.prgAddressSelect = tmp;\n      this.chrAddressSelect = value >> 7 & 1;\n      break;\n    case 0x8001:\n      // Page number for command\n      this.executeCommand(this.command, value);\n      break;\n    case 0xa000:\n      // Mirroring select\n      if ((value & 1) !== 0) {\n        this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n      } else {\n        this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n      }\n      break;\n    case 0xa001:\n      // SaveRAM Toggle\n      // TODO\n      //nes.getRom().setSaveState((value&1)!=0);\n      break;\n    case 0xc000:\n      // IRQ Counter register\n      this.irqCounter = value;\n      //nes.ppu.mapperIrqCounter = 0;\n      break;\n    case 0xc001:\n      // IRQ Latch register\n      this.irqLatchValue = value;\n      break;\n    case 0xe000:\n      // IRQ Control Reg 0 (disable)\n      //irqCounter = irqLatchValue;\n      this.irqEnable = 0;\n      break;\n    case 0xe001:\n      // IRQ Control Reg 1 (enable)\n      this.irqEnable = 1;\n      break;\n    default:\n    // Not a MMC3 register.\n    // The game has probably crashed,\n    // since it tries to write to ROM..\n    // IGNORE.\n  }\n};\nMappers[4].prototype.executeCommand = function (cmd, arg) {\n  switch (cmd) {\n    case this.CMD_SEL_2_1K_VROM_0000:\n      // Select 2 1KB VROM pages at 0x0000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0000);\n        this.load1kVromBank(arg + 1, 0x0400);\n      } else {\n        this.load1kVromBank(arg, 0x1000);\n        this.load1kVromBank(arg + 1, 0x1400);\n      }\n      break;\n    case this.CMD_SEL_2_1K_VROM_0800:\n      // Select 2 1KB VROM pages at 0x0800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0800);\n        this.load1kVromBank(arg + 1, 0x0c00);\n      } else {\n        this.load1kVromBank(arg, 0x1800);\n        this.load1kVromBank(arg + 1, 0x1c00);\n      }\n      break;\n    case this.CMD_SEL_1K_VROM_1000:\n      // Select 1K VROM Page at 0x1000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1000);\n      } else {\n        this.load1kVromBank(arg, 0x0000);\n      }\n      break;\n    case this.CMD_SEL_1K_VROM_1400:\n      // Select 1K VROM Page at 0x1400:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1400);\n      } else {\n        this.load1kVromBank(arg, 0x0400);\n      }\n      break;\n    case this.CMD_SEL_1K_VROM_1800:\n      // Select 1K VROM Page at 0x1800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1800);\n      } else {\n        this.load1kVromBank(arg, 0x0800);\n      }\n      break;\n    case this.CMD_SEL_1K_VROM_1C00:\n      // Select 1K VROM Page at 0x1C00:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1c00);\n      } else {\n        this.load1kVromBank(arg, 0x0c00);\n      }\n      break;\n    case this.CMD_SEL_ROM_PAGE1:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n\n      // Select first switchable ROM page:\n      if (this.prgAddressSelect === 0) {\n        this.load8kRomBank(arg, 0x8000);\n      } else {\n        this.load8kRomBank(arg, 0xc000);\n      }\n      break;\n    case this.CMD_SEL_ROM_PAGE2:\n      // Select second switchable ROM page:\n      this.load8kRomBank(arg, 0xa000);\n\n      // hardwire appropriate bank:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n  }\n};\nMappers[4].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC3: Invalid ROM! Unable to load.\");\n  }\n\n  // Load hardwired PRG banks (0xC000 and 0xE000):\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2 + 1, 0xe000);\n\n  // Load swappable PRG banks (0x8000 and 0xA000):\n  this.load8kRomBank(0, 0x8000);\n  this.load8kRomBank(1, 0xa000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\nMappers[4].prototype.clockIrqCounter = function () {\n  if (this.irqEnable === 1) {\n    this.irqCounter--;\n    if (this.irqCounter < 0) {\n      // Trigger IRQ:\n      //nes.getCpu().doIrq();\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n      this.irqCounter = this.irqLatchValue;\n    }\n  }\n};\nMappers[4].prototype.toJSON = function () {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.command = this.command;\n  s.prgAddressSelect = this.prgAddressSelect;\n  s.chrAddressSelect = this.chrAddressSelect;\n  s.pageNumber = this.pageNumber;\n  s.irqCounter = this.irqCounter;\n  s.irqLatchValue = this.irqLatchValue;\n  s.irqEnable = this.irqEnable;\n  s.prgAddressChanged = this.prgAddressChanged;\n  return s;\n};\nMappers[4].prototype.fromJSON = function (s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.command = s.command;\n  this.prgAddressSelect = s.prgAddressSelect;\n  this.chrAddressSelect = s.chrAddressSelect;\n  this.pageNumber = s.pageNumber;\n  this.irqCounter = s.irqCounter;\n  this.irqLatchValue = s.irqLatchValue;\n  this.irqEnable = s.irqEnable;\n  this.prgAddressChanged = s.prgAddressChanged;\n};\n\n/**\n * Mapper005 (MMC5,ExROM)\n *\n * @example Castlevania 3, Just Breed, Uncharted Waters, Romance of the 3 Kingdoms 2, Laser Invasion, Metal Slader Glory, Uchuu Keibitai SDF, Shin 4 Nin Uchi Mahjong - Yakuman Tengoku\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_005\n * @constructor\n */\nMappers[5] = function (nes) {\n  this.nes = nes;\n};\nMappers[5].prototype = new Mappers[0]();\nMappers[5].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load8kVromBank(value, 0x0000);\n  }\n};\nMappers[5].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x5000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n  switch (address) {\n    case 0x5100:\n      this.prg_size = value & 3;\n      break;\n    case 0x5101:\n      this.chr_size = value & 3;\n      break;\n    case 0x5102:\n      this.sram_we_a = value & 3;\n      break;\n    case 0x5103:\n      this.sram_we_b = value & 3;\n      break;\n    case 0x5104:\n      this.graphic_mode = value & 3;\n      break;\n    case 0x5105:\n      this.nametable_mode = value;\n      this.nametable_type[0] = value & 3;\n      this.load1kVromBank(value & 3, 0x2000);\n      value >>= 2;\n      this.nametable_type[1] = value & 3;\n      this.load1kVromBank(value & 3, 0x2400);\n      value >>= 2;\n      this.nametable_type[2] = value & 3;\n      this.load1kVromBank(value & 3, 0x2800);\n      value >>= 2;\n      this.nametable_type[3] = value & 3;\n      this.load1kVromBank(value & 3, 0x2c00);\n      break;\n    case 0x5106:\n      this.fill_chr = value;\n      break;\n    case 0x5107:\n      this.fill_pal = value & 3;\n      break;\n    case 0x5113:\n      this.SetBank_SRAM(3, value & 3);\n      break;\n    case 0x5114:\n    case 0x5115:\n    case 0x5116:\n    case 0x5117:\n      this.SetBank_CPU(address, value);\n      break;\n    case 0x5120:\n    case 0x5121:\n    case 0x5122:\n    case 0x5123:\n    case 0x5124:\n    case 0x5125:\n    case 0x5126:\n    case 0x5127:\n      this.chr_mode = 0;\n      this.chr_page[0][address & 7] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5128:\n    case 0x5129:\n    case 0x512a:\n    case 0x512b:\n      this.chr_mode = 1;\n      this.chr_page[1][(address & 3) + 0] = value;\n      this.chr_page[1][(address & 3) + 4] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5200:\n      this.split_control = value;\n      break;\n    case 0x5201:\n      this.split_scroll = value;\n      break;\n    case 0x5202:\n      this.split_page = value & 0x3f;\n      break;\n    case 0x5203:\n      this.irq_line = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5204:\n      this.irq_enable = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5205:\n      this.mult_a = value;\n      break;\n    case 0x5206:\n      this.mult_b = value;\n      break;\n    default:\n      if (address >= 0x5000 && address <= 0x5015) {\n        this.nes.papu.exWrite(address, value);\n      } else if (address >= 0x5c00 && address <= 0x5fff) {\n        if (this.graphic_mode === 2) {\n          // ExRAM\n          // vram write\n        } else if (this.graphic_mode !== 3) {\n          // Split,ExGraphic\n          if (this.irq_status & 0x40) {\n            // vram write\n          } else {\n            // vram write\n          }\n        }\n      } else if (address >= 0x6000 && address <= 0x7fff) {\n        if (this.sram_we_a === 2 && this.sram_we_b === 1) {\n          // additional ram write\n        }\n      }\n      break;\n  }\n};\nMappers[5].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0x8000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xa000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xc000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xe000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper007 (AxROM)\n * @example Battletoads, Time Lord, Marble Madness\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_007\n * @constructor\n */\nMappers[7] = function (nes) {\n  this.nes = nes;\n};\nMappers[7].prototype = new Mappers[0]();\nMappers[7].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load32kRomBank(value & 0x7, 0x8000);\n    if (value & 0x10) {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING2);\n    } else {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n    }\n  }\n};\nMappers[7].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"AOROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadPRGROM();\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 011 (Color Dreams)\n *\n * @description http://wiki.nesdev.com/w/index.php/Color_Dreams\n * @example Crystal Mines, Metal Fighter\n * @constructor\n */\nMappers[11] = function (nes) {\n  this.nes = nes;\n};\nMappers[11].prototype = new Mappers[0]();\nMappers[11].prototype.write = function (address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank:\n    var prgbank1 = (value & 0xf) * 2 % this.nes.rom.romCount;\n    var prgbank2 = ((value & 0xf) * 2 + 1) % this.nes.rom.romCount;\n    this.loadRomBank(prgbank1, 0x8000);\n    this.loadRomBank(prgbank2, 0xc000);\n    if (this.nes.rom.vromCount > 0) {\n      // Swap in the given VROM bank at 0x0000:\n      var bank = (value >> 4) * 2 % this.nes.rom.vromCount;\n      this.loadVromBank(bank, 0x0000);\n      this.loadVromBank(bank + 1, 0x1000);\n    }\n  }\n};\n\n/**\n * Mapper 034 (BNROM, NINA-01)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_034\n * @example Darkseed, Mashou, Mission Impossible 2\n * @constructor\n */\nMappers[34] = function (nes) {\n  this.nes = nes;\n};\nMappers[34].prototype = new Mappers[0]();\nMappers[34].prototype.write = function (address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    this.load32kRomBank(value, 0x8000);\n  }\n};\n\n/**\n * Mapper 038\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_038\n * @example Crime Busters\n * @constructor\n */\nMappers[38] = function (nes) {\n  this.nes = nes;\n};\nMappers[38].prototype = new Mappers[0]();\nMappers[38].prototype.write = function (address, value) {\n  if (address < 0x7000 || address > 0x7fff) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank(value & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value >> 2 & 3) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 066 (GxROM)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_066\n * @example Doraemon, Dragon Power, Gumshoe, Thunder & Lightning,\n * Super Mario Bros. + Duck Hunt\n * @constructor\n */\nMappers[66] = function (nes) {\n  this.nes = nes;\n};\nMappers[66].prototype = new Mappers[0]();\nMappers[66].prototype.write = function (address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank(value >> 4 & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value & 3) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 094 (UN1ROM)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_094\n * @example Senjou no Ookami\n * @constructor\n */\nMappers[94] = function (nes) {\n  this.nes = nes;\n};\nMappers[94].prototype = new Mappers[0]();\nMappers[94].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    this.loadRomBank(value >> 2, 0x8000);\n  }\n};\nMappers[94].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UN1ROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 140\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_140\n * @example Bio Senshi Dan - Increaser Tono Tatakai\n * @constructor\n */\nMappers[140] = function (nes) {\n  this.nes = nes;\n};\nMappers[140].prototype = new Mappers[0]();\nMappers[140].prototype.write = function (address, value) {\n  if (address < 0x6000 || address > 0x7fff) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank(value >> 4 & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value & 0xf) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 180\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_180\n * @example Crazy Climber\n * @constructor\n */\nMappers[180] = function (nes) {\n  this.nes = nes;\n};\nMappers[180].prototype = new Mappers[0]();\nMappers[180].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0xc000:\n    this.loadRomBank(value, 0xc000);\n  }\n};\nMappers[180].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"Mapper 180: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\nmodule.exports = Mappers;","map":{"version":3,"names":["utils","require","Mappers","nes","prototype","reset","joy1StrobeState","joy2StrobeState","joypadLastWrite","zapperFired","zapperX","zapperY","write","address","value","cpu","mem","opts","onBatteryRamWrite","regWrite","writelow","load","regLoad","ppu","readStatusRegister","sramLoad","vramLoad","papu","readReg","joy1Read","w","isPixelWhite","joy2Read","updateControlReg1","updateControlReg2","writeSRAMAddress","sramWrite","scrollWrite","writeVRAMAddress","vramWrite","sramDMA","writeReg","ret","controllers","state","loadROM","rom","valid","romCount","Error","loadPRGROM","loadCHRROM","loadBatteryRam","requestIrq","IRQ_RESET","loadRomBank","vromCount","loadVromBank","batteryRam","ram","length","copyArrayElements","bank","triggerRendering","vrom","vramMem","vromTile","ptTile","load32kRomBank","load8kVromBank","bank4kStart","load1kVromBank","bank1k","bank4k","Math","floor","bankoffset","baseIndex","i","load2kVromBank","bank2k","load8kRomBank","bank8k","bank16k","offset","clockIrqCounter","latchAccess","toJSON","fromJSON","s","apply","regBuffer","regBufferCounter","mirroring","oneScreenMirroring","prgSwitchingArea","prgSwitchingSize","vromSwitchingSize","romSelectionReg0","romSelectionReg1","romBankSelect","arguments","getRegNumber","setReg","reg","tmp","setMirroring","SINGLESCREEN_MIRRORING","HORIZONTAL_MIRRORING","VERTICAL_MIRRORING","baseBank","switchLowHighPrgRom","oldSetting","switch16to32","switch32to16","CMD_SEL_2_1K_VROM_0000","CMD_SEL_2_1K_VROM_0800","CMD_SEL_1K_VROM_1000","CMD_SEL_1K_VROM_1400","CMD_SEL_1K_VROM_1800","CMD_SEL_1K_VROM_1C00","CMD_SEL_ROM_PAGE1","CMD_SEL_ROM_PAGE2","command","prgAddressSelect","chrAddressSelect","pageNumber","irqCounter","irqLatchValue","irqEnable","prgAddressChanged","executeCommand","cmd","arg","IRQ_NORMAL","prg_size","chr_size","sram_we_a","sram_we_b","graphic_mode","nametable_mode","nametable_type","fill_chr","fill_pal","SetBank_SRAM","SetBank_CPU","chr_mode","chr_page","SetBank_PPU","split_control","split_scroll","split_page","irq_line","ClearIRQ","irq_enable","mult_a","mult_b","exWrite","irq_status","SINGLESCREEN_MIRRORING2","prgbank1","prgbank2","module","exports"],"sources":["/Users/zakariaalmardaee/csfolder/vintage-game-emulator/frontend/node_modules/jsnes/src/mappers.js"],"sourcesContent":["var utils = require(\"./utils\");\n\nvar Mappers = {};\n\nMappers[0] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[0].prototype = {\n  reset: function () {\n    this.joy1StrobeState = 0;\n    this.joy2StrobeState = 0;\n    this.joypadLastWrite = 0;\n\n    this.zapperFired = false;\n    this.zapperX = null;\n    this.zapperY = null;\n  },\n\n  write: function (address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n      if (address >= 0x6000 && address < 0x8000) {\n        // Write to persistent RAM\n        this.nes.opts.onBatteryRamWrite(address, value);\n      }\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n\n  writelow: function (address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n\n  load: function (address) {\n    // Wrap around:\n    address &= 0xffff;\n\n    // Check address range:\n    if (address > 0x4017) {\n      // ROM:\n      return this.nes.cpu.mem[address];\n    } else if (address >= 0x2000) {\n      // I/O Ports.\n      return this.regLoad(address);\n    } else {\n      // RAM (mirrored)\n      return this.nes.cpu.mem[address & 0x7ff];\n    }\n  },\n\n  regLoad: function (address) {\n    switch (\n      address >> 12 // use fourth nibble (0xF000)\n    ) {\n      case 0:\n        break;\n\n      case 1:\n        break;\n\n      case 2:\n      // Fall through to case 3\n      case 3:\n        // PPU Registers\n        switch (address & 0x7) {\n          case 0x0:\n            // 0x2000:\n            // PPU Control Register 1.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2000];\n\n          case 0x1:\n            // 0x2001:\n            // PPU Control Register 2.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2001];\n\n          case 0x2:\n            // 0x2002:\n            // PPU Status Register.\n            // The value is stored in\n            // main memory in addition\n            // to as flags in the PPU.\n            // (not in the real NES)\n            return this.nes.ppu.readStatusRegister();\n\n          case 0x3:\n            return 0;\n\n          case 0x4:\n            // 0x2004:\n            // Sprite Memory read.\n            return this.nes.ppu.sramLoad();\n          case 0x5:\n            return 0;\n\n          case 0x6:\n            return 0;\n\n          case 0x7:\n            // 0x2007:\n            // VRAM read:\n            return this.nes.ppu.vramLoad();\n        }\n        break;\n      case 4:\n        // Sound+Joypad registers\n        switch (address - 0x4015) {\n          case 0:\n            // 0x4015:\n            // Sound channel enable, DMC Status\n            return this.nes.papu.readReg(address);\n\n          case 1:\n            // 0x4016:\n            // Joystick 1 + Strobe\n            return this.joy1Read();\n\n          case 2:\n            // 0x4017:\n            // Joystick 2 + Strobe\n            // https://wiki.nesdev.com/w/index.php/Zapper\n            var w;\n\n            if (\n              this.zapperX !== null &&\n              this.zapperY !== null &&\n              this.nes.ppu.isPixelWhite(this.zapperX, this.zapperY)\n            ) {\n              w = 0;\n            } else {\n              w = 0x1 << 3;\n            }\n\n            if (this.zapperFired) {\n              w |= 0x1 << 4;\n            }\n            return (this.joy2Read() | w) & 0xffff;\n        }\n        break;\n    }\n    return 0;\n  },\n\n  regWrite: function (address, value) {\n    switch (address) {\n      case 0x2000:\n        // PPU Control register 1\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg1(value);\n        break;\n\n      case 0x2001:\n        // PPU Control register 2\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg2(value);\n        break;\n\n      case 0x2003:\n        // Set Sprite RAM address:\n        this.nes.ppu.writeSRAMAddress(value);\n        break;\n\n      case 0x2004:\n        // Write to Sprite RAM:\n        this.nes.ppu.sramWrite(value);\n        break;\n\n      case 0x2005:\n        // Screen Scroll offsets:\n        this.nes.ppu.scrollWrite(value);\n        break;\n\n      case 0x2006:\n        // Set VRAM address:\n        this.nes.ppu.writeVRAMAddress(value);\n        break;\n\n      case 0x2007:\n        // Write to VRAM:\n        this.nes.ppu.vramWrite(value);\n        break;\n\n      case 0x4014:\n        // Sprite Memory DMA Access\n        this.nes.ppu.sramDMA(value);\n        break;\n\n      case 0x4015:\n        // Sound Channel Switch, DMC Status\n        this.nes.papu.writeReg(address, value);\n        break;\n\n      case 0x4016:\n        // Joystick 1 + Strobe\n        if ((value & 1) === 0 && (this.joypadLastWrite & 1) === 1) {\n          this.joy1StrobeState = 0;\n          this.joy2StrobeState = 0;\n        }\n        this.joypadLastWrite = value;\n        break;\n\n      case 0x4017:\n        // Sound channel frame sequencer:\n        this.nes.papu.writeReg(address, value);\n        break;\n\n      default:\n        // Sound registers\n        // console.log(\"write to sound reg\");\n        if (address >= 0x4000 && address <= 0x4017) {\n          this.nes.papu.writeReg(address, value);\n        }\n    }\n  },\n\n  joy1Read: function () {\n    var ret;\n\n    switch (this.joy1StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[1].state[this.joy1StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n\n    this.joy1StrobeState++;\n    if (this.joy1StrobeState === 24) {\n      this.joy1StrobeState = 0;\n    }\n\n    return ret;\n  },\n\n  joy2Read: function () {\n    var ret;\n\n    switch (this.joy2StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[2].state[this.joy2StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n\n    this.joy2StrobeState++;\n    if (this.joy2StrobeState === 24) {\n      this.joy2StrobeState = 0;\n    }\n\n    return ret;\n  },\n\n  loadROM: function () {\n    if (!this.nes.rom.valid || this.nes.rom.romCount < 1) {\n      throw new Error(\"NoMapper: Invalid ROM! Unable to load.\");\n    }\n\n    // Load ROM into memory:\n    this.loadPRGROM();\n\n    // Load CHR-ROM:\n    this.loadCHRROM();\n\n    // Load Battery RAM (if present):\n    this.loadBatteryRam();\n\n    // Reset IRQ:\n    //nes.getCpu().doResetInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n  },\n\n  loadPRGROM: function () {\n    if (this.nes.rom.romCount > 1) {\n      // Load the two first banks into memory.\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(1, 0xc000);\n    } else {\n      // Load the one bank into both memory locations:\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(0, 0xc000);\n    }\n  },\n\n  loadCHRROM: function () {\n    // console.log(\"Loading CHR ROM..\");\n    if (this.nes.rom.vromCount > 0) {\n      if (this.nes.rom.vromCount === 1) {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(0, 0x1000);\n      } else {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(1, 0x1000);\n      }\n    } else {\n      //System.out.println(\"There aren't any CHR-ROM banks..\");\n    }\n  },\n\n  loadBatteryRam: function () {\n    if (this.nes.rom.batteryRam) {\n      var ram = this.nes.rom.batteryRam;\n      if (ram !== null && ram.length === 0x2000) {\n        // Load Battery RAM into memory:\n        utils.copyArrayElements(ram, 0, this.nes.cpu.mem, 0x6000, 0x2000);\n      }\n    }\n  },\n\n  loadRomBank: function (bank, address) {\n    // Loads a ROM bank into the specified address.\n    bank %= this.nes.rom.romCount;\n    //var data = this.nes.rom.rom[bank];\n    //cpuMem.write(address,data,data.length);\n    utils.copyArrayElements(\n      this.nes.rom.rom[bank],\n      0,\n      this.nes.cpu.mem,\n      address,\n      16384\n    );\n  },\n\n  loadVromBank: function (bank, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank % this.nes.rom.vromCount],\n      0,\n      this.nes.ppu.vramMem,\n      address,\n      4096\n    );\n\n    var vromTile = this.nes.rom.vromTile[bank % this.nes.rom.vromCount];\n    utils.copyArrayElements(\n      vromTile,\n      0,\n      this.nes.ppu.ptTile,\n      address >> 4,\n      256\n    );\n  },\n\n  load32kRomBank: function (bank, address) {\n    this.loadRomBank((bank * 2) % this.nes.rom.romCount, address);\n    this.loadRomBank((bank * 2 + 1) % this.nes.rom.romCount, address + 16384);\n  },\n\n  load8kVromBank: function (bank4kStart, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    this.loadVromBank(bank4kStart % this.nes.rom.vromCount, address);\n    this.loadVromBank(\n      (bank4kStart + 1) % this.nes.rom.vromCount,\n      address + 4096\n    );\n  },\n\n  load1kVromBank: function (bank1k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    var bank4k = Math.floor(bank1k / 4) % this.nes.rom.vromCount;\n    var bankoffset = (bank1k % 4) * 1024;\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank4k],\n      bankoffset,\n      this.nes.ppu.vramMem,\n      address,\n      1024\n    );\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 64; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank1k % 4 << 6) + i];\n    }\n  },\n\n  load2kVromBank: function (bank2k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    var bank4k = Math.floor(bank2k / 2) % this.nes.rom.vromCount;\n    var bankoffset = (bank2k % 2) * 2048;\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank4k],\n      bankoffset,\n      this.nes.ppu.vramMem,\n      address,\n      2048\n    );\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 128; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank2k % 2 << 7) + i];\n    }\n  },\n\n  load8kRomBank: function (bank8k, address) {\n    var bank16k = Math.floor(bank8k / 2) % this.nes.rom.romCount;\n    var offset = (bank8k % 2) * 8192;\n\n    //this.nes.cpu.mem.write(address,this.nes.rom.rom[bank16k],offset,8192);\n    utils.copyArrayElements(\n      this.nes.rom.rom[bank16k],\n      offset,\n      this.nes.cpu.mem,\n      address,\n      8192\n    );\n  },\n\n  clockIrqCounter: function () {\n    // Does nothing. This is used by the MMC3 mapper.\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  latchAccess: function (address) {\n    // Does nothing. This is used by MMC2.\n  },\n\n  toJSON: function () {\n    return {\n      joy1StrobeState: this.joy1StrobeState,\n      joy2StrobeState: this.joy2StrobeState,\n      joypadLastWrite: this.joypadLastWrite,\n    };\n  },\n\n  fromJSON: function (s) {\n    this.joy1StrobeState = s.joy1StrobeState;\n    this.joy2StrobeState = s.joy2StrobeState;\n    this.joypadLastWrite = s.joypadLastWrite;\n  },\n};\n\nMappers[1] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[1].prototype = new Mappers[0]();\n\nMappers[1].prototype.reset = function () {\n  Mappers[0].prototype.reset.apply(this);\n\n  // 5-bit buffer:\n  this.regBuffer = 0;\n  this.regBufferCounter = 0;\n\n  // Register 0:\n  this.mirroring = 0;\n  this.oneScreenMirroring = 0;\n  this.prgSwitchingArea = 1;\n  this.prgSwitchingSize = 1;\n  this.vromSwitchingSize = 0;\n\n  // Register 1:\n  this.romSelectionReg0 = 0;\n\n  // Register 2:\n  this.romSelectionReg1 = 0;\n\n  // Register 3:\n  this.romBankSelect = 0;\n};\n\nMappers[1].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  // See what should be done with the written value:\n  if ((value & 128) !== 0) {\n    // Reset buffering:\n    this.regBufferCounter = 0;\n    this.regBuffer = 0;\n\n    // Reset register:\n    if (this.getRegNumber(address) === 0) {\n      this.prgSwitchingArea = 1;\n      this.prgSwitchingSize = 1;\n    }\n  } else {\n    // Continue buffering:\n    //regBuffer = (regBuffer & (0xFF-(1<<regBufferCounter))) | ((value & (1<<regBufferCounter))<<regBufferCounter);\n    this.regBuffer =\n      (this.regBuffer & (0xff - (1 << this.regBufferCounter))) |\n      ((value & 1) << this.regBufferCounter);\n    this.regBufferCounter++;\n\n    if (this.regBufferCounter === 5) {\n      // Use the buffered value:\n      this.setReg(this.getRegNumber(address), this.regBuffer);\n\n      // Reset buffer:\n      this.regBuffer = 0;\n      this.regBufferCounter = 0;\n    }\n  }\n};\n\nMappers[1].prototype.setReg = function (reg, value) {\n  var tmp;\n\n  switch (reg) {\n    case 0:\n      // Mirroring:\n      tmp = value & 3;\n      if (tmp !== this.mirroring) {\n        // Set mirroring:\n        this.mirroring = tmp;\n        if ((this.mirroring & 2) === 0) {\n          // SingleScreen mirroring overrides the other setting:\n          this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n        } else if ((this.mirroring & 1) !== 0) {\n          // Not overridden by SingleScreen mirroring.\n          this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n        } else {\n          this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n        }\n      }\n\n      // PRG Switching Area;\n      this.prgSwitchingArea = (value >> 2) & 1;\n\n      // PRG Switching Size:\n      this.prgSwitchingSize = (value >> 3) & 1;\n\n      // VROM Switching Size:\n      this.vromSwitchingSize = (value >> 4) & 1;\n\n      break;\n\n    case 1:\n      // ROM selection:\n      this.romSelectionReg0 = (value >> 4) & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x0000:\n        if (this.vromSwitchingSize === 0) {\n          // Swap 8kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.load8kVromBank(value & 0xf, 0x0000);\n          } else {\n            this.load8kVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x0000\n            );\n          }\n        } else {\n          // Swap 4kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.loadVromBank(value & 0xf, 0x0000);\n          } else {\n            this.loadVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x0000\n            );\n          }\n        }\n      }\n\n      break;\n\n    case 2:\n      // ROM selection:\n      this.romSelectionReg1 = (value >> 4) & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x1000:\n        if (this.vromSwitchingSize === 1) {\n          // Swap 4kB of VROM:\n          if (this.romSelectionReg1 === 0) {\n            this.loadVromBank(value & 0xf, 0x1000);\n          } else {\n            this.loadVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x1000\n            );\n          }\n        }\n      }\n      break;\n\n    default:\n      // Select ROM bank:\n      // -------------------------\n      tmp = value & 0xf;\n      var bank;\n      var baseBank = 0;\n\n      if (this.nes.rom.romCount >= 32) {\n        // 1024 kB cart\n        if (this.vromSwitchingSize === 0) {\n          if (this.romSelectionReg0 === 1) {\n            baseBank = 16;\n          }\n        } else {\n          baseBank =\n            (this.romSelectionReg0 | (this.romSelectionReg1 << 1)) << 3;\n        }\n      } else if (this.nes.rom.romCount >= 16) {\n        // 512 kB cart\n        if (this.romSelectionReg0 === 1) {\n          baseBank = 8;\n        }\n      }\n\n      if (this.prgSwitchingSize === 0) {\n        // 32kB\n        bank = baseBank + (value & 0xf);\n        this.load32kRomBank(bank, 0x8000);\n      } else {\n        // 16kB\n        bank = baseBank * 2 + (value & 0xf);\n        if (this.prgSwitchingArea === 0) {\n          this.loadRomBank(bank, 0xc000);\n        } else {\n          this.loadRomBank(bank, 0x8000);\n        }\n      }\n  }\n};\n\n// Returns the register number from the address written to:\nMappers[1].prototype.getRegNumber = function (address) {\n  if (address >= 0x8000 && address <= 0x9fff) {\n    return 0;\n  } else if (address >= 0xa000 && address <= 0xbfff) {\n    return 1;\n  } else if (address >= 0xc000 && address <= 0xdfff) {\n    return 2;\n  } else {\n    return 3;\n  }\n};\n\nMappers[1].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC1: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000); //   First ROM bank..\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000); // ..and last ROM bank.\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n// eslint-disable-next-line no-unused-vars\nMappers[1].prototype.switchLowHighPrgRom = function (oldSetting) {\n  // not yet.\n};\n\nMappers[1].prototype.switch16to32 = function () {\n  // not yet.\n};\n\nMappers[1].prototype.switch32to16 = function () {\n  // not yet.\n};\n\nMappers[1].prototype.toJSON = function () {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.mirroring = this.mirroring;\n  s.oneScreenMirroring = this.oneScreenMirroring;\n  s.prgSwitchingArea = this.prgSwitchingArea;\n  s.prgSwitchingSize = this.prgSwitchingSize;\n  s.vromSwitchingSize = this.vromSwitchingSize;\n  s.romSelectionReg0 = this.romSelectionReg0;\n  s.romSelectionReg1 = this.romSelectionReg1;\n  s.romBankSelect = this.romBankSelect;\n  s.regBuffer = this.regBuffer;\n  s.regBufferCounter = this.regBufferCounter;\n  return s;\n};\n\nMappers[1].prototype.fromJSON = function (s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.mirroring = s.mirroring;\n  this.oneScreenMirroring = s.oneScreenMirroring;\n  this.prgSwitchingArea = s.prgSwitchingArea;\n  this.prgSwitchingSize = s.prgSwitchingSize;\n  this.vromSwitchingSize = s.vromSwitchingSize;\n  this.romSelectionReg0 = s.romSelectionReg0;\n  this.romSelectionReg1 = s.romSelectionReg1;\n  this.romBankSelect = s.romBankSelect;\n  this.regBuffer = s.regBuffer;\n  this.regBufferCounter = s.regBufferCounter;\n};\n\nMappers[2] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[2].prototype = new Mappers[0]();\n\nMappers[2].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    this.loadRomBank(value, 0x8000);\n  }\n};\n\nMappers[2].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 003 (CNROM)\n *\n * @constructor\n * @example Solomon's Key, Arkanoid, Arkista's Ring, Bump 'n' Jump, Cybernoid\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_003\n */\nMappers[3] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[3].prototype = new Mappers[0]();\n\nMappers[3].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    // This is a VROM bank select command.\n    // Swap in the given VROM bank at 0x0000:\n    var bank = (value % (this.nes.rom.vromCount / 2)) * 2;\n    this.loadVromBank(bank, 0x0000);\n    this.loadVromBank(bank + 1, 0x1000);\n    this.load8kVromBank(value * 2, 0x0000);\n  }\n};\n\nMappers[4] = function (nes) {\n  this.nes = nes;\n\n  this.CMD_SEL_2_1K_VROM_0000 = 0;\n  this.CMD_SEL_2_1K_VROM_0800 = 1;\n  this.CMD_SEL_1K_VROM_1000 = 2;\n  this.CMD_SEL_1K_VROM_1400 = 3;\n  this.CMD_SEL_1K_VROM_1800 = 4;\n  this.CMD_SEL_1K_VROM_1C00 = 5;\n  this.CMD_SEL_ROM_PAGE1 = 6;\n  this.CMD_SEL_ROM_PAGE2 = 7;\n\n  this.command = null;\n  this.prgAddressSelect = null;\n  this.chrAddressSelect = null;\n  this.pageNumber = null;\n  this.irqCounter = null;\n  this.irqLatchValue = null;\n  this.irqEnable = null;\n  this.prgAddressChanged = false;\n};\n\nMappers[4].prototype = new Mappers[0]();\n\nMappers[4].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  switch (address) {\n    case 0x8000:\n      // Command/Address Select register\n      this.command = value & 7;\n      var tmp = (value >> 6) & 1;\n      if (tmp !== this.prgAddressSelect) {\n        this.prgAddressChanged = true;\n      }\n      this.prgAddressSelect = tmp;\n      this.chrAddressSelect = (value >> 7) & 1;\n      break;\n\n    case 0x8001:\n      // Page number for command\n      this.executeCommand(this.command, value);\n      break;\n\n    case 0xa000:\n      // Mirroring select\n      if ((value & 1) !== 0) {\n        this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n      } else {\n        this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n      }\n      break;\n\n    case 0xa001:\n      // SaveRAM Toggle\n      // TODO\n      //nes.getRom().setSaveState((value&1)!=0);\n      break;\n\n    case 0xc000:\n      // IRQ Counter register\n      this.irqCounter = value;\n      //nes.ppu.mapperIrqCounter = 0;\n      break;\n\n    case 0xc001:\n      // IRQ Latch register\n      this.irqLatchValue = value;\n      break;\n\n    case 0xe000:\n      // IRQ Control Reg 0 (disable)\n      //irqCounter = irqLatchValue;\n      this.irqEnable = 0;\n      break;\n\n    case 0xe001:\n      // IRQ Control Reg 1 (enable)\n      this.irqEnable = 1;\n      break;\n\n    default:\n    // Not a MMC3 register.\n    // The game has probably crashed,\n    // since it tries to write to ROM..\n    // IGNORE.\n  }\n};\n\nMappers[4].prototype.executeCommand = function (cmd, arg) {\n  switch (cmd) {\n    case this.CMD_SEL_2_1K_VROM_0000:\n      // Select 2 1KB VROM pages at 0x0000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0000);\n        this.load1kVromBank(arg + 1, 0x0400);\n      } else {\n        this.load1kVromBank(arg, 0x1000);\n        this.load1kVromBank(arg + 1, 0x1400);\n      }\n      break;\n\n    case this.CMD_SEL_2_1K_VROM_0800:\n      // Select 2 1KB VROM pages at 0x0800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0800);\n        this.load1kVromBank(arg + 1, 0x0c00);\n      } else {\n        this.load1kVromBank(arg, 0x1800);\n        this.load1kVromBank(arg + 1, 0x1c00);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1000:\n      // Select 1K VROM Page at 0x1000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1000);\n      } else {\n        this.load1kVromBank(arg, 0x0000);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1400:\n      // Select 1K VROM Page at 0x1400:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1400);\n      } else {\n        this.load1kVromBank(arg, 0x0400);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1800:\n      // Select 1K VROM Page at 0x1800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1800);\n      } else {\n        this.load1kVromBank(arg, 0x0800);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1C00:\n      // Select 1K VROM Page at 0x1C00:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1c00);\n      } else {\n        this.load1kVromBank(arg, 0x0c00);\n      }\n      break;\n\n    case this.CMD_SEL_ROM_PAGE1:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n\n      // Select first switchable ROM page:\n      if (this.prgAddressSelect === 0) {\n        this.load8kRomBank(arg, 0x8000);\n      } else {\n        this.load8kRomBank(arg, 0xc000);\n      }\n      break;\n\n    case this.CMD_SEL_ROM_PAGE2:\n      // Select second switchable ROM page:\n      this.load8kRomBank(arg, 0xa000);\n\n      // hardwire appropriate bank:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n  }\n};\n\nMappers[4].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC3: Invalid ROM! Unable to load.\");\n  }\n\n  // Load hardwired PRG banks (0xC000 and 0xE000):\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2 + 1, 0xe000);\n\n  // Load swappable PRG banks (0x8000 and 0xA000):\n  this.load8kRomBank(0, 0x8000);\n  this.load8kRomBank(1, 0xa000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\nMappers[4].prototype.clockIrqCounter = function () {\n  if (this.irqEnable === 1) {\n    this.irqCounter--;\n    if (this.irqCounter < 0) {\n      // Trigger IRQ:\n      //nes.getCpu().doIrq();\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n      this.irqCounter = this.irqLatchValue;\n    }\n  }\n};\n\nMappers[4].prototype.toJSON = function () {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.command = this.command;\n  s.prgAddressSelect = this.prgAddressSelect;\n  s.chrAddressSelect = this.chrAddressSelect;\n  s.pageNumber = this.pageNumber;\n  s.irqCounter = this.irqCounter;\n  s.irqLatchValue = this.irqLatchValue;\n  s.irqEnable = this.irqEnable;\n  s.prgAddressChanged = this.prgAddressChanged;\n  return s;\n};\n\nMappers[4].prototype.fromJSON = function (s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.command = s.command;\n  this.prgAddressSelect = s.prgAddressSelect;\n  this.chrAddressSelect = s.chrAddressSelect;\n  this.pageNumber = s.pageNumber;\n  this.irqCounter = s.irqCounter;\n  this.irqLatchValue = s.irqLatchValue;\n  this.irqEnable = s.irqEnable;\n  this.prgAddressChanged = s.prgAddressChanged;\n};\n\n/**\n * Mapper005 (MMC5,ExROM)\n *\n * @example Castlevania 3, Just Breed, Uncharted Waters, Romance of the 3 Kingdoms 2, Laser Invasion, Metal Slader Glory, Uchuu Keibitai SDF, Shin 4 Nin Uchi Mahjong - Yakuman Tengoku\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_005\n * @constructor\n */\nMappers[5] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[5].prototype = new Mappers[0]();\n\nMappers[5].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load8kVromBank(value, 0x0000);\n  }\n};\n\nMappers[5].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x5000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  switch (address) {\n    case 0x5100:\n      this.prg_size = value & 3;\n      break;\n    case 0x5101:\n      this.chr_size = value & 3;\n      break;\n    case 0x5102:\n      this.sram_we_a = value & 3;\n      break;\n    case 0x5103:\n      this.sram_we_b = value & 3;\n      break;\n    case 0x5104:\n      this.graphic_mode = value & 3;\n      break;\n    case 0x5105:\n      this.nametable_mode = value;\n      this.nametable_type[0] = value & 3;\n      this.load1kVromBank(value & 3, 0x2000);\n      value >>= 2;\n      this.nametable_type[1] = value & 3;\n      this.load1kVromBank(value & 3, 0x2400);\n      value >>= 2;\n      this.nametable_type[2] = value & 3;\n      this.load1kVromBank(value & 3, 0x2800);\n      value >>= 2;\n      this.nametable_type[3] = value & 3;\n      this.load1kVromBank(value & 3, 0x2c00);\n      break;\n    case 0x5106:\n      this.fill_chr = value;\n      break;\n    case 0x5107:\n      this.fill_pal = value & 3;\n      break;\n    case 0x5113:\n      this.SetBank_SRAM(3, value & 3);\n      break;\n    case 0x5114:\n    case 0x5115:\n    case 0x5116:\n    case 0x5117:\n      this.SetBank_CPU(address, value);\n      break;\n    case 0x5120:\n    case 0x5121:\n    case 0x5122:\n    case 0x5123:\n    case 0x5124:\n    case 0x5125:\n    case 0x5126:\n    case 0x5127:\n      this.chr_mode = 0;\n      this.chr_page[0][address & 7] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5128:\n    case 0x5129:\n    case 0x512a:\n    case 0x512b:\n      this.chr_mode = 1;\n      this.chr_page[1][(address & 3) + 0] = value;\n      this.chr_page[1][(address & 3) + 4] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5200:\n      this.split_control = value;\n      break;\n    case 0x5201:\n      this.split_scroll = value;\n      break;\n    case 0x5202:\n      this.split_page = value & 0x3f;\n      break;\n    case 0x5203:\n      this.irq_line = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5204:\n      this.irq_enable = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5205:\n      this.mult_a = value;\n      break;\n    case 0x5206:\n      this.mult_b = value;\n      break;\n    default:\n      if (address >= 0x5000 && address <= 0x5015) {\n        this.nes.papu.exWrite(address, value);\n      } else if (address >= 0x5c00 && address <= 0x5fff) {\n        if (this.graphic_mode === 2) {\n          // ExRAM\n          // vram write\n        } else if (this.graphic_mode !== 3) {\n          // Split,ExGraphic\n          if (this.irq_status & 0x40) {\n            // vram write\n          } else {\n            // vram write\n          }\n        }\n      } else if (address >= 0x6000 && address <= 0x7fff) {\n        if (this.sram_we_a === 2 && this.sram_we_b === 1) {\n          // additional ram write\n        }\n      }\n      break;\n  }\n};\n\nMappers[5].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0x8000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xa000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xc000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xe000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper007 (AxROM)\n * @example Battletoads, Time Lord, Marble Madness\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_007\n * @constructor\n */\nMappers[7] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[7].prototype = new Mappers[0]();\n\nMappers[7].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load32kRomBank(value & 0x7, 0x8000);\n    if (value & 0x10) {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING2);\n    } else {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n    }\n  }\n};\n\nMappers[7].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"AOROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadPRGROM();\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 011 (Color Dreams)\n *\n * @description http://wiki.nesdev.com/w/index.php/Color_Dreams\n * @example Crystal Mines, Metal Fighter\n * @constructor\n */\nMappers[11] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[11].prototype = new Mappers[0]();\n\nMappers[11].prototype.write = function (address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank:\n    var prgbank1 = ((value & 0xf) * 2) % this.nes.rom.romCount;\n    var prgbank2 = ((value & 0xf) * 2 + 1) % this.nes.rom.romCount;\n\n    this.loadRomBank(prgbank1, 0x8000);\n    this.loadRomBank(prgbank2, 0xc000);\n\n    if (this.nes.rom.vromCount > 0) {\n      // Swap in the given VROM bank at 0x0000:\n      var bank = ((value >> 4) * 2) % this.nes.rom.vromCount;\n      this.loadVromBank(bank, 0x0000);\n      this.loadVromBank(bank + 1, 0x1000);\n    }\n  }\n};\n\n/**\n * Mapper 034 (BNROM, NINA-01)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_034\n * @example Darkseed, Mashou, Mission Impossible 2\n * @constructor\n */\nMappers[34] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[34].prototype = new Mappers[0]();\n\nMappers[34].prototype.write = function (address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    this.load32kRomBank(value, 0x8000);\n  }\n};\n\n/**\n * Mapper 038\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_038\n * @example Crime Busters\n * @constructor\n */\nMappers[38] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[38].prototype = new Mappers[0]();\n\nMappers[38].prototype.write = function (address, value) {\n  if (address < 0x7000 || address > 0x7fff) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank(value & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank(((value >> 2) & 3) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 066 (GxROM)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_066\n * @example Doraemon, Dragon Power, Gumshoe, Thunder & Lightning,\n * Super Mario Bros. + Duck Hunt\n * @constructor\n */\nMappers[66] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[66].prototype = new Mappers[0]();\n\nMappers[66].prototype.write = function (address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value & 3) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 094 (UN1ROM)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_094\n * @example Senjou no Ookami\n * @constructor\n */\nMappers[94] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[94].prototype = new Mappers[0]();\n\nMappers[94].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    this.loadRomBank(value >> 2, 0x8000);\n  }\n};\n\nMappers[94].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UN1ROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 140\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_140\n * @example Bio Senshi Dan - Increaser Tono Tatakai\n * @constructor\n */\nMappers[140] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[140].prototype = new Mappers[0]();\n\nMappers[140].prototype.write = function (address, value) {\n  if (address < 0x6000 || address > 0x7fff) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value & 0xf) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 180\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_180\n * @example Crazy Climber\n * @constructor\n */\nMappers[180] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[180].prototype = new Mappers[0]();\n\nMappers[180].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0xc000:\n    this.loadRomBank(value, 0xc000);\n  }\n};\n\nMappers[180].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"Mapper 180: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\nmodule.exports = Mappers;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}