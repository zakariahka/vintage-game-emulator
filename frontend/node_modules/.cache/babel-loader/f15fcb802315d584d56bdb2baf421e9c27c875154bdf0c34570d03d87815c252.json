{"ast":null,"code":"var utils = require(\"./utils\");\nvar CPU = function (nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.mem = null;\n  this.REG_ACC = null;\n  this.REG_X = null;\n  this.REG_Y = null;\n  this.REG_SP = null;\n  this.REG_PC = null;\n  this.REG_PC_NEW = null;\n  this.REG_STATUS = null;\n  this.F_CARRY = null;\n  this.F_DECIMAL = null;\n  this.F_INTERRUPT = null;\n  this.F_INTERRUPT_NEW = null;\n  this.F_OVERFLOW = null;\n  this.F_SIGN = null;\n  this.F_ZERO = null;\n  this.F_NOTUSED = null;\n  this.F_NOTUSED_NEW = null;\n  this.F_BRK = null;\n  this.F_BRK_NEW = null;\n  this.opdata = null;\n  this.cyclesToHalt = null;\n  this.crash = null;\n  this.irqRequested = null;\n  this.irqType = null;\n  this.reset();\n};\nCPU.prototype = {\n  // IRQ Types\n  IRQ_NORMAL: 0,\n  IRQ_NMI: 1,\n  IRQ_RESET: 2,\n  reset: function () {\n    // Main memory\n    this.mem = new Array(0x10000);\n    for (var i = 0; i < 0x2000; i++) {\n      this.mem[i] = 0xff;\n    }\n    for (var p = 0; p < 4; p++) {\n      var j = p * 0x800;\n      this.mem[j + 0x008] = 0xf7;\n      this.mem[j + 0x009] = 0xef;\n      this.mem[j + 0x00a] = 0xdf;\n      this.mem[j + 0x00f] = 0xbf;\n    }\n    for (var k = 0x2001; k < this.mem.length; k++) {\n      this.mem[k] = 0;\n    }\n\n    // CPU Registers:\n    this.REG_ACC = 0;\n    this.REG_X = 0;\n    this.REG_Y = 0;\n    // Reset Stack pointer:\n    this.REG_SP = 0x01ff;\n    // Reset Program counter:\n    this.REG_PC = 0x8000 - 1;\n    this.REG_PC_NEW = 0x8000 - 1;\n    // Reset Status register:\n    this.REG_STATUS = 0x28;\n    this.setStatus(0x28);\n\n    // Set flags:\n    this.F_CARRY = 0;\n    this.F_DECIMAL = 0;\n    this.F_INTERRUPT = 1;\n    this.F_INTERRUPT_NEW = 1;\n    this.F_OVERFLOW = 0;\n    this.F_SIGN = 0;\n    this.F_ZERO = 1;\n    this.F_NOTUSED = 1;\n    this.F_NOTUSED_NEW = 1;\n    this.F_BRK = 1;\n    this.F_BRK_NEW = 1;\n    this.opdata = new OpData().opdata;\n    this.cyclesToHalt = 0;\n\n    // Reset crash flag:\n    this.crash = false;\n\n    // Interrupt notification:\n    this.irqRequested = false;\n    this.irqType = null;\n  },\n  // Emulates a single CPU instruction, returns the number of cycles\n  emulate: function () {\n    var temp;\n    var add;\n\n    // Check interrupts:\n    if (this.irqRequested) {\n      temp = this.F_CARRY | (this.F_ZERO === 0 ? 1 : 0) << 1 | this.F_INTERRUPT << 2 | this.F_DECIMAL << 3 | this.F_BRK << 4 | this.F_NOTUSED << 5 | this.F_OVERFLOW << 6 | this.F_SIGN << 7;\n      this.REG_PC_NEW = this.REG_PC;\n      this.F_INTERRUPT_NEW = this.F_INTERRUPT;\n      switch (this.irqType) {\n        case 0:\n          {\n            // Normal IRQ:\n            if (this.F_INTERRUPT !== 0) {\n              // console.log(\"Interrupt was masked.\");\n              break;\n            }\n            this.doIrq(temp);\n            // console.log(\"Did normal IRQ. I=\"+this.F_INTERRUPT);\n            break;\n          }\n        case 1:\n          {\n            // NMI:\n            this.doNonMaskableInterrupt(temp);\n            break;\n          }\n        case 2:\n          {\n            // Reset:\n            this.doResetInterrupt();\n            break;\n          }\n      }\n      this.REG_PC = this.REG_PC_NEW;\n      this.F_INTERRUPT = this.F_INTERRUPT_NEW;\n      this.F_BRK = this.F_BRK_NEW;\n      this.irqRequested = false;\n    }\n    var opinf = this.opdata[this.nes.mmap.load(this.REG_PC + 1)];\n    var cycleCount = opinf >> 24;\n    var cycleAdd = 0;\n\n    // Find address mode:\n    var addrMode = opinf >> 8 & 0xff;\n\n    // Increment PC by number of op bytes:\n    var opaddr = this.REG_PC;\n    this.REG_PC += opinf >> 16 & 0xff;\n    var addr = 0;\n    switch (addrMode) {\n      case 0:\n        {\n          // Zero Page mode. Use the address given after the opcode,\n          // but without high byte.\n          addr = this.load(opaddr + 2);\n          break;\n        }\n      case 1:\n        {\n          // Relative mode.\n          addr = this.load(opaddr + 2);\n          if (addr < 0x80) {\n            addr += this.REG_PC;\n          } else {\n            addr += this.REG_PC - 256;\n          }\n          break;\n        }\n      case 2:\n        {\n          // Ignore. Address is implied in instruction.\n          break;\n        }\n      case 3:\n        {\n          // Absolute mode. Use the two bytes following the opcode as\n          // an address.\n          addr = this.load16bit(opaddr + 2);\n          break;\n        }\n      case 4:\n        {\n          // Accumulator mode. The address is in the accumulator\n          // register.\n          addr = this.REG_ACC;\n          break;\n        }\n      case 5:\n        {\n          // Immediate mode. The value is given after the opcode.\n          addr = this.REG_PC;\n          break;\n        }\n      case 6:\n        {\n          // Zero Page Indexed mode, X as index. Use the address given\n          // after the opcode, then add the\n          // X register to it to get the final address.\n          addr = this.load(opaddr + 2) + this.REG_X & 0xff;\n          break;\n        }\n      case 7:\n        {\n          // Zero Page Indexed mode, Y as index. Use the address given\n          // after the opcode, then add the\n          // Y register to it to get the final address.\n          addr = this.load(opaddr + 2) + this.REG_Y & 0xff;\n          break;\n        }\n      case 8:\n        {\n          // Absolute Indexed Mode, X as index. Same as zero page\n          // indexed, but with the high byte.\n          addr = this.load16bit(opaddr + 2);\n          if ((addr & 0xff00) !== (addr + this.REG_X & 0xff00)) {\n            cycleAdd = 1;\n          }\n          addr += this.REG_X;\n          break;\n        }\n      case 9:\n        {\n          // Absolute Indexed Mode, Y as index. Same as zero page\n          // indexed, but with the high byte.\n          addr = this.load16bit(opaddr + 2);\n          if ((addr & 0xff00) !== (addr + this.REG_Y & 0xff00)) {\n            cycleAdd = 1;\n          }\n          addr += this.REG_Y;\n          break;\n        }\n      case 10:\n        {\n          // Pre-indexed Indirect mode. Find the 16-bit address\n          // starting at the given location plus\n          // the current X register. The value is the contents of that\n          // address.\n          addr = this.load(opaddr + 2);\n          if ((addr & 0xff00) !== (addr + this.REG_X & 0xff00)) {\n            cycleAdd = 1;\n          }\n          addr += this.REG_X;\n          addr &= 0xff;\n          addr = this.load16bit(addr);\n          break;\n        }\n      case 11:\n        {\n          // Post-indexed Indirect mode. Find the 16-bit address\n          // contained in the given location\n          // (and the one following). Add to that address the contents\n          // of the Y register. Fetch the value\n          // stored at that adress.\n          addr = this.load16bit(this.load(opaddr + 2));\n          if ((addr & 0xff00) !== (addr + this.REG_Y & 0xff00)) {\n            cycleAdd = 1;\n          }\n          addr += this.REG_Y;\n          break;\n        }\n      case 12:\n        {\n          // Indirect Absolute mode. Find the 16-bit address contained\n          // at the given location.\n          addr = this.load16bit(opaddr + 2); // Find op\n          if (addr < 0x1fff) {\n            addr = this.mem[addr] + (this.mem[addr & 0xff00 | (addr & 0xff) + 1 & 0xff] << 8); // Read from address given in op\n          } else {\n            addr = this.nes.mmap.load(addr) + (this.nes.mmap.load(addr & 0xff00 | (addr & 0xff) + 1 & 0xff) << 8);\n          }\n          break;\n        }\n    }\n    // Wrap around for addresses above 0xFFFF:\n    addr &= 0xffff;\n\n    // ----------------------------------------------------------------------------------------------------\n    // Decode & execute instruction:\n    // ----------------------------------------------------------------------------------------------------\n\n    // This should be compiled to a jump table.\n    switch (opinf & 0xff) {\n      case 0:\n        {\n          // *******\n          // * ADC *\n          // *******\n\n          // Add with carry.\n          temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\n          if (((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 && ((this.REG_ACC ^ temp) & 0x80) !== 0) {\n            this.F_OVERFLOW = 1;\n          } else {\n            this.F_OVERFLOW = 0;\n          }\n          this.F_CARRY = temp > 255 ? 1 : 0;\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_ZERO = temp & 0xff;\n          this.REG_ACC = temp & 255;\n          cycleCount += cycleAdd;\n          break;\n        }\n      case 1:\n        {\n          // *******\n          // * AND *\n          // *******\n\n          // AND memory with accumulator.\n          this.REG_ACC = this.REG_ACC & this.load(addr);\n          this.F_SIGN = this.REG_ACC >> 7 & 1;\n          this.F_ZERO = this.REG_ACC;\n          if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n          break;\n        }\n      case 2:\n        {\n          // *******\n          // * ASL *\n          // *******\n\n          // Shift left one bit\n          if (addrMode === 4) {\n            // ADDR_ACC = 4\n\n            this.F_CARRY = this.REG_ACC >> 7 & 1;\n            this.REG_ACC = this.REG_ACC << 1 & 255;\n            this.F_SIGN = this.REG_ACC >> 7 & 1;\n            this.F_ZERO = this.REG_ACC;\n          } else {\n            temp = this.load(addr);\n            this.F_CARRY = temp >> 7 & 1;\n            temp = temp << 1 & 255;\n            this.F_SIGN = temp >> 7 & 1;\n            this.F_ZERO = temp;\n            this.write(addr, temp);\n          }\n          break;\n        }\n      case 3:\n        {\n          // *******\n          // * BCC *\n          // *******\n\n          // Branch on carry clear\n          if (this.F_CARRY === 0) {\n            cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n            this.REG_PC = addr;\n          }\n          break;\n        }\n      case 4:\n        {\n          // *******\n          // * BCS *\n          // *******\n\n          // Branch on carry set\n          if (this.F_CARRY === 1) {\n            cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n            this.REG_PC = addr;\n          }\n          break;\n        }\n      case 5:\n        {\n          // *******\n          // * BEQ *\n          // *******\n\n          // Branch on zero\n          if (this.F_ZERO === 0) {\n            cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n            this.REG_PC = addr;\n          }\n          break;\n        }\n      case 6:\n        {\n          // *******\n          // * BIT *\n          // *******\n\n          temp = this.load(addr);\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_OVERFLOW = temp >> 6 & 1;\n          temp &= this.REG_ACC;\n          this.F_ZERO = temp;\n          break;\n        }\n      case 7:\n        {\n          // *******\n          // * BMI *\n          // *******\n\n          // Branch on negative result\n          if (this.F_SIGN === 1) {\n            cycleCount++;\n            this.REG_PC = addr;\n          }\n          break;\n        }\n      case 8:\n        {\n          // *******\n          // * BNE *\n          // *******\n\n          // Branch on not zero\n          if (this.F_ZERO !== 0) {\n            cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n            this.REG_PC = addr;\n          }\n          break;\n        }\n      case 9:\n        {\n          // *******\n          // * BPL *\n          // *******\n\n          // Branch on positive result\n          if (this.F_SIGN === 0) {\n            cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n            this.REG_PC = addr;\n          }\n          break;\n        }\n      case 10:\n        {\n          // *******\n          // * BRK *\n          // *******\n\n          this.REG_PC += 2;\n          this.push(this.REG_PC >> 8 & 255);\n          this.push(this.REG_PC & 255);\n          this.F_BRK = 1;\n          this.push(this.F_CARRY | (this.F_ZERO === 0 ? 1 : 0) << 1 | this.F_INTERRUPT << 2 | this.F_DECIMAL << 3 | this.F_BRK << 4 | this.F_NOTUSED << 5 | this.F_OVERFLOW << 6 | this.F_SIGN << 7);\n          this.F_INTERRUPT = 1;\n          //this.REG_PC = load(0xFFFE) | (load(0xFFFF) << 8);\n          this.REG_PC = this.load16bit(0xfffe);\n          this.REG_PC--;\n          break;\n        }\n      case 11:\n        {\n          // *******\n          // * BVC *\n          // *******\n\n          // Branch on overflow clear\n          if (this.F_OVERFLOW === 0) {\n            cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n            this.REG_PC = addr;\n          }\n          break;\n        }\n      case 12:\n        {\n          // *******\n          // * BVS *\n          // *******\n\n          // Branch on overflow set\n          if (this.F_OVERFLOW === 1) {\n            cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n            this.REG_PC = addr;\n          }\n          break;\n        }\n      case 13:\n        {\n          // *******\n          // * CLC *\n          // *******\n\n          // Clear carry flag\n          this.F_CARRY = 0;\n          break;\n        }\n      case 14:\n        {\n          // *******\n          // * CLD *\n          // *******\n\n          // Clear decimal flag\n          this.F_DECIMAL = 0;\n          break;\n        }\n      case 15:\n        {\n          // *******\n          // * CLI *\n          // *******\n\n          // Clear interrupt flag\n          this.F_INTERRUPT = 0;\n          break;\n        }\n      case 16:\n        {\n          // *******\n          // * CLV *\n          // *******\n\n          // Clear overflow flag\n          this.F_OVERFLOW = 0;\n          break;\n        }\n      case 17:\n        {\n          // *******\n          // * CMP *\n          // *******\n\n          // Compare memory and accumulator:\n          temp = this.REG_ACC - this.load(addr);\n          this.F_CARRY = temp >= 0 ? 1 : 0;\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_ZERO = temp & 0xff;\n          cycleCount += cycleAdd;\n          break;\n        }\n      case 18:\n        {\n          // *******\n          // * CPX *\n          // *******\n\n          // Compare memory and index X:\n          temp = this.REG_X - this.load(addr);\n          this.F_CARRY = temp >= 0 ? 1 : 0;\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_ZERO = temp & 0xff;\n          break;\n        }\n      case 19:\n        {\n          // *******\n          // * CPY *\n          // *******\n\n          // Compare memory and index Y:\n          temp = this.REG_Y - this.load(addr);\n          this.F_CARRY = temp >= 0 ? 1 : 0;\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_ZERO = temp & 0xff;\n          break;\n        }\n      case 20:\n        {\n          // *******\n          // * DEC *\n          // *******\n\n          // Decrement memory by one:\n          temp = this.load(addr) - 1 & 0xff;\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_ZERO = temp;\n          this.write(addr, temp);\n          break;\n        }\n      case 21:\n        {\n          // *******\n          // * DEX *\n          // *******\n\n          // Decrement index X by one:\n          this.REG_X = this.REG_X - 1 & 0xff;\n          this.F_SIGN = this.REG_X >> 7 & 1;\n          this.F_ZERO = this.REG_X;\n          break;\n        }\n      case 22:\n        {\n          // *******\n          // * DEY *\n          // *******\n\n          // Decrement index Y by one:\n          this.REG_Y = this.REG_Y - 1 & 0xff;\n          this.F_SIGN = this.REG_Y >> 7 & 1;\n          this.F_ZERO = this.REG_Y;\n          break;\n        }\n      case 23:\n        {\n          // *******\n          // * EOR *\n          // *******\n\n          // XOR Memory with accumulator, store in accumulator:\n          this.REG_ACC = (this.load(addr) ^ this.REG_ACC) & 0xff;\n          this.F_SIGN = this.REG_ACC >> 7 & 1;\n          this.F_ZERO = this.REG_ACC;\n          cycleCount += cycleAdd;\n          break;\n        }\n      case 24:\n        {\n          // *******\n          // * INC *\n          // *******\n\n          // Increment memory by one:\n          temp = this.load(addr) + 1 & 0xff;\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_ZERO = temp;\n          this.write(addr, temp & 0xff);\n          break;\n        }\n      case 25:\n        {\n          // *******\n          // * INX *\n          // *******\n\n          // Increment index X by one:\n          this.REG_X = this.REG_X + 1 & 0xff;\n          this.F_SIGN = this.REG_X >> 7 & 1;\n          this.F_ZERO = this.REG_X;\n          break;\n        }\n      case 26:\n        {\n          // *******\n          // * INY *\n          // *******\n\n          // Increment index Y by one:\n          this.REG_Y++;\n          this.REG_Y &= 0xff;\n          this.F_SIGN = this.REG_Y >> 7 & 1;\n          this.F_ZERO = this.REG_Y;\n          break;\n        }\n      case 27:\n        {\n          // *******\n          // * JMP *\n          // *******\n\n          // Jump to new location:\n          this.REG_PC = addr - 1;\n          break;\n        }\n      case 28:\n        {\n          // *******\n          // * JSR *\n          // *******\n\n          // Jump to new location, saving return address.\n          // Push return address on stack:\n          this.push(this.REG_PC >> 8 & 255);\n          this.push(this.REG_PC & 255);\n          this.REG_PC = addr - 1;\n          break;\n        }\n      case 29:\n        {\n          // *******\n          // * LDA *\n          // *******\n\n          // Load accumulator with memory:\n          this.REG_ACC = this.load(addr);\n          this.F_SIGN = this.REG_ACC >> 7 & 1;\n          this.F_ZERO = this.REG_ACC;\n          cycleCount += cycleAdd;\n          break;\n        }\n      case 30:\n        {\n          // *******\n          // * LDX *\n          // *******\n\n          // Load index X with memory:\n          this.REG_X = this.load(addr);\n          this.F_SIGN = this.REG_X >> 7 & 1;\n          this.F_ZERO = this.REG_X;\n          cycleCount += cycleAdd;\n          break;\n        }\n      case 31:\n        {\n          // *******\n          // * LDY *\n          // *******\n\n          // Load index Y with memory:\n          this.REG_Y = this.load(addr);\n          this.F_SIGN = this.REG_Y >> 7 & 1;\n          this.F_ZERO = this.REG_Y;\n          cycleCount += cycleAdd;\n          break;\n        }\n      case 32:\n        {\n          // *******\n          // * LSR *\n          // *******\n\n          // Shift right one bit:\n          if (addrMode === 4) {\n            // ADDR_ACC\n\n            temp = this.REG_ACC & 0xff;\n            this.F_CARRY = temp & 1;\n            temp >>= 1;\n            this.REG_ACC = temp;\n          } else {\n            temp = this.load(addr) & 0xff;\n            this.F_CARRY = temp & 1;\n            temp >>= 1;\n            this.write(addr, temp);\n          }\n          this.F_SIGN = 0;\n          this.F_ZERO = temp;\n          break;\n        }\n      case 33:\n        {\n          // *******\n          // * NOP *\n          // *******\n\n          // No OPeration.\n          // Ignore.\n          break;\n        }\n      case 34:\n        {\n          // *******\n          // * ORA *\n          // *******\n\n          // OR memory with accumulator, store in accumulator.\n          temp = (this.load(addr) | this.REG_ACC) & 255;\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_ZERO = temp;\n          this.REG_ACC = temp;\n          if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n          break;\n        }\n      case 35:\n        {\n          // *******\n          // * PHA *\n          // *******\n\n          // Push accumulator on stack\n          this.push(this.REG_ACC);\n          break;\n        }\n      case 36:\n        {\n          // *******\n          // * PHP *\n          // *******\n\n          // Push processor status on stack\n          this.F_BRK = 1;\n          this.push(this.F_CARRY | (this.F_ZERO === 0 ? 1 : 0) << 1 | this.F_INTERRUPT << 2 | this.F_DECIMAL << 3 | this.F_BRK << 4 | this.F_NOTUSED << 5 | this.F_OVERFLOW << 6 | this.F_SIGN << 7);\n          break;\n        }\n      case 37:\n        {\n          // *******\n          // * PLA *\n          // *******\n\n          // Pull accumulator from stack\n          this.REG_ACC = this.pull();\n          this.F_SIGN = this.REG_ACC >> 7 & 1;\n          this.F_ZERO = this.REG_ACC;\n          break;\n        }\n      case 38:\n        {\n          // *******\n          // * PLP *\n          // *******\n\n          // Pull processor status from stack\n          temp = this.pull();\n          this.F_CARRY = temp & 1;\n          this.F_ZERO = (temp >> 1 & 1) === 1 ? 0 : 1;\n          this.F_INTERRUPT = temp >> 2 & 1;\n          this.F_DECIMAL = temp >> 3 & 1;\n          this.F_BRK = temp >> 4 & 1;\n          this.F_NOTUSED = temp >> 5 & 1;\n          this.F_OVERFLOW = temp >> 6 & 1;\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_NOTUSED = 1;\n          break;\n        }\n      case 39:\n        {\n          // *******\n          // * ROL *\n          // *******\n\n          // Rotate one bit left\n          if (addrMode === 4) {\n            // ADDR_ACC = 4\n\n            temp = this.REG_ACC;\n            add = this.F_CARRY;\n            this.F_CARRY = temp >> 7 & 1;\n            temp = (temp << 1 & 0xff) + add;\n            this.REG_ACC = temp;\n          } else {\n            temp = this.load(addr);\n            add = this.F_CARRY;\n            this.F_CARRY = temp >> 7 & 1;\n            temp = (temp << 1 & 0xff) + add;\n            this.write(addr, temp);\n          }\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_ZERO = temp;\n          break;\n        }\n      case 40:\n        {\n          // *******\n          // * ROR *\n          // *******\n\n          // Rotate one bit right\n          if (addrMode === 4) {\n            // ADDR_ACC = 4\n\n            add = this.F_CARRY << 7;\n            this.F_CARRY = this.REG_ACC & 1;\n            temp = (this.REG_ACC >> 1) + add;\n            this.REG_ACC = temp;\n          } else {\n            temp = this.load(addr);\n            add = this.F_CARRY << 7;\n            this.F_CARRY = temp & 1;\n            temp = (temp >> 1) + add;\n            this.write(addr, temp);\n          }\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_ZERO = temp;\n          break;\n        }\n      case 41:\n        {\n          // *******\n          // * RTI *\n          // *******\n\n          // Return from interrupt. Pull status and PC from stack.\n\n          temp = this.pull();\n          this.F_CARRY = temp & 1;\n          this.F_ZERO = (temp >> 1 & 1) === 0 ? 1 : 0;\n          this.F_INTERRUPT = temp >> 2 & 1;\n          this.F_DECIMAL = temp >> 3 & 1;\n          this.F_BRK = temp >> 4 & 1;\n          this.F_NOTUSED = temp >> 5 & 1;\n          this.F_OVERFLOW = temp >> 6 & 1;\n          this.F_SIGN = temp >> 7 & 1;\n          this.REG_PC = this.pull();\n          this.REG_PC += this.pull() << 8;\n          if (this.REG_PC === 0xffff) {\n            return;\n          }\n          this.REG_PC--;\n          this.F_NOTUSED = 1;\n          break;\n        }\n      case 42:\n        {\n          // *******\n          // * RTS *\n          // *******\n\n          // Return from subroutine. Pull PC from stack.\n\n          this.REG_PC = this.pull();\n          this.REG_PC += this.pull() << 8;\n          if (this.REG_PC === 0xffff) {\n            return; // return from NSF play routine:\n          }\n          break;\n        }\n      case 43:\n        {\n          // *******\n          // * SBC *\n          // *******\n\n          temp = this.REG_ACC - this.load(addr) - (1 - this.F_CARRY);\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_ZERO = temp & 0xff;\n          if (((this.REG_ACC ^ temp) & 0x80) !== 0 && ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0) {\n            this.F_OVERFLOW = 1;\n          } else {\n            this.F_OVERFLOW = 0;\n          }\n          this.F_CARRY = temp < 0 ? 0 : 1;\n          this.REG_ACC = temp & 0xff;\n          if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n          break;\n        }\n      case 44:\n        {\n          // *******\n          // * SEC *\n          // *******\n\n          // Set carry flag\n          this.F_CARRY = 1;\n          break;\n        }\n      case 45:\n        {\n          // *******\n          // * SED *\n          // *******\n\n          // Set decimal mode\n          this.F_DECIMAL = 1;\n          break;\n        }\n      case 46:\n        {\n          // *******\n          // * SEI *\n          // *******\n\n          // Set interrupt disable status\n          this.F_INTERRUPT = 1;\n          break;\n        }\n      case 47:\n        {\n          // *******\n          // * STA *\n          // *******\n\n          // Store accumulator in memory\n          this.write(addr, this.REG_ACC);\n          break;\n        }\n      case 48:\n        {\n          // *******\n          // * STX *\n          // *******\n\n          // Store index X in memory\n          this.write(addr, this.REG_X);\n          break;\n        }\n      case 49:\n        {\n          // *******\n          // * STY *\n          // *******\n\n          // Store index Y in memory:\n          this.write(addr, this.REG_Y);\n          break;\n        }\n      case 50:\n        {\n          // *******\n          // * TAX *\n          // *******\n\n          // Transfer accumulator to index X:\n          this.REG_X = this.REG_ACC;\n          this.F_SIGN = this.REG_ACC >> 7 & 1;\n          this.F_ZERO = this.REG_ACC;\n          break;\n        }\n      case 51:\n        {\n          // *******\n          // * TAY *\n          // *******\n\n          // Transfer accumulator to index Y:\n          this.REG_Y = this.REG_ACC;\n          this.F_SIGN = this.REG_ACC >> 7 & 1;\n          this.F_ZERO = this.REG_ACC;\n          break;\n        }\n      case 52:\n        {\n          // *******\n          // * TSX *\n          // *******\n\n          // Transfer stack pointer to index X:\n          this.REG_X = this.REG_SP - 0x0100;\n          this.F_SIGN = this.REG_SP >> 7 & 1;\n          this.F_ZERO = this.REG_X;\n          break;\n        }\n      case 53:\n        {\n          // *******\n          // * TXA *\n          // *******\n\n          // Transfer index X to accumulator:\n          this.REG_ACC = this.REG_X;\n          this.F_SIGN = this.REG_X >> 7 & 1;\n          this.F_ZERO = this.REG_X;\n          break;\n        }\n      case 54:\n        {\n          // *******\n          // * TXS *\n          // *******\n\n          // Transfer index X to stack pointer:\n          this.REG_SP = this.REG_X + 0x0100;\n          this.stackWrap();\n          break;\n        }\n      case 55:\n        {\n          // *******\n          // * TYA *\n          // *******\n\n          // Transfer index Y to accumulator:\n          this.REG_ACC = this.REG_Y;\n          this.F_SIGN = this.REG_Y >> 7 & 1;\n          this.F_ZERO = this.REG_Y;\n          break;\n        }\n      case 56:\n        {\n          // *******\n          // * ALR *\n          // *******\n\n          // Shift right one bit after ANDing:\n          temp = this.REG_ACC & this.load(addr);\n          this.F_CARRY = temp & 1;\n          this.REG_ACC = this.F_ZERO = temp >> 1;\n          this.F_SIGN = 0;\n          break;\n        }\n      case 57:\n        {\n          // *******\n          // * ANC *\n          // *******\n\n          // AND accumulator, setting carry to bit 7 result.\n          this.REG_ACC = this.F_ZERO = this.REG_ACC & this.load(addr);\n          this.F_CARRY = this.F_SIGN = this.REG_ACC >> 7 & 1;\n          break;\n        }\n      case 58:\n        {\n          // *******\n          // * ARR *\n          // *******\n\n          // Rotate right one bit after ANDing:\n          temp = this.REG_ACC & this.load(addr);\n          this.REG_ACC = this.F_ZERO = (temp >> 1) + (this.F_CARRY << 7);\n          this.F_SIGN = this.F_CARRY;\n          this.F_CARRY = temp >> 7 & 1;\n          this.F_OVERFLOW = (temp >> 7 ^ temp >> 6) & 1;\n          break;\n        }\n      case 59:\n        {\n          // *******\n          // * AXS *\n          // *******\n\n          // Set X to (X AND A) - value.\n          temp = (this.REG_X & this.REG_ACC) - this.load(addr);\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_ZERO = temp & 0xff;\n          if (((this.REG_X ^ temp) & 0x80) !== 0 && ((this.REG_X ^ this.load(addr)) & 0x80) !== 0) {\n            this.F_OVERFLOW = 1;\n          } else {\n            this.F_OVERFLOW = 0;\n          }\n          this.F_CARRY = temp < 0 ? 0 : 1;\n          this.REG_X = temp & 0xff;\n          break;\n        }\n      case 60:\n        {\n          // *******\n          // * LAX *\n          // *******\n\n          // Load A and X with memory:\n          this.REG_ACC = this.REG_X = this.F_ZERO = this.load(addr);\n          this.F_SIGN = this.REG_ACC >> 7 & 1;\n          cycleCount += cycleAdd;\n          break;\n        }\n      case 61:\n        {\n          // *******\n          // * SAX *\n          // *******\n\n          // Store A AND X in memory:\n          this.write(addr, this.REG_ACC & this.REG_X);\n          break;\n        }\n      case 62:\n        {\n          // *******\n          // * DCP *\n          // *******\n\n          // Decrement memory by one:\n          temp = this.load(addr) - 1 & 0xff;\n          this.write(addr, temp);\n\n          // Then compare with the accumulator:\n          temp = this.REG_ACC - temp;\n          this.F_CARRY = temp >= 0 ? 1 : 0;\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_ZERO = temp & 0xff;\n          if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n          break;\n        }\n      case 63:\n        {\n          // *******\n          // * ISC *\n          // *******\n\n          // Increment memory by one:\n          temp = this.load(addr) + 1 & 0xff;\n          this.write(addr, temp);\n\n          // Then subtract from the accumulator:\n          temp = this.REG_ACC - temp - (1 - this.F_CARRY);\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_ZERO = temp & 0xff;\n          if (((this.REG_ACC ^ temp) & 0x80) !== 0 && ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0) {\n            this.F_OVERFLOW = 1;\n          } else {\n            this.F_OVERFLOW = 0;\n          }\n          this.F_CARRY = temp < 0 ? 0 : 1;\n          this.REG_ACC = temp & 0xff;\n          if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n          break;\n        }\n      case 64:\n        {\n          // *******\n          // * RLA *\n          // *******\n\n          // Rotate one bit left\n          temp = this.load(addr);\n          add = this.F_CARRY;\n          this.F_CARRY = temp >> 7 & 1;\n          temp = (temp << 1 & 0xff) + add;\n          this.write(addr, temp);\n\n          // Then AND with the accumulator.\n          this.REG_ACC = this.REG_ACC & temp;\n          this.F_SIGN = this.REG_ACC >> 7 & 1;\n          this.F_ZERO = this.REG_ACC;\n          if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n          break;\n        }\n      case 65:\n        {\n          // *******\n          // * RRA *\n          // *******\n\n          // Rotate one bit right\n          temp = this.load(addr);\n          add = this.F_CARRY << 7;\n          this.F_CARRY = temp & 1;\n          temp = (temp >> 1) + add;\n          this.write(addr, temp);\n\n          // Then add to the accumulator\n          temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\n          if (((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 && ((this.REG_ACC ^ temp) & 0x80) !== 0) {\n            this.F_OVERFLOW = 1;\n          } else {\n            this.F_OVERFLOW = 0;\n          }\n          this.F_CARRY = temp > 255 ? 1 : 0;\n          this.F_SIGN = temp >> 7 & 1;\n          this.F_ZERO = temp & 0xff;\n          this.REG_ACC = temp & 255;\n          if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n          break;\n        }\n      case 66:\n        {\n          // *******\n          // * SLO *\n          // *******\n\n          // Shift one bit left\n          temp = this.load(addr);\n          this.F_CARRY = temp >> 7 & 1;\n          temp = temp << 1 & 255;\n          this.write(addr, temp);\n\n          // Then OR with the accumulator.\n          this.REG_ACC = this.REG_ACC | temp;\n          this.F_SIGN = this.REG_ACC >> 7 & 1;\n          this.F_ZERO = this.REG_ACC;\n          if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n          break;\n        }\n      case 67:\n        {\n          // *******\n          // * SRE *\n          // *******\n\n          // Shift one bit right\n          temp = this.load(addr) & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.write(addr, temp);\n\n          // Then XOR with the accumulator.\n          this.REG_ACC = this.REG_ACC ^ temp;\n          this.F_SIGN = this.REG_ACC >> 7 & 1;\n          this.F_ZERO = this.REG_ACC;\n          if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n          break;\n        }\n      case 68:\n        {\n          // *******\n          // * SKB *\n          // *******\n\n          // Do nothing\n          break;\n        }\n      case 69:\n        {\n          // *******\n          // * IGN *\n          // *******\n\n          // Do nothing but load.\n          // TODO: Properly implement the double-reads.\n          this.load(addr);\n          if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n          break;\n        }\n      default:\n        {\n          // *******\n          // * ??? *\n          // *******\n\n          this.nes.stop();\n          this.nes.crashMessage = \"Game crashed, invalid opcode at address $\" + opaddr.toString(16);\n          break;\n        }\n    } // end of switch\n\n    return cycleCount;\n  },\n  load: function (addr) {\n    if (addr < 0x2000) {\n      return this.mem[addr & 0x7ff];\n    } else {\n      return this.nes.mmap.load(addr);\n    }\n  },\n  load16bit: function (addr) {\n    if (addr < 0x1fff) {\n      return this.mem[addr & 0x7ff] | this.mem[addr + 1 & 0x7ff] << 8;\n    } else {\n      return this.nes.mmap.load(addr) | this.nes.mmap.load(addr + 1) << 8;\n    }\n  },\n  write: function (addr, val) {\n    if (addr < 0x2000) {\n      this.mem[addr & 0x7ff] = val;\n    } else {\n      this.nes.mmap.write(addr, val);\n    }\n  },\n  requestIrq: function (type) {\n    if (this.irqRequested) {\n      if (type === this.IRQ_NORMAL) {\n        return;\n      }\n      // console.log(\"too fast irqs. type=\"+type);\n    }\n    this.irqRequested = true;\n    this.irqType = type;\n  },\n  push: function (value) {\n    this.nes.mmap.write(this.REG_SP, value);\n    this.REG_SP--;\n    this.REG_SP = 0x0100 | this.REG_SP & 0xff;\n  },\n  stackWrap: function () {\n    this.REG_SP = 0x0100 | this.REG_SP & 0xff;\n  },\n  pull: function () {\n    this.REG_SP++;\n    this.REG_SP = 0x0100 | this.REG_SP & 0xff;\n    return this.nes.mmap.load(this.REG_SP);\n  },\n  pageCrossed: function (addr1, addr2) {\n    return (addr1 & 0xff00) !== (addr2 & 0xff00);\n  },\n  haltCycles: function (cycles) {\n    this.cyclesToHalt += cycles;\n  },\n  doNonMaskableInterrupt: function (status) {\n    if ((this.nes.mmap.load(0x2000) & 128) !== 0) {\n      // Check whether VBlank Interrupts are enabled\n\n      this.REG_PC_NEW++;\n      this.push(this.REG_PC_NEW >> 8 & 0xff);\n      this.push(this.REG_PC_NEW & 0xff);\n      //this.F_INTERRUPT_NEW = 1;\n      this.push(status);\n      this.REG_PC_NEW = this.nes.mmap.load(0xfffa) | this.nes.mmap.load(0xfffb) << 8;\n      this.REG_PC_NEW--;\n    }\n  },\n  doResetInterrupt: function () {\n    this.REG_PC_NEW = this.nes.mmap.load(0xfffc) | this.nes.mmap.load(0xfffd) << 8;\n    this.REG_PC_NEW--;\n  },\n  doIrq: function (status) {\n    this.REG_PC_NEW++;\n    this.push(this.REG_PC_NEW >> 8 & 0xff);\n    this.push(this.REG_PC_NEW & 0xff);\n    this.push(status);\n    this.F_INTERRUPT_NEW = 1;\n    this.F_BRK_NEW = 0;\n    this.REG_PC_NEW = this.nes.mmap.load(0xfffe) | this.nes.mmap.load(0xffff) << 8;\n    this.REG_PC_NEW--;\n  },\n  getStatus: function () {\n    return this.F_CARRY | this.F_ZERO << 1 | this.F_INTERRUPT << 2 | this.F_DECIMAL << 3 | this.F_BRK << 4 | this.F_NOTUSED << 5 | this.F_OVERFLOW << 6 | this.F_SIGN << 7;\n  },\n  setStatus: function (st) {\n    this.F_CARRY = st & 1;\n    this.F_ZERO = st >> 1 & 1;\n    this.F_INTERRUPT = st >> 2 & 1;\n    this.F_DECIMAL = st >> 3 & 1;\n    this.F_BRK = st >> 4 & 1;\n    this.F_NOTUSED = st >> 5 & 1;\n    this.F_OVERFLOW = st >> 6 & 1;\n    this.F_SIGN = st >> 7 & 1;\n  },\n  JSON_PROPERTIES: [\"mem\", \"cyclesToHalt\", \"irqRequested\", \"irqType\",\n  // Registers\n  \"REG_ACC\", \"REG_X\", \"REG_Y\", \"REG_SP\", \"REG_PC\", \"REG_PC_NEW\", \"REG_STATUS\",\n  // Status\n  \"F_CARRY\", \"F_DECIMAL\", \"F_INTERRUPT\", \"F_INTERRUPT_NEW\", \"F_OVERFLOW\", \"F_SIGN\", \"F_ZERO\", \"F_NOTUSED\", \"F_NOTUSED_NEW\", \"F_BRK\", \"F_BRK_NEW\"],\n  toJSON: function () {\n    return utils.toJSON(this);\n  },\n  fromJSON: function (s) {\n    utils.fromJSON(this, s);\n  }\n};\n\n// Generates and provides an array of details about instructions\nvar OpData = function () {\n  this.opdata = new Array(256);\n\n  // Set all to invalid instruction (to detect crashes):\n  for (var i = 0; i < 256; i++) this.opdata[i] = 0xff;\n\n  // Now fill in all valid opcodes:\n\n  // ADC:\n  this.setOp(this.INS_ADC, 0x69, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ADC, 0x65, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ADC, 0x75, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ADC, 0x6d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ADC, 0x7d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ADC, 0x79, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ADC, 0x61, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ADC, 0x71, this.ADDR_POSTIDXIND, 2, 5);\n\n  // AND:\n  this.setOp(this.INS_AND, 0x29, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_AND, 0x25, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_AND, 0x35, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_AND, 0x2d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_AND, 0x3d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_AND, 0x39, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_AND, 0x21, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_AND, 0x31, this.ADDR_POSTIDXIND, 2, 5);\n\n  // ASL:\n  this.setOp(this.INS_ASL, 0x0a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ASL, 0x06, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ASL, 0x16, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ASL, 0x0e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ASL, 0x1e, this.ADDR_ABSX, 3, 7);\n\n  // BCC:\n  this.setOp(this.INS_BCC, 0x90, this.ADDR_REL, 2, 2);\n\n  // BCS:\n  this.setOp(this.INS_BCS, 0xb0, this.ADDR_REL, 2, 2);\n\n  // BEQ:\n  this.setOp(this.INS_BEQ, 0xf0, this.ADDR_REL, 2, 2);\n\n  // BIT:\n  this.setOp(this.INS_BIT, 0x24, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_BIT, 0x2c, this.ADDR_ABS, 3, 4);\n\n  // BMI:\n  this.setOp(this.INS_BMI, 0x30, this.ADDR_REL, 2, 2);\n\n  // BNE:\n  this.setOp(this.INS_BNE, 0xd0, this.ADDR_REL, 2, 2);\n\n  // BPL:\n  this.setOp(this.INS_BPL, 0x10, this.ADDR_REL, 2, 2);\n\n  // BRK:\n  this.setOp(this.INS_BRK, 0x00, this.ADDR_IMP, 1, 7);\n\n  // BVC:\n  this.setOp(this.INS_BVC, 0x50, this.ADDR_REL, 2, 2);\n\n  // BVS:\n  this.setOp(this.INS_BVS, 0x70, this.ADDR_REL, 2, 2);\n\n  // CLC:\n  this.setOp(this.INS_CLC, 0x18, this.ADDR_IMP, 1, 2);\n\n  // CLD:\n  this.setOp(this.INS_CLD, 0xd8, this.ADDR_IMP, 1, 2);\n\n  // CLI:\n  this.setOp(this.INS_CLI, 0x58, this.ADDR_IMP, 1, 2);\n\n  // CLV:\n  this.setOp(this.INS_CLV, 0xb8, this.ADDR_IMP, 1, 2);\n\n  // CMP:\n  this.setOp(this.INS_CMP, 0xc9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CMP, 0xc5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CMP, 0xd5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_CMP, 0xcd, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_CMP, 0xdd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_CMP, 0xd9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_CMP, 0xc1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_CMP, 0xd1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // CPX:\n  this.setOp(this.INS_CPX, 0xe0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPX, 0xe4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPX, 0xec, this.ADDR_ABS, 3, 4);\n\n  // CPY:\n  this.setOp(this.INS_CPY, 0xc0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPY, 0xc4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPY, 0xcc, this.ADDR_ABS, 3, 4);\n\n  // DEC:\n  this.setOp(this.INS_DEC, 0xc6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_DEC, 0xd6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_DEC, 0xce, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_DEC, 0xde, this.ADDR_ABSX, 3, 7);\n\n  // DEX:\n  this.setOp(this.INS_DEX, 0xca, this.ADDR_IMP, 1, 2);\n\n  // DEY:\n  this.setOp(this.INS_DEY, 0x88, this.ADDR_IMP, 1, 2);\n\n  // EOR:\n  this.setOp(this.INS_EOR, 0x49, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_EOR, 0x45, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_EOR, 0x55, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_EOR, 0x4d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_EOR, 0x5d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_EOR, 0x59, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_EOR, 0x41, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_EOR, 0x51, this.ADDR_POSTIDXIND, 2, 5);\n\n  // INC:\n  this.setOp(this.INS_INC, 0xe6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_INC, 0xf6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_INC, 0xee, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_INC, 0xfe, this.ADDR_ABSX, 3, 7);\n\n  // INX:\n  this.setOp(this.INS_INX, 0xe8, this.ADDR_IMP, 1, 2);\n\n  // INY:\n  this.setOp(this.INS_INY, 0xc8, this.ADDR_IMP, 1, 2);\n\n  // JMP:\n  this.setOp(this.INS_JMP, 0x4c, this.ADDR_ABS, 3, 3);\n  this.setOp(this.INS_JMP, 0x6c, this.ADDR_INDABS, 3, 5);\n\n  // JSR:\n  this.setOp(this.INS_JSR, 0x20, this.ADDR_ABS, 3, 6);\n\n  // LDA:\n  this.setOp(this.INS_LDA, 0xa9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDA, 0xa5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDA, 0xb5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDA, 0xad, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDA, 0xbd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_LDA, 0xb9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_LDA, 0xa1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_LDA, 0xb1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // LDX:\n  this.setOp(this.INS_LDX, 0xa2, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDX, 0xa6, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDX, 0xb6, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_LDX, 0xae, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDX, 0xbe, this.ADDR_ABSY, 3, 4);\n\n  // LDY:\n  this.setOp(this.INS_LDY, 0xa0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDY, 0xa4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDY, 0xb4, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDY, 0xac, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDY, 0xbc, this.ADDR_ABSX, 3, 4);\n\n  // LSR:\n  this.setOp(this.INS_LSR, 0x4a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_LSR, 0x46, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_LSR, 0x56, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_LSR, 0x4e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_LSR, 0x5e, this.ADDR_ABSX, 3, 7);\n\n  // NOP:\n  this.setOp(this.INS_NOP, 0x1a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x3a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x5a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x7a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xda, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xea, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xfa, this.ADDR_IMP, 1, 2);\n\n  // ORA:\n  this.setOp(this.INS_ORA, 0x09, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ORA, 0x05, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ORA, 0x15, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ORA, 0x0d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ORA, 0x1d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ORA, 0x19, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ORA, 0x01, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ORA, 0x11, this.ADDR_POSTIDXIND, 2, 5);\n\n  // PHA:\n  this.setOp(this.INS_PHA, 0x48, this.ADDR_IMP, 1, 3);\n\n  // PHP:\n  this.setOp(this.INS_PHP, 0x08, this.ADDR_IMP, 1, 3);\n\n  // PLA:\n  this.setOp(this.INS_PLA, 0x68, this.ADDR_IMP, 1, 4);\n\n  // PLP:\n  this.setOp(this.INS_PLP, 0x28, this.ADDR_IMP, 1, 4);\n\n  // ROL:\n  this.setOp(this.INS_ROL, 0x2a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROL, 0x26, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROL, 0x36, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROL, 0x2e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROL, 0x3e, this.ADDR_ABSX, 3, 7);\n\n  // ROR:\n  this.setOp(this.INS_ROR, 0x6a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROR, 0x66, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROR, 0x76, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROR, 0x6e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROR, 0x7e, this.ADDR_ABSX, 3, 7);\n\n  // RTI:\n  this.setOp(this.INS_RTI, 0x40, this.ADDR_IMP, 1, 6);\n\n  // RTS:\n  this.setOp(this.INS_RTS, 0x60, this.ADDR_IMP, 1, 6);\n\n  // SBC:\n  this.setOp(this.INS_SBC, 0xe9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SBC, 0xe5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_SBC, 0xf5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_SBC, 0xed, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_SBC, 0xfd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_SBC, 0xf9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_SBC, 0xe1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_SBC, 0xf1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // SEC:\n  this.setOp(this.INS_SEC, 0x38, this.ADDR_IMP, 1, 2);\n\n  // SED:\n  this.setOp(this.INS_SED, 0xf8, this.ADDR_IMP, 1, 2);\n\n  // SEI:\n  this.setOp(this.INS_SEI, 0x78, this.ADDR_IMP, 1, 2);\n\n  // STA:\n  this.setOp(this.INS_STA, 0x85, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STA, 0x95, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STA, 0x8d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_STA, 0x9d, this.ADDR_ABSX, 3, 5);\n  this.setOp(this.INS_STA, 0x99, this.ADDR_ABSY, 3, 5);\n  this.setOp(this.INS_STA, 0x81, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_STA, 0x91, this.ADDR_POSTIDXIND, 2, 6);\n\n  // STX:\n  this.setOp(this.INS_STX, 0x86, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STX, 0x96, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_STX, 0x8e, this.ADDR_ABS, 3, 4);\n\n  // STY:\n  this.setOp(this.INS_STY, 0x84, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STY, 0x94, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STY, 0x8c, this.ADDR_ABS, 3, 4);\n\n  // TAX:\n  this.setOp(this.INS_TAX, 0xaa, this.ADDR_IMP, 1, 2);\n\n  // TAY:\n  this.setOp(this.INS_TAY, 0xa8, this.ADDR_IMP, 1, 2);\n\n  // TSX:\n  this.setOp(this.INS_TSX, 0xba, this.ADDR_IMP, 1, 2);\n\n  // TXA:\n  this.setOp(this.INS_TXA, 0x8a, this.ADDR_IMP, 1, 2);\n\n  // TXS:\n  this.setOp(this.INS_TXS, 0x9a, this.ADDR_IMP, 1, 2);\n\n  // TYA:\n  this.setOp(this.INS_TYA, 0x98, this.ADDR_IMP, 1, 2);\n\n  // ALR:\n  this.setOp(this.INS_ALR, 0x4b, this.ADDR_IMM, 2, 2);\n\n  // ANC:\n  this.setOp(this.INS_ANC, 0x0b, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ANC, 0x2b, this.ADDR_IMM, 2, 2);\n\n  // ARR:\n  this.setOp(this.INS_ARR, 0x6b, this.ADDR_IMM, 2, 2);\n\n  // AXS:\n  this.setOp(this.INS_AXS, 0xcb, this.ADDR_IMM, 2, 2);\n\n  // LAX:\n  this.setOp(this.INS_LAX, 0xa3, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_LAX, 0xa7, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LAX, 0xaf, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LAX, 0xb3, this.ADDR_POSTIDXIND, 2, 5);\n  this.setOp(this.INS_LAX, 0xb7, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_LAX, 0xbf, this.ADDR_ABSY, 3, 4);\n\n  // SAX:\n  this.setOp(this.INS_SAX, 0x83, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_SAX, 0x87, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_SAX, 0x8f, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_SAX, 0x97, this.ADDR_ZPY, 2, 4);\n\n  // DCP:\n  this.setOp(this.INS_DCP, 0xc3, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_DCP, 0xc7, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_DCP, 0xcf, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_DCP, 0xd3, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_DCP, 0xd7, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_DCP, 0xdb, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_DCP, 0xdf, this.ADDR_ABSX, 3, 7);\n\n  // ISC:\n  this.setOp(this.INS_ISC, 0xe3, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_ISC, 0xe7, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ISC, 0xef, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ISC, 0xf3, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_ISC, 0xf7, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ISC, 0xfb, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_ISC, 0xff, this.ADDR_ABSX, 3, 7);\n\n  // RLA:\n  this.setOp(this.INS_RLA, 0x23, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_RLA, 0x27, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_RLA, 0x2f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_RLA, 0x33, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_RLA, 0x37, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_RLA, 0x3b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_RLA, 0x3f, this.ADDR_ABSX, 3, 7);\n\n  // RRA:\n  this.setOp(this.INS_RRA, 0x63, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_RRA, 0x67, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_RRA, 0x6f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_RRA, 0x73, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_RRA, 0x77, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_RRA, 0x7b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_RRA, 0x7f, this.ADDR_ABSX, 3, 7);\n\n  // SLO:\n  this.setOp(this.INS_SLO, 0x03, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_SLO, 0x07, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_SLO, 0x0f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_SLO, 0x13, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_SLO, 0x17, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_SLO, 0x1b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_SLO, 0x1f, this.ADDR_ABSX, 3, 7);\n\n  // SRE:\n  this.setOp(this.INS_SRE, 0x43, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_SRE, 0x47, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_SRE, 0x4f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_SRE, 0x53, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_SRE, 0x57, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_SRE, 0x5b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_SRE, 0x5f, this.ADDR_ABSX, 3, 7);\n\n  // SKB:\n  this.setOp(this.INS_SKB, 0x80, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0x82, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0x89, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0xc2, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0xe2, this.ADDR_IMM, 2, 2);\n\n  // SKB:\n  this.setOp(this.INS_IGN, 0x0c, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_IGN, 0x1c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x3c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x5c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x7c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0xdc, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0xfc, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x04, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x44, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x64, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x14, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x34, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x54, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x74, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0xd4, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0xf4, this.ADDR_ZPX, 2, 4);\n\n  // prettier-ignore\n  this.cycTable = new Array( /*0x00*/7, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 4, 4, 6, 6, /*0x10*/2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, /*0x20*/6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 4, 4, 6, 6, /*0x30*/2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, /*0x40*/6, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 3, 4, 6, 6, /*0x50*/2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, /*0x60*/6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 5, 4, 6, 6, /*0x70*/2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, /*0x80*/2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, /*0x90*/2, 6, 2, 6, 4, 4, 4, 4, 2, 5, 2, 5, 5, 5, 5, 5, /*0xA0*/2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, /*0xB0*/2, 5, 2, 5, 4, 4, 4, 4, 2, 4, 2, 4, 4, 4, 4, 4, /*0xC0*/2, 6, 2, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6, /*0xD0*/2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, /*0xE0*/2, 6, 3, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6, /*0xF0*/2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7);\n  this.instname = new Array(70);\n\n  // Instruction Names:\n  this.instname[0] = \"ADC\";\n  this.instname[1] = \"AND\";\n  this.instname[2] = \"ASL\";\n  this.instname[3] = \"BCC\";\n  this.instname[4] = \"BCS\";\n  this.instname[5] = \"BEQ\";\n  this.instname[6] = \"BIT\";\n  this.instname[7] = \"BMI\";\n  this.instname[8] = \"BNE\";\n  this.instname[9] = \"BPL\";\n  this.instname[10] = \"BRK\";\n  this.instname[11] = \"BVC\";\n  this.instname[12] = \"BVS\";\n  this.instname[13] = \"CLC\";\n  this.instname[14] = \"CLD\";\n  this.instname[15] = \"CLI\";\n  this.instname[16] = \"CLV\";\n  this.instname[17] = \"CMP\";\n  this.instname[18] = \"CPX\";\n  this.instname[19] = \"CPY\";\n  this.instname[20] = \"DEC\";\n  this.instname[21] = \"DEX\";\n  this.instname[22] = \"DEY\";\n  this.instname[23] = \"EOR\";\n  this.instname[24] = \"INC\";\n  this.instname[25] = \"INX\";\n  this.instname[26] = \"INY\";\n  this.instname[27] = \"JMP\";\n  this.instname[28] = \"JSR\";\n  this.instname[29] = \"LDA\";\n  this.instname[30] = \"LDX\";\n  this.instname[31] = \"LDY\";\n  this.instname[32] = \"LSR\";\n  this.instname[33] = \"NOP\";\n  this.instname[34] = \"ORA\";\n  this.instname[35] = \"PHA\";\n  this.instname[36] = \"PHP\";\n  this.instname[37] = \"PLA\";\n  this.instname[38] = \"PLP\";\n  this.instname[39] = \"ROL\";\n  this.instname[40] = \"ROR\";\n  this.instname[41] = \"RTI\";\n  this.instname[42] = \"RTS\";\n  this.instname[43] = \"SBC\";\n  this.instname[44] = \"SEC\";\n  this.instname[45] = \"SED\";\n  this.instname[46] = \"SEI\";\n  this.instname[47] = \"STA\";\n  this.instname[48] = \"STX\";\n  this.instname[49] = \"STY\";\n  this.instname[50] = \"TAX\";\n  this.instname[51] = \"TAY\";\n  this.instname[52] = \"TSX\";\n  this.instname[53] = \"TXA\";\n  this.instname[54] = \"TXS\";\n  this.instname[55] = \"TYA\";\n  this.instname[56] = \"ALR\";\n  this.instname[57] = \"ANC\";\n  this.instname[58] = \"ARR\";\n  this.instname[59] = \"AXS\";\n  this.instname[60] = \"LAX\";\n  this.instname[61] = \"SAX\";\n  this.instname[62] = \"DCP\";\n  this.instname[63] = \"ISC\";\n  this.instname[64] = \"RLA\";\n  this.instname[65] = \"RRA\";\n  this.instname[66] = \"SLO\";\n  this.instname[67] = \"SRE\";\n  this.instname[68] = \"SKB\";\n  this.instname[69] = \"IGN\";\n  this.addrDesc = new Array(\"Zero Page           \", \"Relative            \", \"Implied             \", \"Absolute            \", \"Accumulator         \", \"Immediate           \", \"Zero Page,X         \", \"Zero Page,Y         \", \"Absolute,X          \", \"Absolute,Y          \", \"Preindexed Indirect \", \"Postindexed Indirect\", \"Indirect Absolute   \");\n};\nOpData.prototype = {\n  INS_ADC: 0,\n  INS_AND: 1,\n  INS_ASL: 2,\n  INS_BCC: 3,\n  INS_BCS: 4,\n  INS_BEQ: 5,\n  INS_BIT: 6,\n  INS_BMI: 7,\n  INS_BNE: 8,\n  INS_BPL: 9,\n  INS_BRK: 10,\n  INS_BVC: 11,\n  INS_BVS: 12,\n  INS_CLC: 13,\n  INS_CLD: 14,\n  INS_CLI: 15,\n  INS_CLV: 16,\n  INS_CMP: 17,\n  INS_CPX: 18,\n  INS_CPY: 19,\n  INS_DEC: 20,\n  INS_DEX: 21,\n  INS_DEY: 22,\n  INS_EOR: 23,\n  INS_INC: 24,\n  INS_INX: 25,\n  INS_INY: 26,\n  INS_JMP: 27,\n  INS_JSR: 28,\n  INS_LDA: 29,\n  INS_LDX: 30,\n  INS_LDY: 31,\n  INS_LSR: 32,\n  INS_NOP: 33,\n  INS_ORA: 34,\n  INS_PHA: 35,\n  INS_PHP: 36,\n  INS_PLA: 37,\n  INS_PLP: 38,\n  INS_ROL: 39,\n  INS_ROR: 40,\n  INS_RTI: 41,\n  INS_RTS: 42,\n  INS_SBC: 43,\n  INS_SEC: 44,\n  INS_SED: 45,\n  INS_SEI: 46,\n  INS_STA: 47,\n  INS_STX: 48,\n  INS_STY: 49,\n  INS_TAX: 50,\n  INS_TAY: 51,\n  INS_TSX: 52,\n  INS_TXA: 53,\n  INS_TXS: 54,\n  INS_TYA: 55,\n  INS_ALR: 56,\n  INS_ANC: 57,\n  INS_ARR: 58,\n  INS_AXS: 59,\n  INS_LAX: 60,\n  INS_SAX: 61,\n  INS_DCP: 62,\n  INS_ISC: 63,\n  INS_RLA: 64,\n  INS_RRA: 65,\n  INS_SLO: 66,\n  INS_SRE: 67,\n  INS_SKB: 68,\n  INS_IGN: 69,\n  INS_DUMMY: 70,\n  // dummy instruction used for 'halting' the processor some cycles\n\n  // -------------------------------- //\n\n  // Addressing modes:\n  ADDR_ZP: 0,\n  ADDR_REL: 1,\n  ADDR_IMP: 2,\n  ADDR_ABS: 3,\n  ADDR_ACC: 4,\n  ADDR_IMM: 5,\n  ADDR_ZPX: 6,\n  ADDR_ZPY: 7,\n  ADDR_ABSX: 8,\n  ADDR_ABSY: 9,\n  ADDR_PREIDXIND: 10,\n  ADDR_POSTIDXIND: 11,\n  ADDR_INDABS: 12,\n  setOp: function (inst, op, addr, size, cycles) {\n    this.opdata[op] = inst & 0xff | (addr & 0xff) << 8 | (size & 0xff) << 16 | (cycles & 0xff) << 24;\n  }\n};\nmodule.exports = CPU;","map":{"version":3,"names":["utils","require","CPU","nes","mem","REG_ACC","REG_X","REG_Y","REG_SP","REG_PC","REG_PC_NEW","REG_STATUS","F_CARRY","F_DECIMAL","F_INTERRUPT","F_INTERRUPT_NEW","F_OVERFLOW","F_SIGN","F_ZERO","F_NOTUSED","F_NOTUSED_NEW","F_BRK","F_BRK_NEW","opdata","cyclesToHalt","crash","irqRequested","irqType","reset","prototype","IRQ_NORMAL","IRQ_NMI","IRQ_RESET","Array","i","p","j","k","length","setStatus","OpData","emulate","temp","add","doIrq","doNonMaskableInterrupt","doResetInterrupt","opinf","mmap","load","cycleCount","cycleAdd","addrMode","opaddr","addr","load16bit","write","push","pull","stackWrap","stop","crashMessage","toString","val","requestIrq","type","value","pageCrossed","addr1","addr2","haltCycles","cycles","status","getStatus","st","JSON_PROPERTIES","toJSON","fromJSON","s","setOp","INS_ADC","ADDR_IMM","ADDR_ZP","ADDR_ZPX","ADDR_ABS","ADDR_ABSX","ADDR_ABSY","ADDR_PREIDXIND","ADDR_POSTIDXIND","INS_AND","INS_ASL","ADDR_ACC","INS_BCC","ADDR_REL","INS_BCS","INS_BEQ","INS_BIT","INS_BMI","INS_BNE","INS_BPL","INS_BRK","ADDR_IMP","INS_BVC","INS_BVS","INS_CLC","INS_CLD","INS_CLI","INS_CLV","INS_CMP","INS_CPX","INS_CPY","INS_DEC","INS_DEX","INS_DEY","INS_EOR","INS_INC","INS_INX","INS_INY","INS_JMP","ADDR_INDABS","INS_JSR","INS_LDA","INS_LDX","ADDR_ZPY","INS_LDY","INS_LSR","INS_NOP","INS_ORA","INS_PHA","INS_PHP","INS_PLA","INS_PLP","INS_ROL","INS_ROR","INS_RTI","INS_RTS","INS_SBC","INS_SEC","INS_SED","INS_SEI","INS_STA","INS_STX","INS_STY","INS_TAX","INS_TAY","INS_TSX","INS_TXA","INS_TXS","INS_TYA","INS_ALR","INS_ANC","INS_ARR","INS_AXS","INS_LAX","INS_SAX","INS_DCP","INS_ISC","INS_RLA","INS_RRA","INS_SLO","INS_SRE","INS_SKB","INS_IGN","cycTable","instname","addrDesc","INS_DUMMY","inst","op","size","module","exports"],"sources":["/Users/zakariaalmardaee/csfolder/vintage-game-emulator/frontend/node_modules/jsnes/src/cpu.js"],"sourcesContent":["var utils = require(\"./utils\");\n\nvar CPU = function (nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.mem = null;\n  this.REG_ACC = null;\n  this.REG_X = null;\n  this.REG_Y = null;\n  this.REG_SP = null;\n  this.REG_PC = null;\n  this.REG_PC_NEW = null;\n  this.REG_STATUS = null;\n  this.F_CARRY = null;\n  this.F_DECIMAL = null;\n  this.F_INTERRUPT = null;\n  this.F_INTERRUPT_NEW = null;\n  this.F_OVERFLOW = null;\n  this.F_SIGN = null;\n  this.F_ZERO = null;\n  this.F_NOTUSED = null;\n  this.F_NOTUSED_NEW = null;\n  this.F_BRK = null;\n  this.F_BRK_NEW = null;\n  this.opdata = null;\n  this.cyclesToHalt = null;\n  this.crash = null;\n  this.irqRequested = null;\n  this.irqType = null;\n\n  this.reset();\n};\n\nCPU.prototype = {\n  // IRQ Types\n  IRQ_NORMAL: 0,\n  IRQ_NMI: 1,\n  IRQ_RESET: 2,\n\n  reset: function () {\n    // Main memory\n    this.mem = new Array(0x10000);\n\n    for (var i = 0; i < 0x2000; i++) {\n      this.mem[i] = 0xff;\n    }\n    for (var p = 0; p < 4; p++) {\n      var j = p * 0x800;\n      this.mem[j + 0x008] = 0xf7;\n      this.mem[j + 0x009] = 0xef;\n      this.mem[j + 0x00a] = 0xdf;\n      this.mem[j + 0x00f] = 0xbf;\n    }\n    for (var k = 0x2001; k < this.mem.length; k++) {\n      this.mem[k] = 0;\n    }\n\n    // CPU Registers:\n    this.REG_ACC = 0;\n    this.REG_X = 0;\n    this.REG_Y = 0;\n    // Reset Stack pointer:\n    this.REG_SP = 0x01ff;\n    // Reset Program counter:\n    this.REG_PC = 0x8000 - 1;\n    this.REG_PC_NEW = 0x8000 - 1;\n    // Reset Status register:\n    this.REG_STATUS = 0x28;\n\n    this.setStatus(0x28);\n\n    // Set flags:\n    this.F_CARRY = 0;\n    this.F_DECIMAL = 0;\n    this.F_INTERRUPT = 1;\n    this.F_INTERRUPT_NEW = 1;\n    this.F_OVERFLOW = 0;\n    this.F_SIGN = 0;\n    this.F_ZERO = 1;\n\n    this.F_NOTUSED = 1;\n    this.F_NOTUSED_NEW = 1;\n    this.F_BRK = 1;\n    this.F_BRK_NEW = 1;\n\n    this.opdata = new OpData().opdata;\n    this.cyclesToHalt = 0;\n\n    // Reset crash flag:\n    this.crash = false;\n\n    // Interrupt notification:\n    this.irqRequested = false;\n    this.irqType = null;\n  },\n\n  // Emulates a single CPU instruction, returns the number of cycles\n  emulate: function () {\n    var temp;\n    var add;\n\n    // Check interrupts:\n    if (this.irqRequested) {\n      temp =\n        this.F_CARRY |\n        ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n        (this.F_INTERRUPT << 2) |\n        (this.F_DECIMAL << 3) |\n        (this.F_BRK << 4) |\n        (this.F_NOTUSED << 5) |\n        (this.F_OVERFLOW << 6) |\n        (this.F_SIGN << 7);\n\n      this.REG_PC_NEW = this.REG_PC;\n      this.F_INTERRUPT_NEW = this.F_INTERRUPT;\n      switch (this.irqType) {\n        case 0: {\n          // Normal IRQ:\n          if (this.F_INTERRUPT !== 0) {\n            // console.log(\"Interrupt was masked.\");\n            break;\n          }\n          this.doIrq(temp);\n          // console.log(\"Did normal IRQ. I=\"+this.F_INTERRUPT);\n          break;\n        }\n        case 1: {\n          // NMI:\n          this.doNonMaskableInterrupt(temp);\n          break;\n        }\n        case 2: {\n          // Reset:\n          this.doResetInterrupt();\n          break;\n        }\n      }\n\n      this.REG_PC = this.REG_PC_NEW;\n      this.F_INTERRUPT = this.F_INTERRUPT_NEW;\n      this.F_BRK = this.F_BRK_NEW;\n      this.irqRequested = false;\n    }\n\n    var opinf = this.opdata[this.nes.mmap.load(this.REG_PC + 1)];\n    var cycleCount = opinf >> 24;\n    var cycleAdd = 0;\n\n    // Find address mode:\n    var addrMode = (opinf >> 8) & 0xff;\n\n    // Increment PC by number of op bytes:\n    var opaddr = this.REG_PC;\n    this.REG_PC += (opinf >> 16) & 0xff;\n\n    var addr = 0;\n    switch (addrMode) {\n      case 0: {\n        // Zero Page mode. Use the address given after the opcode,\n        // but without high byte.\n        addr = this.load(opaddr + 2);\n        break;\n      }\n      case 1: {\n        // Relative mode.\n        addr = this.load(opaddr + 2);\n        if (addr < 0x80) {\n          addr += this.REG_PC;\n        } else {\n          addr += this.REG_PC - 256;\n        }\n        break;\n      }\n      case 2: {\n        // Ignore. Address is implied in instruction.\n        break;\n      }\n      case 3: {\n        // Absolute mode. Use the two bytes following the opcode as\n        // an address.\n        addr = this.load16bit(opaddr + 2);\n        break;\n      }\n      case 4: {\n        // Accumulator mode. The address is in the accumulator\n        // register.\n        addr = this.REG_ACC;\n        break;\n      }\n      case 5: {\n        // Immediate mode. The value is given after the opcode.\n        addr = this.REG_PC;\n        break;\n      }\n      case 6: {\n        // Zero Page Indexed mode, X as index. Use the address given\n        // after the opcode, then add the\n        // X register to it to get the final address.\n        addr = (this.load(opaddr + 2) + this.REG_X) & 0xff;\n        break;\n      }\n      case 7: {\n        // Zero Page Indexed mode, Y as index. Use the address given\n        // after the opcode, then add the\n        // Y register to it to get the final address.\n        addr = (this.load(opaddr + 2) + this.REG_Y) & 0xff;\n        break;\n      }\n      case 8: {\n        // Absolute Indexed Mode, X as index. Same as zero page\n        // indexed, but with the high byte.\n        addr = this.load16bit(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_X;\n        break;\n      }\n      case 9: {\n        // Absolute Indexed Mode, Y as index. Same as zero page\n        // indexed, but with the high byte.\n        addr = this.load16bit(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_Y;\n        break;\n      }\n      case 10: {\n        // Pre-indexed Indirect mode. Find the 16-bit address\n        // starting at the given location plus\n        // the current X register. The value is the contents of that\n        // address.\n        addr = this.load(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_X;\n        addr &= 0xff;\n        addr = this.load16bit(addr);\n        break;\n      }\n      case 11: {\n        // Post-indexed Indirect mode. Find the 16-bit address\n        // contained in the given location\n        // (and the one following). Add to that address the contents\n        // of the Y register. Fetch the value\n        // stored at that adress.\n        addr = this.load16bit(this.load(opaddr + 2));\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_Y;\n        break;\n      }\n      case 12: {\n        // Indirect Absolute mode. Find the 16-bit address contained\n        // at the given location.\n        addr = this.load16bit(opaddr + 2); // Find op\n        if (addr < 0x1fff) {\n          addr =\n            this.mem[addr] +\n            (this.mem[(addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)] << 8); // Read from address given in op\n        } else {\n          addr =\n            this.nes.mmap.load(addr) +\n            (this.nes.mmap.load(\n              (addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)\n            ) <<\n              8);\n        }\n        break;\n      }\n    }\n    // Wrap around for addresses above 0xFFFF:\n    addr &= 0xffff;\n\n    // ----------------------------------------------------------------------------------------------------\n    // Decode & execute instruction:\n    // ----------------------------------------------------------------------------------------------------\n\n    // This should be compiled to a jump table.\n    switch (opinf & 0xff) {\n      case 0: {\n        // *******\n        // * ADC *\n        // *******\n\n        // Add with carry.\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\n\n        if (\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp > 255 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        this.REG_ACC = temp & 255;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 1: {\n        // *******\n        // * AND *\n        // *******\n\n        // AND memory with accumulator.\n        this.REG_ACC = this.REG_ACC & this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 2: {\n        // *******\n        // * ASL *\n        // *******\n\n        // Shift left one bit\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          this.F_CARRY = (this.REG_ACC >> 7) & 1;\n          this.REG_ACC = (this.REG_ACC << 1) & 255;\n          this.F_SIGN = (this.REG_ACC >> 7) & 1;\n          this.F_ZERO = this.REG_ACC;\n        } else {\n          temp = this.load(addr);\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = (temp << 1) & 255;\n          this.F_SIGN = (temp >> 7) & 1;\n          this.F_ZERO = temp;\n          this.write(addr, temp);\n        }\n        break;\n      }\n      case 3: {\n        // *******\n        // * BCC *\n        // *******\n\n        // Branch on carry clear\n        if (this.F_CARRY === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 4: {\n        // *******\n        // * BCS *\n        // *******\n\n        // Branch on carry set\n        if (this.F_CARRY === 1) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 5: {\n        // *******\n        // * BEQ *\n        // *******\n\n        // Branch on zero\n        if (this.F_ZERO === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 6: {\n        // *******\n        // * BIT *\n        // *******\n\n        temp = this.load(addr);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        temp &= this.REG_ACC;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 7: {\n        // *******\n        // * BMI *\n        // *******\n\n        // Branch on negative result\n        if (this.F_SIGN === 1) {\n          cycleCount++;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 8: {\n        // *******\n        // * BNE *\n        // *******\n\n        // Branch on not zero\n        if (this.F_ZERO !== 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 9: {\n        // *******\n        // * BPL *\n        // *******\n\n        // Branch on positive result\n        if (this.F_SIGN === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 10: {\n        // *******\n        // * BRK *\n        // *******\n\n        this.REG_PC += 2;\n        this.push((this.REG_PC >> 8) & 255);\n        this.push(this.REG_PC & 255);\n        this.F_BRK = 1;\n\n        this.push(\n          this.F_CARRY |\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n            (this.F_INTERRUPT << 2) |\n            (this.F_DECIMAL << 3) |\n            (this.F_BRK << 4) |\n            (this.F_NOTUSED << 5) |\n            (this.F_OVERFLOW << 6) |\n            (this.F_SIGN << 7)\n        );\n\n        this.F_INTERRUPT = 1;\n        //this.REG_PC = load(0xFFFE) | (load(0xFFFF) << 8);\n        this.REG_PC = this.load16bit(0xfffe);\n        this.REG_PC--;\n        break;\n      }\n      case 11: {\n        // *******\n        // * BVC *\n        // *******\n\n        // Branch on overflow clear\n        if (this.F_OVERFLOW === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 12: {\n        // *******\n        // * BVS *\n        // *******\n\n        // Branch on overflow set\n        if (this.F_OVERFLOW === 1) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 13: {\n        // *******\n        // * CLC *\n        // *******\n\n        // Clear carry flag\n        this.F_CARRY = 0;\n        break;\n      }\n      case 14: {\n        // *******\n        // * CLD *\n        // *******\n\n        // Clear decimal flag\n        this.F_DECIMAL = 0;\n        break;\n      }\n      case 15: {\n        // *******\n        // * CLI *\n        // *******\n\n        // Clear interrupt flag\n        this.F_INTERRUPT = 0;\n        break;\n      }\n      case 16: {\n        // *******\n        // * CLV *\n        // *******\n\n        // Clear overflow flag\n        this.F_OVERFLOW = 0;\n        break;\n      }\n      case 17: {\n        // *******\n        // * CMP *\n        // *******\n\n        // Compare memory and accumulator:\n        temp = this.REG_ACC - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 18: {\n        // *******\n        // * CPX *\n        // *******\n\n        // Compare memory and index X:\n        temp = this.REG_X - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        break;\n      }\n      case 19: {\n        // *******\n        // * CPY *\n        // *******\n\n        // Compare memory and index Y:\n        temp = this.REG_Y - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        break;\n      }\n      case 20: {\n        // *******\n        // * DEC *\n        // *******\n\n        // Decrement memory by one:\n        temp = (this.load(addr) - 1) & 0xff;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.write(addr, temp);\n        break;\n      }\n      case 21: {\n        // *******\n        // * DEX *\n        // *******\n\n        // Decrement index X by one:\n        this.REG_X = (this.REG_X - 1) & 0xff;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 22: {\n        // *******\n        // * DEY *\n        // *******\n\n        // Decrement index Y by one:\n        this.REG_Y = (this.REG_Y - 1) & 0xff;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 23: {\n        // *******\n        // * EOR *\n        // *******\n\n        // XOR Memory with accumulator, store in accumulator:\n        this.REG_ACC = (this.load(addr) ^ this.REG_ACC) & 0xff;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 24: {\n        // *******\n        // * INC *\n        // *******\n\n        // Increment memory by one:\n        temp = (this.load(addr) + 1) & 0xff;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.write(addr, temp & 0xff);\n        break;\n      }\n      case 25: {\n        // *******\n        // * INX *\n        // *******\n\n        // Increment index X by one:\n        this.REG_X = (this.REG_X + 1) & 0xff;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 26: {\n        // *******\n        // * INY *\n        // *******\n\n        // Increment index Y by one:\n        this.REG_Y++;\n        this.REG_Y &= 0xff;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 27: {\n        // *******\n        // * JMP *\n        // *******\n\n        // Jump to new location:\n        this.REG_PC = addr - 1;\n        break;\n      }\n      case 28: {\n        // *******\n        // * JSR *\n        // *******\n\n        // Jump to new location, saving return address.\n        // Push return address on stack:\n        this.push((this.REG_PC >> 8) & 255);\n        this.push(this.REG_PC & 255);\n        this.REG_PC = addr - 1;\n        break;\n      }\n      case 29: {\n        // *******\n        // * LDA *\n        // *******\n\n        // Load accumulator with memory:\n        this.REG_ACC = this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 30: {\n        // *******\n        // * LDX *\n        // *******\n\n        // Load index X with memory:\n        this.REG_X = this.load(addr);\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 31: {\n        // *******\n        // * LDY *\n        // *******\n\n        // Load index Y with memory:\n        this.REG_Y = this.load(addr);\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 32: {\n        // *******\n        // * LSR *\n        // *******\n\n        // Shift right one bit:\n        if (addrMode === 4) {\n          // ADDR_ACC\n\n          temp = this.REG_ACC & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr) & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = 0;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 33: {\n        // *******\n        // * NOP *\n        // *******\n\n        // No OPeration.\n        // Ignore.\n        break;\n      }\n      case 34: {\n        // *******\n        // * ORA *\n        // *******\n\n        // OR memory with accumulator, store in accumulator.\n        temp = (this.load(addr) | this.REG_ACC) & 255;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.REG_ACC = temp;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 35: {\n        // *******\n        // * PHA *\n        // *******\n\n        // Push accumulator on stack\n        this.push(this.REG_ACC);\n        break;\n      }\n      case 36: {\n        // *******\n        // * PHP *\n        // *******\n\n        // Push processor status on stack\n        this.F_BRK = 1;\n        this.push(\n          this.F_CARRY |\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n            (this.F_INTERRUPT << 2) |\n            (this.F_DECIMAL << 3) |\n            (this.F_BRK << 4) |\n            (this.F_NOTUSED << 5) |\n            (this.F_OVERFLOW << 6) |\n            (this.F_SIGN << 7)\n        );\n        break;\n      }\n      case 37: {\n        // *******\n        // * PLA *\n        // *******\n\n        // Pull accumulator from stack\n        this.REG_ACC = this.pull();\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 38: {\n        // *******\n        // * PLP *\n        // *******\n\n        // Pull processor status from stack\n        temp = this.pull();\n        this.F_CARRY = temp & 1;\n        this.F_ZERO = ((temp >> 1) & 1) === 1 ? 0 : 1;\n        this.F_INTERRUPT = (temp >> 2) & 1;\n        this.F_DECIMAL = (temp >> 3) & 1;\n        this.F_BRK = (temp >> 4) & 1;\n        this.F_NOTUSED = (temp >> 5) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        this.F_SIGN = (temp >> 7) & 1;\n\n        this.F_NOTUSED = 1;\n        break;\n      }\n      case 39: {\n        // *******\n        // * ROL *\n        // *******\n\n        // Rotate one bit left\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          temp = this.REG_ACC;\n          add = this.F_CARRY;\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = ((temp << 1) & 0xff) + add;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr);\n          add = this.F_CARRY;\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = ((temp << 1) & 0xff) + add;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 40: {\n        // *******\n        // * ROR *\n        // *******\n\n        // Rotate one bit right\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          add = this.F_CARRY << 7;\n          this.F_CARRY = this.REG_ACC & 1;\n          temp = (this.REG_ACC >> 1) + add;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr);\n          add = this.F_CARRY << 7;\n          this.F_CARRY = temp & 1;\n          temp = (temp >> 1) + add;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 41: {\n        // *******\n        // * RTI *\n        // *******\n\n        // Return from interrupt. Pull status and PC from stack.\n\n        temp = this.pull();\n        this.F_CARRY = temp & 1;\n        this.F_ZERO = ((temp >> 1) & 1) === 0 ? 1 : 0;\n        this.F_INTERRUPT = (temp >> 2) & 1;\n        this.F_DECIMAL = (temp >> 3) & 1;\n        this.F_BRK = (temp >> 4) & 1;\n        this.F_NOTUSED = (temp >> 5) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        this.F_SIGN = (temp >> 7) & 1;\n\n        this.REG_PC = this.pull();\n        this.REG_PC += this.pull() << 8;\n        if (this.REG_PC === 0xffff) {\n          return;\n        }\n        this.REG_PC--;\n        this.F_NOTUSED = 1;\n        break;\n      }\n      case 42: {\n        // *******\n        // * RTS *\n        // *******\n\n        // Return from subroutine. Pull PC from stack.\n\n        this.REG_PC = this.pull();\n        this.REG_PC += this.pull() << 8;\n\n        if (this.REG_PC === 0xffff) {\n          return; // return from NSF play routine:\n        }\n        break;\n      }\n      case 43: {\n        // *******\n        // * SBC *\n        // *******\n\n        temp = this.REG_ACC - this.load(addr) - (1 - this.F_CARRY);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_ACC = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 44: {\n        // *******\n        // * SEC *\n        // *******\n\n        // Set carry flag\n        this.F_CARRY = 1;\n        break;\n      }\n      case 45: {\n        // *******\n        // * SED *\n        // *******\n\n        // Set decimal mode\n        this.F_DECIMAL = 1;\n        break;\n      }\n      case 46: {\n        // *******\n        // * SEI *\n        // *******\n\n        // Set interrupt disable status\n        this.F_INTERRUPT = 1;\n        break;\n      }\n      case 47: {\n        // *******\n        // * STA *\n        // *******\n\n        // Store accumulator in memory\n        this.write(addr, this.REG_ACC);\n        break;\n      }\n      case 48: {\n        // *******\n        // * STX *\n        // *******\n\n        // Store index X in memory\n        this.write(addr, this.REG_X);\n        break;\n      }\n      case 49: {\n        // *******\n        // * STY *\n        // *******\n\n        // Store index Y in memory:\n        this.write(addr, this.REG_Y);\n        break;\n      }\n      case 50: {\n        // *******\n        // * TAX *\n        // *******\n\n        // Transfer accumulator to index X:\n        this.REG_X = this.REG_ACC;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 51: {\n        // *******\n        // * TAY *\n        // *******\n\n        // Transfer accumulator to index Y:\n        this.REG_Y = this.REG_ACC;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 52: {\n        // *******\n        // * TSX *\n        // *******\n\n        // Transfer stack pointer to index X:\n        this.REG_X = this.REG_SP - 0x0100;\n        this.F_SIGN = (this.REG_SP >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 53: {\n        // *******\n        // * TXA *\n        // *******\n\n        // Transfer index X to accumulator:\n        this.REG_ACC = this.REG_X;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 54: {\n        // *******\n        // * TXS *\n        // *******\n\n        // Transfer index X to stack pointer:\n        this.REG_SP = this.REG_X + 0x0100;\n        this.stackWrap();\n        break;\n      }\n      case 55: {\n        // *******\n        // * TYA *\n        // *******\n\n        // Transfer index Y to accumulator:\n        this.REG_ACC = this.REG_Y;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 56: {\n        // *******\n        // * ALR *\n        // *******\n\n        // Shift right one bit after ANDing:\n        temp = this.REG_ACC & this.load(addr);\n        this.F_CARRY = temp & 1;\n        this.REG_ACC = this.F_ZERO = temp >> 1;\n        this.F_SIGN = 0;\n        break;\n      }\n      case 57: {\n        // *******\n        // * ANC *\n        // *******\n\n        // AND accumulator, setting carry to bit 7 result.\n        this.REG_ACC = this.F_ZERO = this.REG_ACC & this.load(addr);\n        this.F_CARRY = this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        break;\n      }\n      case 58: {\n        // *******\n        // * ARR *\n        // *******\n\n        // Rotate right one bit after ANDing:\n        temp = this.REG_ACC & this.load(addr);\n        this.REG_ACC = this.F_ZERO = (temp >> 1) + (this.F_CARRY << 7);\n        this.F_SIGN = this.F_CARRY;\n        this.F_CARRY = (temp >> 7) & 1;\n        this.F_OVERFLOW = ((temp >> 7) ^ (temp >> 6)) & 1;\n        break;\n      }\n      case 59: {\n        // *******\n        // * AXS *\n        // *******\n\n        // Set X to (X AND A) - value.\n        temp = (this.REG_X & this.REG_ACC) - this.load(addr);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_X ^ temp) & 0x80) !== 0 &&\n          ((this.REG_X ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_X = temp & 0xff;\n        break;\n      }\n      case 60: {\n        // *******\n        // * LAX *\n        // *******\n\n        // Load A and X with memory:\n        this.REG_ACC = this.REG_X = this.F_ZERO = this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 61: {\n        // *******\n        // * SAX *\n        // *******\n\n        // Store A AND X in memory:\n        this.write(addr, this.REG_ACC & this.REG_X);\n        break;\n      }\n      case 62: {\n        // *******\n        // * DCP *\n        // *******\n\n        // Decrement memory by one:\n        temp = (this.load(addr) - 1) & 0xff;\n        this.write(addr, temp);\n\n        // Then compare with the accumulator:\n        temp = this.REG_ACC - temp;\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 63: {\n        // *******\n        // * ISC *\n        // *******\n\n        // Increment memory by one:\n        temp = (this.load(addr) + 1) & 0xff;\n        this.write(addr, temp);\n\n        // Then subtract from the accumulator:\n        temp = this.REG_ACC - temp - (1 - this.F_CARRY);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_ACC = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 64: {\n        // *******\n        // * RLA *\n        // *******\n\n        // Rotate one bit left\n        temp = this.load(addr);\n        add = this.F_CARRY;\n        this.F_CARRY = (temp >> 7) & 1;\n        temp = ((temp << 1) & 0xff) + add;\n        this.write(addr, temp);\n\n        // Then AND with the accumulator.\n        this.REG_ACC = this.REG_ACC & temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 65: {\n        // *******\n        // * RRA *\n        // *******\n\n        // Rotate one bit right\n        temp = this.load(addr);\n        add = this.F_CARRY << 7;\n        this.F_CARRY = temp & 1;\n        temp = (temp >> 1) + add;\n        this.write(addr, temp);\n\n        // Then add to the accumulator\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\n\n        if (\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp > 255 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        this.REG_ACC = temp & 255;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 66: {\n        // *******\n        // * SLO *\n        // *******\n\n        // Shift one bit left\n        temp = this.load(addr);\n        this.F_CARRY = (temp >> 7) & 1;\n        temp = (temp << 1) & 255;\n        this.write(addr, temp);\n\n        // Then OR with the accumulator.\n        this.REG_ACC = this.REG_ACC | temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 67: {\n        // *******\n        // * SRE *\n        // *******\n\n        // Shift one bit right\n        temp = this.load(addr) & 0xff;\n        this.F_CARRY = temp & 1;\n        temp >>= 1;\n        this.write(addr, temp);\n\n        // Then XOR with the accumulator.\n        this.REG_ACC = this.REG_ACC ^ temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 68: {\n        // *******\n        // * SKB *\n        // *******\n\n        // Do nothing\n        break;\n      }\n      case 69: {\n        // *******\n        // * IGN *\n        // *******\n\n        // Do nothing but load.\n        // TODO: Properly implement the double-reads.\n        this.load(addr);\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n\n      default: {\n        // *******\n        // * ??? *\n        // *******\n\n        this.nes.stop();\n        this.nes.crashMessage =\n          \"Game crashed, invalid opcode at address $\" + opaddr.toString(16);\n        break;\n      }\n    } // end of switch\n\n    return cycleCount;\n  },\n\n  load: function (addr) {\n    if (addr < 0x2000) {\n      return this.mem[addr & 0x7ff];\n    } else {\n      return this.nes.mmap.load(addr);\n    }\n  },\n\n  load16bit: function (addr) {\n    if (addr < 0x1fff) {\n      return this.mem[addr & 0x7ff] | (this.mem[(addr + 1) & 0x7ff] << 8);\n    } else {\n      return this.nes.mmap.load(addr) | (this.nes.mmap.load(addr + 1) << 8);\n    }\n  },\n\n  write: function (addr, val) {\n    if (addr < 0x2000) {\n      this.mem[addr & 0x7ff] = val;\n    } else {\n      this.nes.mmap.write(addr, val);\n    }\n  },\n\n  requestIrq: function (type) {\n    if (this.irqRequested) {\n      if (type === this.IRQ_NORMAL) {\n        return;\n      }\n      // console.log(\"too fast irqs. type=\"+type);\n    }\n    this.irqRequested = true;\n    this.irqType = type;\n  },\n\n  push: function (value) {\n    this.nes.mmap.write(this.REG_SP, value);\n    this.REG_SP--;\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n  },\n\n  stackWrap: function () {\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n  },\n\n  pull: function () {\n    this.REG_SP++;\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n    return this.nes.mmap.load(this.REG_SP);\n  },\n\n  pageCrossed: function (addr1, addr2) {\n    return (addr1 & 0xff00) !== (addr2 & 0xff00);\n  },\n\n  haltCycles: function (cycles) {\n    this.cyclesToHalt += cycles;\n  },\n\n  doNonMaskableInterrupt: function (status) {\n    if ((this.nes.mmap.load(0x2000) & 128) !== 0) {\n      // Check whether VBlank Interrupts are enabled\n\n      this.REG_PC_NEW++;\n      this.push((this.REG_PC_NEW >> 8) & 0xff);\n      this.push(this.REG_PC_NEW & 0xff);\n      //this.F_INTERRUPT_NEW = 1;\n      this.push(status);\n\n      this.REG_PC_NEW =\n        this.nes.mmap.load(0xfffa) | (this.nes.mmap.load(0xfffb) << 8);\n      this.REG_PC_NEW--;\n    }\n  },\n\n  doResetInterrupt: function () {\n    this.REG_PC_NEW =\n      this.nes.mmap.load(0xfffc) | (this.nes.mmap.load(0xfffd) << 8);\n    this.REG_PC_NEW--;\n  },\n\n  doIrq: function (status) {\n    this.REG_PC_NEW++;\n    this.push((this.REG_PC_NEW >> 8) & 0xff);\n    this.push(this.REG_PC_NEW & 0xff);\n    this.push(status);\n    this.F_INTERRUPT_NEW = 1;\n    this.F_BRK_NEW = 0;\n\n    this.REG_PC_NEW =\n      this.nes.mmap.load(0xfffe) | (this.nes.mmap.load(0xffff) << 8);\n    this.REG_PC_NEW--;\n  },\n\n  getStatus: function () {\n    return (\n      this.F_CARRY |\n      (this.F_ZERO << 1) |\n      (this.F_INTERRUPT << 2) |\n      (this.F_DECIMAL << 3) |\n      (this.F_BRK << 4) |\n      (this.F_NOTUSED << 5) |\n      (this.F_OVERFLOW << 6) |\n      (this.F_SIGN << 7)\n    );\n  },\n\n  setStatus: function (st) {\n    this.F_CARRY = st & 1;\n    this.F_ZERO = (st >> 1) & 1;\n    this.F_INTERRUPT = (st >> 2) & 1;\n    this.F_DECIMAL = (st >> 3) & 1;\n    this.F_BRK = (st >> 4) & 1;\n    this.F_NOTUSED = (st >> 5) & 1;\n    this.F_OVERFLOW = (st >> 6) & 1;\n    this.F_SIGN = (st >> 7) & 1;\n  },\n\n  JSON_PROPERTIES: [\n    \"mem\",\n    \"cyclesToHalt\",\n    \"irqRequested\",\n    \"irqType\",\n    // Registers\n    \"REG_ACC\",\n    \"REG_X\",\n    \"REG_Y\",\n    \"REG_SP\",\n    \"REG_PC\",\n    \"REG_PC_NEW\",\n    \"REG_STATUS\",\n    // Status\n    \"F_CARRY\",\n    \"F_DECIMAL\",\n    \"F_INTERRUPT\",\n    \"F_INTERRUPT_NEW\",\n    \"F_OVERFLOW\",\n    \"F_SIGN\",\n    \"F_ZERO\",\n    \"F_NOTUSED\",\n    \"F_NOTUSED_NEW\",\n    \"F_BRK\",\n    \"F_BRK_NEW\",\n  ],\n\n  toJSON: function () {\n    return utils.toJSON(this);\n  },\n\n  fromJSON: function (s) {\n    utils.fromJSON(this, s);\n  },\n};\n\n// Generates and provides an array of details about instructions\nvar OpData = function () {\n  this.opdata = new Array(256);\n\n  // Set all to invalid instruction (to detect crashes):\n  for (var i = 0; i < 256; i++) this.opdata[i] = 0xff;\n\n  // Now fill in all valid opcodes:\n\n  // ADC:\n  this.setOp(this.INS_ADC, 0x69, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ADC, 0x65, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ADC, 0x75, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ADC, 0x6d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ADC, 0x7d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ADC, 0x79, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ADC, 0x61, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ADC, 0x71, this.ADDR_POSTIDXIND, 2, 5);\n\n  // AND:\n  this.setOp(this.INS_AND, 0x29, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_AND, 0x25, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_AND, 0x35, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_AND, 0x2d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_AND, 0x3d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_AND, 0x39, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_AND, 0x21, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_AND, 0x31, this.ADDR_POSTIDXIND, 2, 5);\n\n  // ASL:\n  this.setOp(this.INS_ASL, 0x0a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ASL, 0x06, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ASL, 0x16, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ASL, 0x0e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ASL, 0x1e, this.ADDR_ABSX, 3, 7);\n\n  // BCC:\n  this.setOp(this.INS_BCC, 0x90, this.ADDR_REL, 2, 2);\n\n  // BCS:\n  this.setOp(this.INS_BCS, 0xb0, this.ADDR_REL, 2, 2);\n\n  // BEQ:\n  this.setOp(this.INS_BEQ, 0xf0, this.ADDR_REL, 2, 2);\n\n  // BIT:\n  this.setOp(this.INS_BIT, 0x24, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_BIT, 0x2c, this.ADDR_ABS, 3, 4);\n\n  // BMI:\n  this.setOp(this.INS_BMI, 0x30, this.ADDR_REL, 2, 2);\n\n  // BNE:\n  this.setOp(this.INS_BNE, 0xd0, this.ADDR_REL, 2, 2);\n\n  // BPL:\n  this.setOp(this.INS_BPL, 0x10, this.ADDR_REL, 2, 2);\n\n  // BRK:\n  this.setOp(this.INS_BRK, 0x00, this.ADDR_IMP, 1, 7);\n\n  // BVC:\n  this.setOp(this.INS_BVC, 0x50, this.ADDR_REL, 2, 2);\n\n  // BVS:\n  this.setOp(this.INS_BVS, 0x70, this.ADDR_REL, 2, 2);\n\n  // CLC:\n  this.setOp(this.INS_CLC, 0x18, this.ADDR_IMP, 1, 2);\n\n  // CLD:\n  this.setOp(this.INS_CLD, 0xd8, this.ADDR_IMP, 1, 2);\n\n  // CLI:\n  this.setOp(this.INS_CLI, 0x58, this.ADDR_IMP, 1, 2);\n\n  // CLV:\n  this.setOp(this.INS_CLV, 0xb8, this.ADDR_IMP, 1, 2);\n\n  // CMP:\n  this.setOp(this.INS_CMP, 0xc9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CMP, 0xc5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CMP, 0xd5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_CMP, 0xcd, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_CMP, 0xdd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_CMP, 0xd9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_CMP, 0xc1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_CMP, 0xd1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // CPX:\n  this.setOp(this.INS_CPX, 0xe0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPX, 0xe4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPX, 0xec, this.ADDR_ABS, 3, 4);\n\n  // CPY:\n  this.setOp(this.INS_CPY, 0xc0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPY, 0xc4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPY, 0xcc, this.ADDR_ABS, 3, 4);\n\n  // DEC:\n  this.setOp(this.INS_DEC, 0xc6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_DEC, 0xd6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_DEC, 0xce, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_DEC, 0xde, this.ADDR_ABSX, 3, 7);\n\n  // DEX:\n  this.setOp(this.INS_DEX, 0xca, this.ADDR_IMP, 1, 2);\n\n  // DEY:\n  this.setOp(this.INS_DEY, 0x88, this.ADDR_IMP, 1, 2);\n\n  // EOR:\n  this.setOp(this.INS_EOR, 0x49, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_EOR, 0x45, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_EOR, 0x55, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_EOR, 0x4d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_EOR, 0x5d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_EOR, 0x59, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_EOR, 0x41, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_EOR, 0x51, this.ADDR_POSTIDXIND, 2, 5);\n\n  // INC:\n  this.setOp(this.INS_INC, 0xe6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_INC, 0xf6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_INC, 0xee, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_INC, 0xfe, this.ADDR_ABSX, 3, 7);\n\n  // INX:\n  this.setOp(this.INS_INX, 0xe8, this.ADDR_IMP, 1, 2);\n\n  // INY:\n  this.setOp(this.INS_INY, 0xc8, this.ADDR_IMP, 1, 2);\n\n  // JMP:\n  this.setOp(this.INS_JMP, 0x4c, this.ADDR_ABS, 3, 3);\n  this.setOp(this.INS_JMP, 0x6c, this.ADDR_INDABS, 3, 5);\n\n  // JSR:\n  this.setOp(this.INS_JSR, 0x20, this.ADDR_ABS, 3, 6);\n\n  // LDA:\n  this.setOp(this.INS_LDA, 0xa9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDA, 0xa5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDA, 0xb5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDA, 0xad, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDA, 0xbd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_LDA, 0xb9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_LDA, 0xa1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_LDA, 0xb1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // LDX:\n  this.setOp(this.INS_LDX, 0xa2, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDX, 0xa6, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDX, 0xb6, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_LDX, 0xae, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDX, 0xbe, this.ADDR_ABSY, 3, 4);\n\n  // LDY:\n  this.setOp(this.INS_LDY, 0xa0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDY, 0xa4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDY, 0xb4, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDY, 0xac, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDY, 0xbc, this.ADDR_ABSX, 3, 4);\n\n  // LSR:\n  this.setOp(this.INS_LSR, 0x4a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_LSR, 0x46, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_LSR, 0x56, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_LSR, 0x4e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_LSR, 0x5e, this.ADDR_ABSX, 3, 7);\n\n  // NOP:\n  this.setOp(this.INS_NOP, 0x1a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x3a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x5a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x7a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xda, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xea, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xfa, this.ADDR_IMP, 1, 2);\n\n  // ORA:\n  this.setOp(this.INS_ORA, 0x09, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ORA, 0x05, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ORA, 0x15, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ORA, 0x0d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ORA, 0x1d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ORA, 0x19, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ORA, 0x01, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ORA, 0x11, this.ADDR_POSTIDXIND, 2, 5);\n\n  // PHA:\n  this.setOp(this.INS_PHA, 0x48, this.ADDR_IMP, 1, 3);\n\n  // PHP:\n  this.setOp(this.INS_PHP, 0x08, this.ADDR_IMP, 1, 3);\n\n  // PLA:\n  this.setOp(this.INS_PLA, 0x68, this.ADDR_IMP, 1, 4);\n\n  // PLP:\n  this.setOp(this.INS_PLP, 0x28, this.ADDR_IMP, 1, 4);\n\n  // ROL:\n  this.setOp(this.INS_ROL, 0x2a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROL, 0x26, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROL, 0x36, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROL, 0x2e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROL, 0x3e, this.ADDR_ABSX, 3, 7);\n\n  // ROR:\n  this.setOp(this.INS_ROR, 0x6a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROR, 0x66, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROR, 0x76, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROR, 0x6e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROR, 0x7e, this.ADDR_ABSX, 3, 7);\n\n  // RTI:\n  this.setOp(this.INS_RTI, 0x40, this.ADDR_IMP, 1, 6);\n\n  // RTS:\n  this.setOp(this.INS_RTS, 0x60, this.ADDR_IMP, 1, 6);\n\n  // SBC:\n  this.setOp(this.INS_SBC, 0xe9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SBC, 0xe5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_SBC, 0xf5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_SBC, 0xed, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_SBC, 0xfd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_SBC, 0xf9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_SBC, 0xe1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_SBC, 0xf1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // SEC:\n  this.setOp(this.INS_SEC, 0x38, this.ADDR_IMP, 1, 2);\n\n  // SED:\n  this.setOp(this.INS_SED, 0xf8, this.ADDR_IMP, 1, 2);\n\n  // SEI:\n  this.setOp(this.INS_SEI, 0x78, this.ADDR_IMP, 1, 2);\n\n  // STA:\n  this.setOp(this.INS_STA, 0x85, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STA, 0x95, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STA, 0x8d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_STA, 0x9d, this.ADDR_ABSX, 3, 5);\n  this.setOp(this.INS_STA, 0x99, this.ADDR_ABSY, 3, 5);\n  this.setOp(this.INS_STA, 0x81, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_STA, 0x91, this.ADDR_POSTIDXIND, 2, 6);\n\n  // STX:\n  this.setOp(this.INS_STX, 0x86, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STX, 0x96, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_STX, 0x8e, this.ADDR_ABS, 3, 4);\n\n  // STY:\n  this.setOp(this.INS_STY, 0x84, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STY, 0x94, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STY, 0x8c, this.ADDR_ABS, 3, 4);\n\n  // TAX:\n  this.setOp(this.INS_TAX, 0xaa, this.ADDR_IMP, 1, 2);\n\n  // TAY:\n  this.setOp(this.INS_TAY, 0xa8, this.ADDR_IMP, 1, 2);\n\n  // TSX:\n  this.setOp(this.INS_TSX, 0xba, this.ADDR_IMP, 1, 2);\n\n  // TXA:\n  this.setOp(this.INS_TXA, 0x8a, this.ADDR_IMP, 1, 2);\n\n  // TXS:\n  this.setOp(this.INS_TXS, 0x9a, this.ADDR_IMP, 1, 2);\n\n  // TYA:\n  this.setOp(this.INS_TYA, 0x98, this.ADDR_IMP, 1, 2);\n\n  // ALR:\n  this.setOp(this.INS_ALR, 0x4b, this.ADDR_IMM, 2, 2);\n\n  // ANC:\n  this.setOp(this.INS_ANC, 0x0b, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ANC, 0x2b, this.ADDR_IMM, 2, 2);\n\n  // ARR:\n  this.setOp(this.INS_ARR, 0x6b, this.ADDR_IMM, 2, 2);\n\n  // AXS:\n  this.setOp(this.INS_AXS, 0xcb, this.ADDR_IMM, 2, 2);\n\n  // LAX:\n  this.setOp(this.INS_LAX, 0xa3, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_LAX, 0xa7, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LAX, 0xaf, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LAX, 0xb3, this.ADDR_POSTIDXIND, 2, 5);\n  this.setOp(this.INS_LAX, 0xb7, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_LAX, 0xbf, this.ADDR_ABSY, 3, 4);\n\n  // SAX:\n  this.setOp(this.INS_SAX, 0x83, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_SAX, 0x87, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_SAX, 0x8f, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_SAX, 0x97, this.ADDR_ZPY, 2, 4);\n\n  // DCP:\n  this.setOp(this.INS_DCP, 0xc3, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_DCP, 0xc7, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_DCP, 0xcf, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_DCP, 0xd3, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_DCP, 0xd7, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_DCP, 0xdb, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_DCP, 0xdf, this.ADDR_ABSX, 3, 7);\n\n  // ISC:\n  this.setOp(this.INS_ISC, 0xe3, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_ISC, 0xe7, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ISC, 0xef, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ISC, 0xf3, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_ISC, 0xf7, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ISC, 0xfb, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_ISC, 0xff, this.ADDR_ABSX, 3, 7);\n\n  // RLA:\n  this.setOp(this.INS_RLA, 0x23, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_RLA, 0x27, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_RLA, 0x2f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_RLA, 0x33, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_RLA, 0x37, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_RLA, 0x3b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_RLA, 0x3f, this.ADDR_ABSX, 3, 7);\n\n  // RRA:\n  this.setOp(this.INS_RRA, 0x63, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_RRA, 0x67, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_RRA, 0x6f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_RRA, 0x73, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_RRA, 0x77, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_RRA, 0x7b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_RRA, 0x7f, this.ADDR_ABSX, 3, 7);\n\n  // SLO:\n  this.setOp(this.INS_SLO, 0x03, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_SLO, 0x07, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_SLO, 0x0f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_SLO, 0x13, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_SLO, 0x17, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_SLO, 0x1b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_SLO, 0x1f, this.ADDR_ABSX, 3, 7);\n\n  // SRE:\n  this.setOp(this.INS_SRE, 0x43, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_SRE, 0x47, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_SRE, 0x4f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_SRE, 0x53, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_SRE, 0x57, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_SRE, 0x5b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_SRE, 0x5f, this.ADDR_ABSX, 3, 7);\n\n  // SKB:\n  this.setOp(this.INS_SKB, 0x80, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0x82, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0x89, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0xc2, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0xe2, this.ADDR_IMM, 2, 2);\n\n  // SKB:\n  this.setOp(this.INS_IGN, 0x0c, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_IGN, 0x1c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x3c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x5c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x7c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0xdc, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0xfc, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x04, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x44, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x64, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x14, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x34, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x54, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x74, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0xd4, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0xf4, this.ADDR_ZPX, 2, 4);\n\n  // prettier-ignore\n  this.cycTable = new Array(\n    /*0x00*/ 7,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,\n    /*0x10*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x20*/ 6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,\n    /*0x30*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x40*/ 6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,\n    /*0x50*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x60*/ 6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,\n    /*0x70*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x80*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\n    /*0x90*/ 2,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,\n    /*0xA0*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\n    /*0xB0*/ 2,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,\n    /*0xC0*/ 2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,\n    /*0xD0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0xE0*/ 2,6,3,8,3,3,5,5,2,2,2,2,4,4,6,6,\n    /*0xF0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7\n  );\n\n  this.instname = new Array(70);\n\n  // Instruction Names:\n  this.instname[0] = \"ADC\";\n  this.instname[1] = \"AND\";\n  this.instname[2] = \"ASL\";\n  this.instname[3] = \"BCC\";\n  this.instname[4] = \"BCS\";\n  this.instname[5] = \"BEQ\";\n  this.instname[6] = \"BIT\";\n  this.instname[7] = \"BMI\";\n  this.instname[8] = \"BNE\";\n  this.instname[9] = \"BPL\";\n  this.instname[10] = \"BRK\";\n  this.instname[11] = \"BVC\";\n  this.instname[12] = \"BVS\";\n  this.instname[13] = \"CLC\";\n  this.instname[14] = \"CLD\";\n  this.instname[15] = \"CLI\";\n  this.instname[16] = \"CLV\";\n  this.instname[17] = \"CMP\";\n  this.instname[18] = \"CPX\";\n  this.instname[19] = \"CPY\";\n  this.instname[20] = \"DEC\";\n  this.instname[21] = \"DEX\";\n  this.instname[22] = \"DEY\";\n  this.instname[23] = \"EOR\";\n  this.instname[24] = \"INC\";\n  this.instname[25] = \"INX\";\n  this.instname[26] = \"INY\";\n  this.instname[27] = \"JMP\";\n  this.instname[28] = \"JSR\";\n  this.instname[29] = \"LDA\";\n  this.instname[30] = \"LDX\";\n  this.instname[31] = \"LDY\";\n  this.instname[32] = \"LSR\";\n  this.instname[33] = \"NOP\";\n  this.instname[34] = \"ORA\";\n  this.instname[35] = \"PHA\";\n  this.instname[36] = \"PHP\";\n  this.instname[37] = \"PLA\";\n  this.instname[38] = \"PLP\";\n  this.instname[39] = \"ROL\";\n  this.instname[40] = \"ROR\";\n  this.instname[41] = \"RTI\";\n  this.instname[42] = \"RTS\";\n  this.instname[43] = \"SBC\";\n  this.instname[44] = \"SEC\";\n  this.instname[45] = \"SED\";\n  this.instname[46] = \"SEI\";\n  this.instname[47] = \"STA\";\n  this.instname[48] = \"STX\";\n  this.instname[49] = \"STY\";\n  this.instname[50] = \"TAX\";\n  this.instname[51] = \"TAY\";\n  this.instname[52] = \"TSX\";\n  this.instname[53] = \"TXA\";\n  this.instname[54] = \"TXS\";\n  this.instname[55] = \"TYA\";\n  this.instname[56] = \"ALR\";\n  this.instname[57] = \"ANC\";\n  this.instname[58] = \"ARR\";\n  this.instname[59] = \"AXS\";\n  this.instname[60] = \"LAX\";\n  this.instname[61] = \"SAX\";\n  this.instname[62] = \"DCP\";\n  this.instname[63] = \"ISC\";\n  this.instname[64] = \"RLA\";\n  this.instname[65] = \"RRA\";\n  this.instname[66] = \"SLO\";\n  this.instname[67] = \"SRE\";\n  this.instname[68] = \"SKB\";\n  this.instname[69] = \"IGN\";\n\n  this.addrDesc = new Array(\n    \"Zero Page           \",\n    \"Relative            \",\n    \"Implied             \",\n    \"Absolute            \",\n    \"Accumulator         \",\n    \"Immediate           \",\n    \"Zero Page,X         \",\n    \"Zero Page,Y         \",\n    \"Absolute,X          \",\n    \"Absolute,Y          \",\n    \"Preindexed Indirect \",\n    \"Postindexed Indirect\",\n    \"Indirect Absolute   \"\n  );\n};\n\nOpData.prototype = {\n  INS_ADC: 0,\n  INS_AND: 1,\n  INS_ASL: 2,\n\n  INS_BCC: 3,\n  INS_BCS: 4,\n  INS_BEQ: 5,\n  INS_BIT: 6,\n  INS_BMI: 7,\n  INS_BNE: 8,\n  INS_BPL: 9,\n  INS_BRK: 10,\n  INS_BVC: 11,\n  INS_BVS: 12,\n\n  INS_CLC: 13,\n  INS_CLD: 14,\n  INS_CLI: 15,\n  INS_CLV: 16,\n  INS_CMP: 17,\n  INS_CPX: 18,\n  INS_CPY: 19,\n\n  INS_DEC: 20,\n  INS_DEX: 21,\n  INS_DEY: 22,\n\n  INS_EOR: 23,\n\n  INS_INC: 24,\n  INS_INX: 25,\n  INS_INY: 26,\n\n  INS_JMP: 27,\n  INS_JSR: 28,\n\n  INS_LDA: 29,\n  INS_LDX: 30,\n  INS_LDY: 31,\n  INS_LSR: 32,\n\n  INS_NOP: 33,\n\n  INS_ORA: 34,\n\n  INS_PHA: 35,\n  INS_PHP: 36,\n  INS_PLA: 37,\n  INS_PLP: 38,\n\n  INS_ROL: 39,\n  INS_ROR: 40,\n  INS_RTI: 41,\n  INS_RTS: 42,\n\n  INS_SBC: 43,\n  INS_SEC: 44,\n  INS_SED: 45,\n  INS_SEI: 46,\n  INS_STA: 47,\n  INS_STX: 48,\n  INS_STY: 49,\n\n  INS_TAX: 50,\n  INS_TAY: 51,\n  INS_TSX: 52,\n  INS_TXA: 53,\n  INS_TXS: 54,\n  INS_TYA: 55,\n\n  INS_ALR: 56,\n  INS_ANC: 57,\n  INS_ARR: 58,\n  INS_AXS: 59,\n  INS_LAX: 60,\n  INS_SAX: 61,\n  INS_DCP: 62,\n  INS_ISC: 63,\n  INS_RLA: 64,\n  INS_RRA: 65,\n  INS_SLO: 66,\n  INS_SRE: 67,\n  INS_SKB: 68,\n  INS_IGN: 69,\n\n  INS_DUMMY: 70, // dummy instruction used for 'halting' the processor some cycles\n\n  // -------------------------------- //\n\n  // Addressing modes:\n  ADDR_ZP: 0,\n  ADDR_REL: 1,\n  ADDR_IMP: 2,\n  ADDR_ABS: 3,\n  ADDR_ACC: 4,\n  ADDR_IMM: 5,\n  ADDR_ZPX: 6,\n  ADDR_ZPY: 7,\n  ADDR_ABSX: 8,\n  ADDR_ABSY: 9,\n  ADDR_PREIDXIND: 10,\n  ADDR_POSTIDXIND: 11,\n  ADDR_INDABS: 12,\n\n  setOp: function (inst, op, addr, size, cycles) {\n    this.opdata[op] =\n      (inst & 0xff) |\n      ((addr & 0xff) << 8) |\n      ((size & 0xff) << 16) |\n      ((cycles & 0xff) << 24);\n  },\n};\n\nmodule.exports = CPU;\n"],"mappings":"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AC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EACxC,QAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EACxC,QAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EACxC,QAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EACxC,QAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EACxC,QAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EACxC,QAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EACxC,QAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EACxC,QAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EACxC,QAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EACxC,QAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EACxC,QAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EACxC,QAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EACxC,QAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EACxC,QAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CACzC,CAAC;EAED,IAAI,CAACmI,QAAQ,GAAG,IAAInI,KAAK,CAAC,EAAE,CAAC;;EAE7B;EACA,IAAI,CAACmI,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK;EACxB,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK;EACxB,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK;EACxB,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK;EACxB,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK;EACxB,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK;EACxB,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK;EACxB,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK;EACxB,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK;EACxB,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK;EACxB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK;EACzB,IAAI,CAACA,QAAQ,CAAC,EAA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}